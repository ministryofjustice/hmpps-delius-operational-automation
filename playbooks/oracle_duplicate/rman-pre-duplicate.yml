- name: Pre database duplicate tasks
  hosts: "{{ duplicate_target }}"
  gather_facts: no
  become: yes
  become_user: oracle

  tasks:
    - name: Check Database State
      script: ../../common/files/get_database_state.sh
      register: get_database_state
      changed_when: false

    # If the database is running but not open it may be due to a previous duplicate failure,
    # so we make one attempt to bounce the database into the open state.  If it fails we
    # just ignore it, as it is possible the database is completely broken for some previous
    # reason.  In this case we just continue without attempting to export any data.
    - name: Open Database
      when: "'ORA-01507: database not mounted' in get_database_state.stdout or 'MOUNTED' in get_database_state.stdout"
      ignore_errors: true
      block:
          - include_tasks: shutdown_database.yml
          - include_tasks: startup_database.yml
          - name: Re-Check Database State
            script: ../../common/files/get_database_state.sh
            register: new_database_state
            changed_when: false

    - name: Set Fact For Database State
      delegate_to: localhost
      delegate_facts: true
      set_fact:
        database_open: "{{ ('READ WRITE' in get_database_state.stdout) or ('READ WRITE' in new_database_state.stdout | default('')) }}"

    - name: Include Tasks
      when: hostvars.localhost.database_open
      block:
        - name: Store readonly passwords
          include_tasks: "{{ playbook_dir }}/../delius_users/playbook.yml"
          vars:
            action_type: "store"
          when:
            - duplicate_target | regex_search('.*_delius_primarydb')

        - name: Export Automatic Workload Repository (AWR)
          include_tasks: ../awr_export/playbook.yml
          when: aws_environment | regex_search('preproduction')

- name: Export dfi schmeas only for STGMIS
  import_playbook: dfi-schemas.yml
  vars:
    action: "export"
  when:
    - duplicate_target | regex_search('.*_mis_primarydb$')
    - database_primary_sid | regex_search('STGMIS.*$')

- name: Keep delius datasets required
  import_playbook: delius-datasets.yml
  vars:
    action: "keep"
  when:
    - duplicate_target | regex_search('.*_delius_primarydb')

# Allow jobs during the blackout so the Audited Interaction archival job may run
- name: Start database monitoring blackout
  import_playbook: ../oem_blackout/playbook.yml
  vars:
    target: "{{ duplicate_target.split('_primarydb')[0] + '_dbs' }}"
    action: "start"
    object_type: "all"
    blackout: "DUPLICATE_{{ environment_name }}"
    duration: ""
    allow_jobs: true

# If FSFO is enabled then disable it for the refresh, to avoid any attempt to failover when the old primary
# database is removed.   This will be automatically reinstated when the HA Build step runs later.
- name: Disable Data Guard FSFO
  hosts: "{{ duplicate_target }}"
  gather_facts: no
  become: yes
  become_user: oracle

  tasks:
    - name: Get Fast-Start Failover Status
      shell: |
        . ~/.bash_profile
        dgmgrl -silent / "show configuration;" | awk -F: '/Fast-Start Failover/{print $2}'
      register: get_fast_start_failover
      changed_when: false

    - name: Disble Fast-Start Failover
      shell: |
        . ~/.bash_profile
        dgmgrl -silent / "disable fast_start failover"
      when:
        - ( get_fast_start_failover.stdout | trim ) not in ['','Disabled']

# Block incoming sessions and kill existing sessions to ensure no further activity prior to the duplicate starting
# (Only required for Delius, to ensure that any auditable activity has been preserved)

- name: Block all database sessions
  import_playbook: ../block_sessions/playbook.yml
  vars:
    target_host: "{{ duplicate_target }}"
    action: "block"
  when: duplicate_target |  regex_search('.*_delius_primarydb')
