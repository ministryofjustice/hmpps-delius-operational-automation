- name: Get data guard broker role configuration for the standby database to be converted
  shell: |
    . ~/.bash_profile
    dgmgrl / "show database {{ database_standby_unique | lower }}" | grep "Role:" | awk -F: '{print $2}' | awk '{sub(/^[ \t]+/, "");print}'
  changed_when: false
  register: database_role

- name: Check action against current database role and fail if database already in required state
  debug:
    msg: Current database role is "{{ database_role.stdout }}" and action chosen is "{{ action }}"
  failed_when: database_role.stdout == "SNAPSHOT STANDBY"

- name: Set primary database and service name fact
  set_fact:
    primary_database: "{{ hostvars[groups[database_type + 'primarydb'][0]]['database_primary_sid'] }}"
    service_name: "{{ hostvars[groups[database_type + 'primarydb'][0]]['database_primary_sid'] }}_RO"

- name: Actions to convert to snapshot standby only if it's currently in physical standby role
  block:
    # We disable audit replication checksums whilst we are using a snapshot standby database.
    # This is because audit data will be getting collected on the snapshot standy and will
    # not be replicated to the target until after it is converted back to a physical standby.
    # Therefore any checksums calculated during this period may not include audit data from
    # the snapshot standby and may therefore be incorrect.  The simplest solution is to
    # suspend checksumming until after converting back to physical when all audit data is
    # then in place on the primary.   It is not anticipated that a database will be a
    # Snapshot Standby for extended periods of time, therefore the checksumming will only
    # be disabled for a few hours, which is similar to the gaps between scheduled runs
    # anyway.
    - name: Temporarily Disable Audit Replication Checksumming
      script: |
        control_checksum_calculation.sh DISABLED
      delegate_to: "{{ primary_hostname }}"
      when: is_audit_client
      register: disable_checksumming
      changed_when: disable_checksumming.stdout is search ('Audit checksumming disabled.')

    - name: Check standby database apply lag - fail conversion if consistently non zero
      shell: |
        . ~/.bash_profile
        dgmgrl / "show database {{ database_standby_unique | lower }}"  | grep "Apply Lag:" | awk  '{print $3}'
      register: apply_lag
      changed_when: false
      until: apply_lag.stdout == '0'
      delay: 10
      retries: 10

    # If there is only one standby database and FSFO is enabled then we cannot failover
    - name: Fail if FSFO Enabled and No Valid Target Available
      fail:
        msg: "FSFO is enabled and no database available to serve as active target"
      when:
        - ( get_fast_start_failover.stdout | trim ) != 'Disabled'
        - ( fsfo_targets.split(',')[0] | lower | trim ) == ( database_standby_unique | lower )
        - ( fsfo_targets.split(',') | length < 2 ) or (( set_fsfo_active_target.rc | default(0) ) > 0 )

    # We cannot convert a database to be the standby if it is the active target for FSFO
    # Therefore swap the primary target to the other standby database if we can
    - name: Change FSFO Active Target to Other Standby if it Exists
      include_role:
        name: "{{ playbook_dir }}/../oracle_ha"
        tasks_from: set-fsfo-active-target.yml
      when:
        - ( fsfo_targets.split(',')[0] | lower | trim ) == ( database_standby_unique | lower )
        - ( get_fast_start_failover.stdout | trim ) != 'Disabled'
      register: set_fsfo_active_target
      ignore_errors: true
      vars:
        delegation_host: "{{ primary_hostname }}"
        preferred_active_target: "{{ fsfo_targets.split(',')[1] | lower | trim }}"

    - name: Convert physical standby database to snapshot standby database
      shell: |
        . ~/.bash_profile
        dgmgrl / "convert database '{{ database_standby_unique | lower }}' to snapshot standby";
      register: convert_to_snapshot
      retries: 3
      delay: 30
      until: convert_to_snapshot is not failed

    - name: Create service name for connecting to the snapshot standby database
      shell: |
        . ~/.bash_profile
        srvctl add service -d {{ database_standby_unique }} -s {{ service_name }} -l SNAPSHOT_STANDBY
        srvctl start service -d {{ database_standby_unique }} -s {{ service_name }}
      register: create_service

  when: database_role.stdout == 'PHYSICAL STANDBY'
