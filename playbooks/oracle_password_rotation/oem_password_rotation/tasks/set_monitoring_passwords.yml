- name: Sync SYS Password Parameter in the {{ target_environment_name }}
  block:
    - name: Work Out Host Match And Environment (Delius)
      block:
        - name: Set Environment (Delius)
          set_fact:
            secret_environment: "delius-core-{{ aws_environment }}"

        - name: Set Host Match (Delius)
          set_fact:
            host_match: "delius.{{ dns_zone_internal.split('.')[1:] | join('.') }}"

      when: not target_environment_name is search('hmpps-oem')

    - name: Work Out Host Match and Environment (OEM)
      block:
        - name: Set Environment (OEM)
          set_fact:
            secret_environment: "{{ oemdb_secretsmanager_passwords['oemdb']['secret'] }}"

        - name: Set Host Match (OEM)
          set_fact:
            host_match: "{{ inventory_hostname }}"

      when: target_environment_name is search('hmpps-oem')

    # SYS is Used for Standby Database Monitoring
    - name: Get All Physical Standby Databases in this Environment
      shell: |
        . ~/.bash_profile
        {{ emcli }} sync 1>/dev/null 2>&1 || ( {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force && {{ emcli }} sync ) 1>/dev/null 2>&1
        {{ emcli }} get_targets -script -targets="%{{ host_match }}%:host;" -noheader | awk '{print $NF}' | xargs -i {{ emcli }} list -resource="Targets" -search="HOST_NAME='{}'" -search="TARGET_TYPE='oracle_database'" -search="TYPE_QUALIFIER4='Physical Standby'" -script -columns="TARGET_NAME,HOST_NAME" -noheader | sed 's/^\([a-zA-Z0-9_\.-]*\)[[:space:]]*\([a-zA-Z0-9_\.]*\)-\([a-zA-Z0-9_\.]*\)-.*$/\1 \2 \3/'
        {{ emcli }} get_targets -script -targets="%{{ host_match }}%:host;" -noheader | awk '{print $NF}' | xargs -i {{ emcli }} list -resource="Targets" -search="HOST_NAME='{}'" -search="TARGET_TYPE='oracle_database'" -search="TYPE_QUALIFIER4='Snapshot Standby'" -script -columns="TARGET_NAME,HOST_NAME" -noheader | sed 's/^\([a-zA-Z0-9_\.-]*\)[[:space:]]*\([a-zA-Z0-9_\.]*\)-\([a-zA-Z0-9_\.]*\)-.*$/\1 \2 \3/'
      register: physical_standby
      environment:
        SYSMAN_PASSWORD: "{{ sysman_password }}"
      changed_when: false

    - name: Set the Monitoring Credentials for Physical Standby Databases
      shell: |
        . ~/.bash_profile
        {{ emcli }} sync 1>/dev/null 2>&1 || ( {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force && {{ emcli }} sync ) 1>/dev/null 2>&1
        {{ emcli }} modify_target -name="{{ db_name.split()[0] }}" -type="oracle_database" -credentials="UserName:sys;password:${SYS_PASSWORD};Role:SYSDBA" -on_agent
      loop: "{{ physical_standby.stdout_lines }}"
      loop_control:
        loop_var: db_name
      environment:
        SYSMAN_PASSWORD: "{{ sysman_password }}"
        SYS_PASSWORD: >-
          {{ lookup('amazon.aws.aws_secret', '{{ secret_environment }}', region='eu-west-2') | from_json | json_query('sys') if (db_name.split()[2] == "oem") else lookup('amazon.aws.aws_secret', '{{ secret_environment }}-{{ db_name.split()[1] }}-{{ db_name.split()[2] }}-dba-passwords' , region='eu-west-2') | from_json | json_query('sys') }}

    # DBSNMP is Used for Primary Database Monitoring
    # In OEM, in a Data Guard Configuration the database type (TYPE_QUALIFIER4) is "Primary".   In a non-Data Guard Configuration TYPE_QUALIFIER4 is set to a single space character.  Handle both cases.
    # (This cannot be done within SEARCH as multiple conditions will be AND'ed together rather than OR'ed.  Therefore call the same function with both possibilities)
    - name: Get All Primary Databases in this Environment
      shell: |
        . ~/.bash_profile
        {{ emcli }} sync 1>/dev/null 2>&1 || ( {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force && {{ emcli }} sync ) 1>/dev/null 2>&1
        {{ emcli }} get_targets -script -targets="%{{ host_match }}%:host;" -noheader | awk '{print $NF}' | xargs -i {{ emcli }} list -resource="Targets" -search="HOST_NAME='{}'" -search="TARGET_TYPE='oracle_database'" -search="TYPE_QUALIFIER4='Primary'" -script -columns="TARGET_NAME,HOST_NAME" -noheader | sed 's/^\([a-zA-Z0-9_\.-]*\)[[:space:]]*\([a-zA-Z0-9_\.]*\)-\([a-zA-Z0-9_\.]*\)-.*$/\1 \2 \3/'
        {{ emcli }} get_targets -script -targets="%{{ host_match }}%:host;" -noheader | awk '{print $NF}' | xargs -i {{ emcli }} list -resource="Targets" -search="HOST_NAME='{}'" -search="TARGET_TYPE='oracle_database'" -search="TYPE_QUALIFIER4=' '" -script -columns="TARGET_NAME,HOST_NAME" -noheader | sed 's/^\([a-zA-Z0-9_\.-]*\)[[:space:]]*\([a-zA-Z0-9_\.]*\)-\([a-zA-Z0-9_\.]*\)-.*$/\1 \2 \3/'
      register: primary
      environment:
        SYSMAN_PASSWORD: "{{ sysman_password }}"
      changed_when: false

    - name: Set the Monitoring Credentials for Primary Databases
      shell: |
        . ~/.bash_profile
        {{ emcli }} sync 1>/dev/null 2>&1 || ( {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force && {{ emcli }} sync ) 1>/dev/null 2>&1
        {{ emcli }} modify_target -name="{{ db_name.split()[0] }}" -type="oracle_database" -credentials="UserName:dbsnmp;password:${DBSNMP_PASSWORD};Role:Normal" -on_agent
      loop: "{{ primary.stdout_lines }}"
      loop_control:
        loop_var: db_name
      environment:
        SYSMAN_PASSWORD: "{{ sysman_password }}"
        DBSNMP_PASSWORD: >-
          {{ lookup('amazon.aws.aws_secret', '{{ secret_environment }}', region='eu-west-2') | from_json | json_query('dbsnmp') if (db_name.split()[2] == "oem") else lookup('amazon.aws.aws_secret', '{{ secret_environment }}-{{ db_name.split()[1] }}-{{ db_name.split()[2] }}-dba-passwords' , region='eu-west-2') | from_json | json_query('dbsnmp') }}

    # ASMSNMP is Used for ASM Instance Monitoring
    - name: Get All ASM Instances in this Environment
      shell: |
        . ~/.bash_profile
        {{ emcli }} sync 1>/dev/null 2>&1 || ( {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force && {{ emcli }} sync ) 1>/dev/null 2>&1
        {{ emcli }} get_targets -script -targets="%{{ host_match }}%:host;" -noheader | awk '{print $NF}' | xargs -i {{ emcli }} list -resource="Targets" -search="HOST_NAME='{}'" -search="TARGET_TYPE='osm_instance'" -script -columns="TARGET_NAME" -noheader | awk -F[_-] '{printf("%s %s %s\n",$0,$2,$3)}'
      register: osm_instance
      environment:
        SYSMAN_PASSWORD: "{{ sysman_password }}"
      changed_when: false

    - name: Set the Monitoring Credentials for ASM
      shell: |
        . ~/.bash_profile
        {{ emcli }} sync 1>/dev/null 2>&1 || ( {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force && {{ emcli }} sync ) 1>/dev/null 2>&1
        {{ emcli }} modify_target -name="{{ asm_name.split()[0] }}" -type="osm_instance" -credentials="UserName:asmsnmp;password:${ASMSNMP_PASSWORD};Role:SYSASM" -on_agent
      loop: "{{ osm_instance.stdout_lines }}"
      register: set_asm_pwd
      loop_control:
        loop_var: asm_name
      retries: 3
      until: set_asm_pwd is not failed
      delay: 60
      environment:
        SYSMAN_PASSWORD: "{{ sysman_password }}"
        ASMSNMP_PASSWORD: >-
          {{ lookup('amazon.aws.aws_secret', '{{ asm_monitoring_secret_name }}', region='eu-west-2') | from_json | json_query('ASMSNMP') if (asm_name.split()[2] == "oem") else lookup('amazon.aws.aws_secret', '{{ secret_environment }}-{{ asm_name.split()[1] }}-{{ asm_name.split()[2] }}-dba-passwords' , region='eu-west-2') | from_json | json_query('asmsnmp') }}
