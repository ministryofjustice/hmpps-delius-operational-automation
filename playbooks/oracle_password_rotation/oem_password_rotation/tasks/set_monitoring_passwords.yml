- name: Sync SYS Password Parameter in the {{ target_environment_name }}
  block:
    - name: Set Emcli Script Variable
      set_fact:
        emcli_script: "{{ stage }}/emcli_script.sh"

    - name: Copy Emcli script
      template:
        src: emcli_script.sh.j2
        dest: "{{ emcli_script }}"
        mode: "0700"

    - name: Set Host Match
      set_fact:
        host_match: "{{ target_environment_name if (not target_environment_name is search('hmpps-oem')) else inventory_hostname }}"
        target_account_name: "{{ target_environment_name.split('-')[:2] | join('-') + '-' + aws_environment if (not target_environment_name is search('hmpps-oem')) else target_environment_name }}"

    - name: Initialise Monitor List
      set_fact:
        monitor_list: []

    - name: Set Emcli Physical Standby Databases Command
      set_fact:
        emcli_commands: |
          {{ emcli }} get_targets -script -targets="%{{ host_match }}%:host;" -noheader | awk '{print $NF}' | xargs -i {{ emcli }} list -resource="Targets" -search="HOST_NAME='{}'" -search="TARGET_TYPE='oracle_database'" -search="TYPE_QUALIFIER4='Physical Standby'" -script -columns="TARGET_NAME,HOST_NAME" -noheader | sed 's/^\([a-zA-Z0-9_\.-]*\)[[:space:]]*\([a-zA-Z0-9_\.]*\)-\([a-zA-Z0-9_\.]*\)-.*$/\1 \2 \3/';
          {{ emcli }} get_targets -script -targets="%{{ host_match }}%:host;" -noheader | awk '{print $NF}' | xargs -i {{ emcli }} list -resource="Targets" -search="HOST_NAME='{}'" -search="TARGET_TYPE='oracle_database'" -search="TYPE_QUALIFIER4='Snapshot Standby'" -script -columns="TARGET_NAME,HOST_NAME" -noheader | sed 's/^\([a-zA-Z0-9_\.-]*\)[[:space:]]*\([a-zA-Z0-9_\.]*\)-\([a-zA-Z0-9_\.]*\)-.*$/\1 \2 \3/';

    - name: Get All Physical Standby Databases in this Environment
      ansible.builtin.command: >
        {{ emcli_script }}
      environment:
        ACCOUNT_NAME: "{{ target_account_name }}"
        EMCLI_COMMANDS: "{{ emcli_commands }}"
      register: physical_standby
      changed_when: false

    - block:
        - name: Create Lists For Standby Databases
          set_fact:
            monitor_list: "{{ monitor_list | default([]) + [ env ] }}"
          loop: "{{ physical_standby.stdout_lines }}"
          loop_control:
            loop_var: env

        - name: Set the Monitoring Credentials for Physical Standby Databases
          include_tasks: set_monitoring_password.yml
          vars:
            secret_name: "{{ '/oracle/database/' + target_env.split()[0] + '/passwords' if (target_environment_name is search('hmpps-oem')) else target_environment_name + '-oracle-' + (target_env.split()[0][3:6] | lower + '-db-dba-passwords' if ( target_env.split()[2] == 'mis') else 'db-dba-passwords') }}"
            db_username: sys
            monitor_type: oracle_database
            monitor_role: SYSDBA
            monitor_item: "{{ target_env.split()[0] }}"
          loop: "{{ monitor_list }}"
          loop_control:
            loop_var: target_env

        - name: Reset Monitor List
          set_fact:
            monitor_list: []

      when: physical_standby.stdout_lines | length > 0

    # DBSNMP is Used for Primary Database Monitoring
    # In OEM, in a Data Guard Configuration the database type (TYPE_QUALIFIER4) is "Primary".   In a non-Data Guard Configuration TYPE_QUALIFIER4 is set to a single space character.  Handle both cases.
    # (This cannot be done within SEARCH as multiple conditions will be AND'ed together rather than OR'ed.  Therefore call the same function with both possibilities)

    - name: Set Emcli Primary Databases Command
      set_fact:
        emcli_commands: |
          {{ emcli }} get_targets -script -targets="%{{ host_match }}%:host;" -noheader | awk '{print $NF}' | xargs -i {{ emcli }} list -resource="Targets" -search="HOST_NAME='{}'" -search="TARGET_TYPE='oracle_database'" -search="TYPE_QUALIFIER4='Primary'" -script -columns="TARGET_NAME,HOST_NAME" -noheader | sed 's/^\([a-zA-Z0-9_\.-]*\)[[:space:]]*\([a-zA-Z0-9_\.]*\)-\([a-zA-Z0-9_\.]*\)-.*$/\1 \2 \3/';
          {{ emcli }} get_targets -script -targets="%{{ host_match }}%:host;" -noheader | awk '{print $NF}' | xargs -i {{ emcli }} list -resource="Targets" -search="HOST_NAME='{}'" -search="TARGET_TYPE='oracle_database'" -search="TYPE_QUALIFIER4='None'" -script -columns="TARGET_NAME,HOST_NAME" -noheader | sed 's/^\([a-zA-Z0-9_\.-]*\)[[:space:]]*\([a-zA-Z0-9_\.]*\)-\([a-zA-Z0-9_\.]*\)-.*$/\1 \2 \3/';
          {{ emcli }} get_targets -script -targets="%{{ host_match }}%:host;" -noheader | awk '{print $NF}' | xargs -i {{ emcli }} list -resource="Targets" -search="HOST_NAME='{}'" -search="TARGET_TYPE='oracle_database'" -search="TYPE_QUALIFIER4=' '" -script -columns="TARGET_NAME,HOST_NAME" -noheader | sed 's/^\([a-zA-Z0-9_\.-]*\)[[:space:]]*\([a-zA-Z0-9_\.]*\)-\([a-zA-Z0-9_\.]*\)-.*$/\1 \2 \3/';

    - name: Get All Primary Databases in this Environment
      ansible.builtin.command: >
        {{ emcli_script }}
      environment:
        ACCOUNT_NAME: "{{ target_account_name }}"
        EMCLI_COMMANDS: "{{ emcli_commands }}"
      register: primary
      changed_when: false

    - name: Create Lists For Primary Databases
      set_fact:
        monitor_list: "{{ monitor_list | default([]) + [ env ] }}"
      loop: "{{ primary.stdout_lines }}"
      loop_control:
        loop_var: env

    - name: Narrow Monitor Primary Database List If Not From OEM
      set_fact:
        monitor_list: "{{ monitor_list | select('match','^' + database_primary_sid + '.*$') }}"
      when:
        - not target_environment_name is search('hmpps-oem')
        - not group_names is search('server_type_hmpps_oem')

    - name: Set the Monitoring Credentials for Primary Databases
      include_tasks: set_monitoring_password.yml
      vars:
        secret_name: "{{ '/oracle/database/' + target_env.split()[0] + '/passwords' if (target_environment_name is search('hmpps-oem')) else target_environment_name + '-oracle-' + (target_env.split()[0][3:6] | lower + '-db-dba-passwords' if ( target_env.split()[2] == 'mis') else 'db-dba-passwords') }}"
        db_username: dbsnmp
        monitor_type: oracle_database
        monitor_role: Normal
        monitor_item: "{{ target_env.split()[0] }}"
      loop: "{{ monitor_list }}"
      loop_control:
        loop_var: target_env

    - name: Reset Monitor List
      set_fact:
        monitor_list: []

    - name: Set Emcli ASM Instances Command
      set_fact:
        emcli_commands: |
          {{ emcli }} get_targets -script -targets="%{{ host_match }}%:host;" -noheader | awk '{print $NF}' | xargs -i {{ emcli }} list -resource="Targets" -search="HOST_NAME='{}'" -search="TARGET_TYPE='osm_instance'" -script -columns="TARGET_NAME" -noheader | awk -F[_-] '{printf("%s %s %s\n",$0,$2,$3)}';

    # ASMSNMP is Used for ASM Instance Monitoring
    - name: Get All ASM Instances in this Environment
      ansible.builtin.command: >
        {{ emcli_script }}
      environment:
        ACCOUNT_NAME: "{{ target_account_name }}"
        EMCLI_COMMANDS: "{{ emcli_commands }}"
      register: osm_instance
      changed_when: false

    - name: Create Lists For ASM
      set_fact:
        monitor_list: "{{ monitor_list | default([]) + [ env ] }}"
      loop: "{{ osm_instance.stdout_lines }}"
      loop_control:
        loop_var: env

    - name: Narrow Monitor ASM List If Not From OEM
      set_fact:
        monitor_list: "{{ monitor_list | select('match','^.*' + inventory_hostname | regex_replace('^(.*-db-)\\d{1}','\\1') + '.*$') }}"
      when:
        - not target_environment_name is search('hmpps-oem')
        - not group_names is search('server_type_hmpps_oem')

    - name: Set the Monitoring Credentials for ASM Instances
      include_tasks: set_monitoring_password.yml
      vars:
        secret_name: "{{ '/ec2/' + ec2_name + '/asm-passwords' if target_environment_name is search('hmpps-oem') else target_environment_name + '-oracle-' + ( target_env.split()[0] | regex_replace('^.*ASM_.*(\\w{3})-db-.*$','\\1-') + 'db-dba-passwords' if ( target_env.split()[2] == 'mis') else 'db-dba-passwords') }}"
        db_username: "{{ 'ASMSNMP'  if (target_environment_name is search('hmpps-oem')) else 'asmsnmp' }}"
        monitor_type: osm_instance
        monitor_role: SYSASM
        monitor_item: "{{ target_env.split()[0] }}"
      loop: "{{ monitor_list }}"
      loop_control:
        loop_var: target_env

  always:
    - name: Remove Temporary Files from Stage Area
      file:
        path: "{{ emcli_script }}"
        state: absent
