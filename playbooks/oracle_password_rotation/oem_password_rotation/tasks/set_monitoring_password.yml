- name: Initialise Secrets Dictionary
  set_fact:
    secretsmanager_passwords_dict: {}

- name: Setup Temporary Secrets Dictionary For Non OEM Running From OEM
  set_fact:
    secret_password_dict:
      account:
        account_name: "{{ target_account_name }}"
        assume_role_name: "EC2OracleEnterpriseManagementSecretsRole"
        secret: "{{ secret_name }}"
  when: not target_environment_name is search('hmpps-oem') and emcli_login is not defined

- name: Setup Temporary Secrets Dictionary For OEM and Non OEM (Not Running From OEM)
  set_fact:
    secret_password_dict:
      account:
        secret: "{{ secret_name }}"
  when: target_environment_name is search('hmpps-oem') or emcli_login is defined

- name: Combine {{ db_username }} User To Secrets Dictionary
  set_fact:
    secret_password_dict: "{{ secret_password_dict |  combine({ 'account': { 'users': [{db_username: None}] }}, recursive=true) }}"

- name: Get Password From Secrets
  import_role:
    name: secretsmanager-passwords
  vars:
    secretsmanager_passwords: "{{ secret_password_dict }}"

- name: Set Variable {{ db_username }} Password
  set_fact:
    password: "{{ secretsmanager_passwords_dict['account'].passwords[db_username] }}"

- name: Set the Monitoring Credential
  shell: |
    . ~/.bash_profile
    {{ emcli_login | default() }}
    {{ emcli }} sync 1>/dev/null 2>&1 || ( {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force && {{ emcli }} sync ) 1>/dev/null 2>&1
    {{ emcli }} modify_target -name="{{ monitor_item.split()[0] }}" -type="{{ monitor_type }}" -credentials="UserName:{{ db_username }};password:${PASSWORD};Role:{{ monitor_role }}" -on_agent
  environment:
    SYSMAN_PASSWORD: "{{ sysman_password }}"
    PASSWORD: "{{ password }}"
  loop: "{{ monitor_list }}"
  loop_control:
    loop_var: monitor_item
  when: monitor_item.split()[0] == target_env..split()[0]
