- name: Check if the SYS Password Works
  script: get_sys_remote_lock.sh
  register: get_sys_primary_remote_lock
  changed_when: false
  ignore_errors: true
  run_once: true
  environment:
    DB_NAME: "{{ db_configs['EMREP']['emrepo_db_name'] }}"
    SECRET_ID: "{{ oemdb_secretsmanager_passwords['oemdb']['secret'] }}"

- name: Abort if SYS Connection Fails
  fail:
    msg: "SYS Connection Failed connecting to OMS Repository Database.   Aborting without shutting down OMS."
  when: get_sys_primary_remote_lock.rc > 0

- name: Create New Password for SYSMAN
  include_tasks: ../../all_password_rotation/tasks/create_random_password.yml

- name: Add SYSMAN Password To Secret Dictionary
  set_fact:
    oem_secretsmanager_passwords: "{{ oem_secretsmanager_passwords |  combine({ 'oem': { 'users': [{'sysman': new_password}] }}, recursive=true) }}"

- name: Record New Password for SYSMAN In Secrets
  import_role:
    name: secretsmanager-passwords
  vars:
    secretsmanager_passwords: "{{ oem_secretsmanager_passwords }}"

- name: Update EM Grid Control Passwords
  block:
    - name: Check OMS Status
      shell: '{{ emctl_oem }} status oms | grep "Oracle Management Server" | awk ''{print $NF}'''
      register: oms_status
      changed_when: false

    - name: Shutdown OMS
      shell: "{{ emctl_oem }} stop oms"
      when: not oms_status.stdout_lines[-1] == 'Down'
      vars:
        ansible_aws_ssm_timeout: 900

    # The SYS password may be used to change the SYSMAN password if the current SYSMAN password is not available.
    # Always use this approach in case previous reset of the SYSMAN password has failed.
    # (Note non-standard successful return code of 1)
    - name: Change SYSMAN Password
      ansible.builtin.command: >
        {{ emctl_script }}
      environment:
        ROTATE: OMS
      register: change_sysman_password
      failed_when: change_sysman_password.rc > 1

    # We do not currently use the Management View user so the password can be set randomly
    - name: Change MGMT_VIEW Password
      ansible.builtin.command: >
        {{ emctl_script }}
      environment:
        ROTATE: MGMT_VIEW

    - name: Check Admin Server Status
      shell: '{{ emctl_oem }} status oms | grep "WebTier" | awk ''{print $NF}'''
      register: webtier_status
      changed_when: false

    - name: Shutdown Admin Server
      shell: "{{ emctl_oem }} stop oms -all"
      when: not webtier_status.stdout_lines[-1] == 'Down'
      vars:
        ansible_aws_ssm_timeout: 900

    - name: Check OMS Status
      shell: '{{ emctl_oem }} status oms | grep "Oracle Management Server" | awk ''{print $NF}'''
      register: oms_status
      changed_when: false

    - name: Start OMS
      shell: "{{ emctl_oem }} start oms"
      when: not oms_status.stdout_lines[-1] == 'Up'
      vars:
        ansible_aws_ssm_timeout: 900

    - name: Update OEM_DB Named Credential
      ansible.builtin.command: >
        {{ emcli_script }}
      environment:
        EMCTL_COMMANDS: '{{ emcli }} modify_named_credential -cred_name=OEM_DB -cred_type=DBCreds -test -attributes="DBUserName:sysman;DBRole:Normal;DBPassword:${SYSMAN_PASSWORD}"'
      register: update_name_credential
      failed_when: update_name_credential.rc != 0

# - name: Create New Password for Nodemanager
#   include: ../../all_password_rotation/tasks/create_random_password.yml

# - name: Record New Password for Nodemanager in Parameter Store
#   community.aws.aws_ssm_parameter_store:
#       name: "/{{ environment_name }}/engineering/oem-database/db/nodemanager_password"
#       value: "{{ new_password }}"
#       overwrite_value: changed
#       string_type: "SecureString"
#       aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
#       aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
#       security_token: "{{ assumed_role.sts_creds.session_token }}"
#       region: "{{ region }}"

# - name: Set Nodemanager Password
#   shell: |
#          {{ emcli }} sync 1>/dev/null 2>&1 || ( {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force && {{ emcli }} sync ) 1>/dev/null 2>&1
#          {{ emcli }}  modify_target -name="/EMGC_GCDomain/GCDomain" -type="weblogic_domain" -credentials="NMUserName:nodemanager;NMPassword:${NODEMANAGER_PASSWORD};" -on_agent
#   delegate_to: "{{ groups['oem_primarydb'][0] }}"
#   become: true
#   become_user: oracle
#   environment:
#     SYSMAN_PASSWORD: "{{ lookup('aws_ssm', '/{{ environment_name }}/engineering/oem-database/db/oradb_sysman_password', decrypt=true, aws_access_key=assumed_role.sts_creds.access_key, aws_secret_key=assumed_role.sts_creds.secret_key, aws_security_token=assumed_role.sts_creds.session_token ) }}"
#     NODEMANAGER_PASSWORD: "{{ new_password }}"
