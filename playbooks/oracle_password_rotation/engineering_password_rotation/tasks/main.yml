- name: Process HCL File to Get Account IDs
  include_tasks: ../../all_password_rotation/tasks/read_hcl.yml
  run_once: true

- name: Check if AWS Client exists on Ansible Controller
  shell: aws --version
  register: aws_cli_exists
  ignore_errors: true

- name: Install AWS cli
  shell:  |
          apt-get update
          apt install -y awscli
          apt install -y jq
  when: aws_cli_exists.rc != 0
  run_once: true
  tags: awscli

# Audit Wallet does not exist in Engineering Accounts - skip those
- name: Ensure Audit Wallet Target Passwords are in Sync with SSM
  include_tasks: set_audited_interaction_wallet_passwords.yml
  when: 
     - sync_audit_wallet_password | default(true) | bool
     - not target_environment_name is search('engineering')

- name: Rotate RMAN Password
  include_clude: rotate_rman_password.yml
  when: rotate_rman_password | default(false) | bool

- name: Rotate OEM and Agent Registration Passwords
  when: rotate_oem_passwords | default(false) | bool
  block:

      # We do not want notifications being sent whilst OEM is starting up, so grab the lock file and hold it until
      # a reasonable time has passed.   By this time all transient start-up type incidents should have self-cleared.
      # Any remaining incidents will be picked up by the next notification cron job.
      #
      # Note that the lock may already be held by another process.   This does not mean that we should not proceed,
      # however we need to reduce the lock hold time by the amount of time that we wait for this other process.
      # So, we take note of the lock request start time, and subtract this from the actual time that we get the lock,
      # before subtracting the whole amount from the requested sleep time.  Note that we have to use EVAL to ensure
      # the date evalations happens at runtime (once lock held) and not when the command is initially passed to flock.
      # (Use conditional to avoid attempting a negative sleep)
      - name: Lock Notification Polling
        shell: |
               LOCK_REQUESTED_START=$(date +%s); export LOCK_REQUESTED_START
               /usr/bin/flock --timeout {{ oem_notification_sleep }} {{ oem_notification_lock_file }} -c "eval \"echo \$(( ( {{ oem_notification_sleep }} - ( \$(date +%s) - LOCK_REQUESTED_START ) ) > 0 ? ( {{ oem_notification_sleep }} - ( \$(date +%s) - LOCK_REQUESTED_START ) ) : 0 )) | xargs sleep\""    
        async: "{{ oem_notification_sleep }}"
        poll: 0
        register: lock_notification_polling
        delegate_to: "{{ groups['oem_primarydb'][0] }}"
        become: true
        become_user: oracle

      - name: Rotate OEM Passwords
        include_tasks: rotate_oem_passwords.yml

      # If we are rotating the OEM passwords then we should also rotate the Agent Registration Passwords
      - name: Rotate Agent Registration Password
        include_tasks: rotate_agent_registration_password.yml

- name: Ensure OEM Target Passwords are in Sync with SSM
  include_tasks: sync_monitoring_passwords.yml
  when: sync_monitoring_passwords | default(false) | bool