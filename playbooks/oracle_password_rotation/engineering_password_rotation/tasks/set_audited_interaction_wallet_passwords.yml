- name: Setup Facts
  set_fact:
     aws_account_id: "{{ aws_account_ids['hmpps-' + target_environment_name] }}"
     engineering_environment: "{{ environment_name.split('-')[1] }}"
     application: "{{ ( 'delius-core' if (target_environment_name == 'delius-core-dev') else 'delius' ) + '/' + 'delius-database' }}"
     audit_wallet_dir: "/home/oracle/admin/delius_audited_interaction/oracle/audit_wallet"

- community.aws.sts_assume_role:
    role_arn: "arn:aws:iam::{{ eng_dev_id if environment_name == 'engineering-dev' else eng_prod_id }}:role/terraform"
    role_session_name: "Audit-Wallet-Password-Sync-for-{{ environment_name }}"
  register: assumed_engineering_role
  changed_when: false

- community.aws.sts_assume_role:
    role_arn: "arn:aws:iam::{{ aws_account_id }}:role/terraform"
    role_session_name: "Audit-Wallet-Password-Sync-for-{{ target_environment_name }}"
    aws_access_key: "{{ assumed_engineering_role.sts_creds.access_key }}"
    aws_secret_key: "{{ assumed_engineering_role.sts_creds.secret_key }}"
    security_token: "{{ assumed_engineering_role.sts_creds.session_token }}"
  register: assumed_role
  ignore_errors: true

- name: Get Relevant Bastion for Database Instances in this Environment
  shell: aws ec2 describe-instances --query "Reservations[].Instances[].Tags[?Key=='bastion_inventory']" --filters "Name=tag:Database,Values=*-db-?" --output text | sort | uniq -c | sort -n -k1 | tail -1 | awk '{print $3}'
  environment:
     AWS_ACCESS_KEY_ID: "{{ assumed_role.sts_creds.access_key }}"
     AWS_SECRET_ACCESS_KEY: "{{ assumed_role.sts_creds.secret_key }}"
     AWS_SESSION_TOKEN: "{{ assumed_role.sts_creds.session_token }}"
  register: bastion_inventory
  changed_when: false

- name: Get Delius Audit Pool Password for the Target Environment
  set_fact:
      delius_audit_pool_password: "{{ lookup('aws_ssm', '/{{ target_environment_name }}/{{ application }}/db/delius_audit_pool_password', decrypt=true, aws_access_key=assumed_role.sts_creds.access_key, aws_secret_key=assumed_role.sts_creds.secret_key, aws_security_token=assumed_role.sts_creds.session_token ) }}"
 
- name: Get Inventory Source Location for Environments
  set_fact:
      inventory_source_path: "{{ ansible_inventory_sources | select('search','.*/hmpps-engineering-platform-terraform/env_configs/ansible/.*$') | first | regex_replace('(.*)/hmpps-engineering-platform-terraform/env_configs/ansible/.*$','\\1/hmpps-env-configs') }}"

- name: Source Delius Primary Database Configuration Files for Target Environment
  include_vars:
    file: "{{ inventory_source_path }}/{{ target_environment_name }}/ansible/group_vars/delius_primarydb.yml"
    name: "delius_primarydb_config"
  register: delius_primarydb_configs

- name: Set Attributes for the Target Environment
  set_fact:
      database_alias: "{{ delius_primarydb_configs.ansible_facts.delius_primarydb_config.database_primary_sid }}"
      audit_preservation_enabled: "{{ delius_primarydb_configs.ansible_facts.delius_primarydb_config.audited_interaction_repo is defined }}"

- name: Get Existing OEM SYSTEM Password
  set_fact:
      system_password: "{{ lookup('aws_ssm', '/{{ environment_name }}/engineering/oem-database/db/oradb_system_password', decrypt=true, aws_access_key=assumed_engineering_role.sts_creds.access_key, aws_secret_key=assumed_engineering_role.sts_creds.secret_key, aws_security_token=assumed_engineering_role.sts_creds.session_token ) }}"

- name: Update Wallet
  delegate_to: "{{ groups['oem_primarydb'][0] }}"
  become: true
  become_user: oracle
  block: 

    - name: Get Name of Audit Repository Database
      shell: |
            . ~/.bash_profile
            grep AUDITED_INTERACTION_REPO {{ audit_wallet_dir }}/../tnsnames.ora | sed -E 's/.*SERVICE_NAME=(.*)_TAF.*/\1/'
      register: get_audit_repo
      changed_when: false

    - name: Sync Audit Wallet Password for {{ target_environment_name }} Client
      shell: |
            . ~/.bash_profile
            cd {{ audit_wallet_dir }}
            echo "${WALLET_PASSWORD}" | mkstore -wrl . -modifyCredential {{ database_alias }} delius_audit_pool "${CLIENT_PASSWORD}"
      when: 
        - engineering_environment == bastion_inventory.stdout
        - ( audit_preservation_enabled or database_alias == get_audit_repo.stdout )
      environment:
         WALLET_PASSWORD: "{{ system_password }}"
         CLIENT_PASSWORD: "{{ delius_audit_pool_password }}"

    - name: Sync Audit Wallet Password for {{ target_environment_name }} Repository
      shell: |
            . ~/.bash_profile
            cd {{ audit_wallet_dir }}
            echo "${WALLET_PASSWORD}" | mkstore -wrl . -modifyCredential AUDITED_INTERACTION_REPO delius_audit_pool "${REPO_PASSWORD}"
      when: 
        - engineering_environment == bastion_inventory.stdout
        - database_alias == get_audit_repo.stdout
      environment:
         WALLET_PASSWORD: "{{ system_password }}"
         REPO_PASSWORD: "{{ delius_audit_pool_password }}"