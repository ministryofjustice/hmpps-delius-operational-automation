
- community.aws.sts_assume_role:
    role_arn: "arn:aws:iam::{{ aws_account_id }}:role/terraform"
    role_session_name: "RMAN-Password-Rotation-for-{{ aws_account_name }}"
  register: assumed_role
  ignore_errors: true

- name: Get Relevant Bastion for Database Instances in this Environment
  shell: aws ec2 describe-instances --query "Reservations[].Instances[].Tags[?Key=='bastion_inventory']" --filters "Name=tag:Database,Values=*-db-?" --output text | sort | uniq -c | sort -n -k1 | tail -1 | awk '{print $3}'
  environment:
     AWS_ACCESS_KEY_ID: "{{ assumed_role.sts_creds.access_key }}"
     AWS_SECRET_ACCESS_KEY: "{{ assumed_role.sts_creds.secret_key }}"
     AWS_SESSION_TOKEN: "{{ assumed_role.sts_creds.session_token }}"
  register: bastion_inventory
  changed_when: false

- name: Show Instance Info for {{ aws_account_name }} in AWS Account {{ aws_account_id }}
  debug:
     var=bastion_inventory.stdout

- name: Set RMAN Password Parameter in the {{ engineering_environment }} Environment
  when: engineering_environment == bastion_inventory.stdout
  block:

    # Note that there are no separate RMAN password parameters for MIS, BOE or DSD.   The Delius parameter is used for all databases.
    - name: Set Application (Delius)
      set_fact:
          application: "{{ ( 'delius-core' if (aws_account_name == 'delius-core-dev') else 'delius' ) + '/oracle-db-operation/rman' }}"
          profile: "{{ aws_account_name }}"
      when: not aws_account_name is search('engineering')

    # Note that there is no separate RMAN password parameter for OEM.  The RMAN parameter is also used for OEM.
    - name: Set Application (Engineering)
      set_fact:
          application: 'engineering/rman-database/db'
          profile: "{{ 'engineering-' + engineering_environment }}"          
      when: aws_account_name is search('engineering')

    - name: Get Existing RMAN Password
      set_fact:
         existing_password: "{{ lookup('aws_ssm', '/{{ profile }}/{{ application }}/rman_password', decrypt=true, aws_access_key=assumed_role.sts_creds.access_key, aws_secret_key=assumed_role.sts_creds.secret_key, aws_security_token=assumed_role.sts_creds.session_token ) }}"
      no_log: true

    - name: Set New RMAN Password
      community.aws.aws_ssm_parameter_store:
         name: "/{{ profile }}/{{ application }}/rman_password"
         value: "{{ rman_password }}"
         overwrite_value: changed
         string_type: "SecureString"
         aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
         aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
         security_token: "{{ assumed_role.sts_creds.session_token }}"
         region: "{{ region }}"
      when: rman_password != existing_password
