

- community.aws.sts_assume_role:
    role_arn: "arn:aws:iam::{{ eng_dev_id if environment_name == 'engineering-dev' else eng_prod_id }}:role/terraform"
    role_session_name: "OEM-Password-Sync-for-{{ environment_name }}"
  register: assumed_role
  changed_when: false

- name: Get Existing SYSMAN Password
  set_fact:
      old_password: "{{ lookup('aws_ssm', '/{{ environment_name }}/engineering/oem-database/db/oradb_sysman_password', decrypt=true, aws_access_key=assumed_role.sts_creds.access_key, aws_secret_key=assumed_role.sts_creds.secret_key, aws_security_token=assumed_role.sts_creds.session_token ) }}"

- name: Get Existing SYS Password
  set_fact:
      sys_password: "{{ lookup('aws_ssm', '/{{ environment_name }}/engineering/oem-database/db/oradb_sys_password', decrypt=true, aws_access_key=assumed_role.sts_creds.access_key, aws_secret_key=assumed_role.sts_creds.secret_key, aws_security_token=assumed_role.sts_creds.session_token ) }}"

- name: Check if the SYS Password Works
  script: ../../all_password_rotation/files/get_sys_remote_lock.sh
  register: get_sys_primary_remote_lock
  changed_when: false
  ignore_errors: true
  delegate_to: "{{ groups['oem_primarydb'][0] }}"
  become: true
  become_user: oracle
  run_once: true
  environment:
      DB_NAME: "{{ hostvars[groups['oem_primarydb'][0]]['database_primary_sid'] }}"
      SYS_PASSWORD: "{{ sys_password }}"

- name: Abort if SYS Connection Fails
  fail:
     msg: "SYS Connection Failed connecting to OMS Repository Database.   Aborting without shutting down OMS."
  when: get_sys_primary_remote_lock.rc > 0

- name: Create New Password for SYSMAN
  include: ../../all_password_rotation/tasks/create_random_password.yml

- name: Record New Password for SYSMAN in Parameter Store
  community.aws.aws_ssm_parameter_store:
      name: "/{{ environment_name }}/engineering/oem-database/db/oradb_sysman_password"
      value: "{{ new_password }}"
      overwrite_value: changed
      string_type: "SecureString"
      aws_access_key: "{{ assumed_role.sts_creds.access_key }}"   
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      security_token: "{{ assumed_role.sts_creds.session_token }}"
      region: "{{ region }}"

- name: Update EM Grid Control Passwords
  delegate_to: "{{ groups['oem_primarydb'][0] }}"
  become: true
  become_user: oracle
  block:

      - name: Check OMS Status
        shell: "{{ emctl_oem }} status oms | grep \"Oracle Management Server\" | awk '{print $NF}'"
        register: oms_status
        changed_when: false

      - name: Shutdown OMS
        shell: "{{ emctl_oem }} stop oms"
        when: not oms_status.stdout_lines[-1] == 'Down'
        vars:
          ansible_aws_ssm_timeout: 900

      - name: Check BIP Status
        shell: "{{ emctl_oem }} status oms | grep \"BI Publisher Server\" | awk '{print $NF}'"
        register: bip_status
        changed_when: false

      # From OEM 13.5 onwards BIP is no longer a component, so treat it as already Down
      # if it is not detected.   (This code may be removed once Prod OEM is also upgraded).
      - name: Shutdown BIP
        shell: "{{ emctl_oem }} stop oms -bip_only"
        when: 
          not ( bip_status.stdout_lines[-1] | default('Down') ) == 'Down'
        vars:
          ansible_aws_ssm_timeout: 900

      # The SYS password may be used to change the SYSMAN password if the current SYSMAN password is not available.
      # Always use this approach in case previous reset of the SYSMAN password has failed.
      # (Note non-standard successful return code of 1)
      - name: Change SYSMAN Password
        shell: "{{ emctl_oem }} config oms -change_repos_pwd -use_sys_pwd -sys_pwd ${SYS_PASSWORD} -new_pwd ${NEW_PASSWORD}"
        register: change_sysman_password
        failed_when: change_sysman_password.rc > 1
        environment:
          SYS_PASSWORD: "{{ sys_password }}"
          NEW_PASSWORD: "{{ new_password }}"

      # We do not currently use the Management View user so the password can be set randomly
      - name: Change MGMT_VIEW Password
        shell: "{{ emctl_oem }} config oms -change_view_user_pwd -sysman_pwd ${SYSMAN_PASSWORD} -auto_generate"
        environment:
          SYSMAN_PASSWORD: "{{ new_password }}"

      - name: Check Admin Server Status
        shell: "{{ emctl_oem }} status oms | grep \"WebTier\" | awk '{print $NF}'"
        register: webtier_status
        changed_when: false

      - name: Shutdown Admin Server
        shell: "{{ emctl_oem }} stop oms -all"
        when: not webtier_status.stdout_lines[-1] == 'Down'
        vars:
          ansible_aws_ssm_timeout: 900  

      - name: Check OMS Status
        shell: "{{ emctl_oem }} status oms | grep \"Oracle Management Server\" | awk '{print $NF}'"
        register: oms_status
        changed_when: false

      - name: Start OMS
        shell: "{{ emctl_oem }} start oms"
        when: not oms_status.stdout_lines[-1] == 'Up'
        vars:
          ansible_aws_ssm_timeout: 900

# - name: Create New Password for Nodemanager
#   include: ../../all_password_rotation/tasks/create_random_password.yml

# - name: Record New Password for Nodemanager in Parameter Store
#   community.aws.aws_ssm_parameter_store:
#       name: "/{{ environment_name }}/engineering/oem-database/db/nodemanager_password"
#       value: "{{ new_password }}"
#       overwrite_value: changed
#       string_type: "SecureString"
#       aws_access_key: "{{ assumed_role.sts_creds.access_key }}"   
#       aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
#       security_token: "{{ assumed_role.sts_creds.session_token }}"
#       region: "{{ region }}"

# - name: Set Nodemanager Password
#   shell: |
#          {{ emcli }} sync 1>/dev/null 2>&1 || ( {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force && {{ emcli }} sync ) 1>/dev/null 2>&1
#          {{ emcli }}  modify_target -name="/EMGC_GCDomain/GCDomain" -type="weblogic_domain" -credentials="NMUserName:nodemanager;NMPassword:${NODEMANAGER_PASSWORD};" -on_agent
#   delegate_to: "{{ groups['oem_primarydb'][0] }}"
#   become: true
#   become_user: oracle
#   environment:
#     SYSMAN_PASSWORD: "{{ lookup('aws_ssm', '/{{ environment_name }}/engineering/oem-database/db/oradb_sysman_password', decrypt=true, aws_access_key=assumed_role.sts_creds.access_key, aws_secret_key=assumed_role.sts_creds.secret_key, aws_security_token=assumed_role.sts_creds.session_token ) }}"
#     NODEMANAGER_PASSWORD: "{{ new_password }}"
