
- community.aws.sts_assume_role:
    role_arn: "arn:aws:iam::{{ aws_account_id }}:role/terraform"
    role_session_name: "OEM-Password-Sync-for-{{ target_environment_name }}"
    aws_access_key: "{{ assumed_engineering_role.sts_creds.access_key }}"
    aws_secret_key: "{{ assumed_engineering_role.sts_creds.secret_key }}"
    security_token: "{{ assumed_engineering_role.sts_creds.session_token }}"
  register: assumed_role
  ignore_errors: true

- name: Get Relevant Bastion for Database Instances in this Environment
  shell: aws ec2 describe-instances --query "Reservations[].Instances[].Tags[?Key=='bastion_inventory']" --filters "Name=tag:Database,Values=*-db-?" --output text | sort | uniq -c | sort -n -k1 | tail -1 | awk '{print $3}'
  environment:
     AWS_ACCESS_KEY_ID: "{{ assumed_role.sts_creds.access_key }}"
     AWS_SECRET_ACCESS_KEY: "{{ assumed_role.sts_creds.secret_key }}"
     AWS_SESSION_TOKEN: "{{ assumed_role.sts_creds.session_token }}"
  register: bastion_inventory
  changed_when: false

- name: Show Instance Info for {{ target_environment_name }} in AWS Account {{ aws_account_id }}
  debug:
     var=bastion_inventory.stdout

- name: Sync SYS Password Parameter in the {{ target_environment_name }} in AWS Account {{ aws_account_id }}
  when: engineering_environment == bastion_inventory.stdout
  delegate_to: "{{ groups['oem_primarydb'][0] }}"
  become: true
  become_user: oracle
  block:

    - name: Set Application (Delius)
      set_fact:
          application: "{{ ( 'delius-core' if (target_environment_name == 'delius-core-dev') else 'delius' ) }}"
          profile: "{{ target_environment_name }}"
      when: not target_environment_name is search('engineering')

    - name: Set Application (Engineering)
      set_fact:
          application: 'engineering' 
          profile: "{{ 'engineering-' + engineering_environment }}"          
      when: target_environment_name is search('engineering')

    # Generic Case for All Accounts Other than Production and Engineering
    - name: Set Host Match Based on Environment Name
      set_fact:
         host_match: "{{ target_environment_name | regex_replace('^delius-','.') | regex_replace('^[.]core-','.') }}.{{ application }}.probation.hmpps.dsd.io"
      when: 
         - target_environment_name != 'delius-prod'
         - not target_environment_name is search('engineering')

    # Special Case #1 for Production environments
    - name: Set Host Match for Production
      set_fact:
         host_match: "probation.service.justice.gov.uk"
      when: target_environment_name == 'delius-prod'

    # Special Case #2 for Engineering environments
    - name: Set Host Match for Engineering
      set_fact:
         host_match: "{{ environment_name }}.probation.hmpps.dsd.io"
      when: target_environment_name is search('engineering')

    # SYS is Used for Standby Database Monitoring
    - name: Get All Physical Standby Databases in this Environment
      shell: |
             . ~/.bash_profile
             {{ emcli }} sync 1>/dev/null 2>&1 || ( {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force && {{ emcli }} sync ) 1>/dev/null 2>&1
             {{ emcli }} get_targets -script -targets="%{{ host_match }}%:host;" -noheader | awk '{print $NF}' | xargs -i {{ emcli }} list -resource="Targets" -search="HOST_NAME='{}'" -search="TARGET_TYPE='oracle_database'" -search="TYPE_QUALIFIER4='Physical Standby'" -script -columns="TARGET_NAME,HOST_NAME" -noheader | sed 's/^\([a-zA-Z0-9_\.-]*\)[[:space:]]*\([a-zA-Z0-9_\.]*\)-.*$/\1 \2/'
             {{ emcli }} get_targets -script -targets="%{{ host_match }}%:host;" -noheader | awk '{print $NF}' | xargs -i {{ emcli }} list -resource="Targets" -search="HOST_NAME='{}'" -search="TARGET_TYPE='oracle_database'" -search="TYPE_QUALIFIER4='Snapshot Standby'" -script -columns="TARGET_NAME,HOST_NAME" -noheader | sed 's/^\([a-zA-Z0-9_\.-]*\)[[:space:]]*\([a-zA-Z0-9_\.]*\)-.*$/\1 \2/'
      register: physical_standby
      environment:
          SYSMAN_PASSWORD: "{{ sysman_password }}"
      changed_when: false

    - name: Set the Monitoring Credentials for Physical Standby Databases
      shell: |
             . ~/.bash_profile
             {{ emcli }} sync 1>/dev/null 2>&1 || ( {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force && {{ emcli }} sync ) 1>/dev/null 2>&1
             {{ emcli }} modify_target -name="{{ db_name.split()[0] }}" -type="oracle_database" -credentials="UserName:sys;password:${SYS_PASSWORD};Role:SYSDBA" -on_agent
      loop: "{{ physical_standby.stdout_lines }}"
      loop_control:
         loop_var: db_name
      environment:
           SYSMAN_PASSWORD: "{{ sysman_password }}"
           SYS_PASSWORD: >-
                         {{ lookup('aws_ssm',"/{{ profile }}/{{ application }}/{{ db_name.split()[1] }}-database/db/oradb_sys_password", decrypt=true, aws_access_key=assumed_role.sts_creds.access_key, aws_secret_key=assumed_role.sts_creds.secret_key, aws_security_token=assumed_role.sts_creds.session_token ) }}

    # DBSNMP is Used for Primary Database Monitoring
    # In OEM, in a Data Guard Configuration the database type (TYPE_QUALIFIER4) is "Primary".   In a non-Data Guard Configuration TYPE_QUALIFIER4 is set to a single space character.  Handle both cases.
    # (This cannot be done within SEARCH as multiple conditions will be AND'ed together rather than OR'ed.  Therefore call the same function with both possibilities)
    - name: Get All Primary Databases in this Environment
      shell: |
             . ~/.bash_profile
             {{ emcli }} sync 1>/dev/null 2>&1 || ( {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force && {{ emcli }} sync ) 1>/dev/null 2>&1
             {{ emcli }} get_targets -script -targets="%{{ host_match }}%:host;" -noheader | awk '{print $NF}' | xargs -i {{ emcli }} list -resource="Targets" -search="HOST_NAME='{}'" -search="TARGET_TYPE='oracle_database'" -search="TYPE_QUALIFIER4='Primary'" -script -columns="TARGET_NAME,HOST_NAME" -noheader | sed 's/^\([a-zA-Z0-9_\.-]*\)[[:space:]]*\([a-zA-Z0-9_\.]*\)-.*$/\1 \2/'
             {{ emcli }} get_targets -script -targets="%{{ host_match }}%:host;" -noheader | awk '{print $NF}' | xargs -i {{ emcli }} list -resource="Targets" -search="HOST_NAME='{}'" -search="TARGET_TYPE='oracle_database'" -search="TYPE_QUALIFIER4=' '" -script -columns="TARGET_NAME,HOST_NAME" -noheader | sed 's/^\([a-zA-Z0-9_\.-]*\)[[:space:]]*\([a-zA-Z0-9_\.]*\)-.*$/\1 \2/'
      register: primary
      environment:
          SYSMAN_PASSWORD: "{{ sysman_password }}"
      changed_when: false

    - name: Set the Monitoring Credentials for Primary Databases
      shell: |
             . ~/.bash_profile
             {{ emcli }} sync 1>/dev/null 2>&1 || ( {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force && {{ emcli }} sync ) 1>/dev/null 2>&1
             {{ emcli }} modify_target -name="{{ db_name.split()[0] }}" -type="oracle_database" -credentials="UserName:dbsnmp;password:${DBSNMP_PASSWORD};Role:Normal" -on_agent
      loop: "{{ primary.stdout_lines }}"
      loop_control:
         loop_var: db_name
      environment:
           SYSMAN_PASSWORD: "{{ sysman_password }}"
           DBSNMP_PASSWORD: >-
                         {{ lookup('aws_ssm',"/{{ profile }}/{{ application }}/{{ db_name.split()[1] }}-database/db/oradb_dbsnmp_password", decrypt=true, aws_access_key=assumed_role.sts_creds.access_key, aws_secret_key=assumed_role.sts_creds.secret_key, aws_security_token=assumed_role.sts_creds.session_token ) }}

    # ASMSNMP is Used for ASM Instance Monitoring
    - name: Get All ASM Instances in this Environment
      shell: |
             . ~/.bash_profile
             {{ emcli }} sync 1>/dev/null 2>&1 || ( {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force && {{ emcli }} sync ) 1>/dev/null 2>&1
             {{ emcli }} get_targets -script -targets="%{{ host_match }}%:host;" -noheader | awk '{print $NF}' | xargs -i {{ emcli }} list -resource="Targets" -search="HOST_NAME='{}'" -search="TARGET_TYPE='osm_instance'" -script -columns="TARGET_NAME" -noheader | awk -F[_-] '{printf("%s %s\n",$0,$2)}'
      register: osm_instance
      environment:
          SYSMAN_PASSWORD: "{{ sysman_password }}"
      changed_when: false

    - name: Set the Monitoring Credentials for ASM
      shell: |
             . ~/.bash_profile
             {{ emcli }} sync 1>/dev/null 2>&1 || ( {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force && {{ emcli }} sync ) 1>/dev/null 2>&1
             {{ emcli }} modify_target -name="{{ asm_name.split()[0] }}" -type="osm_instance" -credentials="UserName:asmsnmp;password:${ASMSNMP_PASSWORD};Role:SYSASM" -on_agent
      loop: "{{ osm_instance.stdout_lines }}"
      register: set_asm_pwd
      loop_control:
         loop_var: asm_name
      retries: 3
      until: set_asm_pwd is not failed
      delay: 60
      environment:
           SYSMAN_PASSWORD: "{{ sysman_password }}"
           ASMSNMP_PASSWORD: >-
                         {{ lookup('aws_ssm',"/{{ profile }}/{{ application }}/{{ asm_name.split()[1] }}-database/db/oradb_asmsnmp_password", decrypt=true, aws_access_key=assumed_role.sts_creds.access_key, aws_secret_key=assumed_role.sts_creds.secret_key, aws_security_token=assumed_role.sts_creds.session_token ) }}

