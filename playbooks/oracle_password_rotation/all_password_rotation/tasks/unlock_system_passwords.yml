
- name: Unlock {{ db_username }} Account
  when: db_username != 'sys'
  block:

      - name: Check if {{ db_username }} Account Locked Due to Bad Password Attempts After Change
        script: get_locked_due_to_password.sh
        register: get_locked_due_to_password
        changed_when: false
        environment:
            DB_USERNAME: "{{ db_username }}" 
            DB_NAME: "{{ db_name }}"
            LOGIN_USER: "{{ login_user }}"
            LOGIN_PWD: "{{ login_pwd }}"
        vars:
           ansible_aws_ssm_timeout: 60

      - name: Unlock {{ db_username }} in Database
        script: unlock_db_password.sh
        when: get_locked_due_to_password.stdout_lines[-1] == 'YES'
        environment:
            DB_USERNAME: "{{ db_username }}"
            DB_NAME: "{{ db_name }}"
            LOGIN_USER: "{{ login_user }}"
            LOGIN_PWD: "{{ login_pwd }}"

# The SYS Account must be handled separately as it *always* shows as OPEN in DBA_USERS
# and local authentication will always work.   Therefore we need to test remote connectivity exclusively
- name: Check if SYS Account Locked Due to Bad Password Attempts After Change
  when: db_username == 'sys'
  block:

      # We need to check the standby databases as well as the primary as it is possible for the SYS account
      # on the standby to become locked independently of the primary database
      - name: Check if SYS Account Locked on Primary Due to Bad Password Attempts After Change
        script: get_sys_remote_lock.sh
        register: get_sys_primary_remote_lock
        changed_when: false
        environment:
            DB_NAME: "{{ hostvars[groups[database_environment + '_primarydb'][0]]['database_primary_sid'] }}"
            SYS_PASSWORD: "{{ lookup('aws_ssm', '/{{ environment_name }}/{{ application }}/db/oradb_sys_password', region=region ) }}"

      - name: Unlock SYS in Primary Database
        script: unlock_db_password.sh
        when: get_sys_primary_remote_lock.stdout is search('.*ORA-28000.*')
        environment:
            DB_USERNAME: "sys"
            DB_NAME: "{{ db_name }}"
            LOGIN_USER: ""
            LOGIN_PWD: ""

      # Even once we have unlocked the SYS account on the primary it is possible that the account remains locked on the standby
      - name: Check if SYS Account is Remaining Locked on Any Database Due to Bad Password Attempts After Change
        script: get_sys_remote_lock.sh
        register: get_sys_remote_lock
        changed_when: false
        environment:
            DB_NAME: "{{ database_sid }}"
            SYS_PASSWORD: "{{ lookup('aws_ssm', '/{{ environment_name }}/{{ application }}/db/oradb_sys_password', aws_access_key=assumed_role.sts_creds.access_key, aws_secret_key=assumed_role.sts_creds.secret_key, aws_security_token=assumed_role.sts_creds.session_token, region=region ) }}"
        loop:
            - "{{ hostvars[groups[db_type + '_primarydb'][0]]['database_primary_sid'] }}"
            - "{{ hostvars[groups[db_type + '_standbydb1'][0]]['database_standby_sid'] if (groups[db_type + '_standbydb1'] is defined) else 'NONE' }}"
            - "{{ hostvars[groups[db_type + '_standbydb2'][0]]['database_standby_sid'] if (groups[db_type + '_standbydb2'] is defined) else 'NONE' }}"
        loop_control:
            loop_var: database_sid

      # Must Use Local Authentication for SYS if it is Locked (ORA-28000 error) - force unlock of SYS account
      - name: Unlock SYS in Database and Force Timed Unlock
        script: unlock_sys_password.sh
        when: get_sys_remote_lock.results | map(attribute='stdout') | list | select('search','.*ORA-28000.*') | list | count > 0
        vars:
          ansible_aws_ssm_timeout: 200 