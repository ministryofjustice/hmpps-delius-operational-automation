- name: Unlock {{ db_username }} Account
  when: db_username != 'sys'
  block:
    - name: Check if {{ db_username }} Account Locked Due to Bad Password Attempts After Change
      script: get_locked_due_to_password.sh
      register: get_locked_due_to_password
      changed_when: false
      vars:
        ansible_aws_ssm_timeout: 60

    - name: Unlock {{ db_username }} in Database
      script: unlock_db_password.sh
      when: get_locked_due_to_password.stdout_lines[-1] == 'YES'
  environment:
    OEM_DB_NAME: "{{ oem_db_name | default() }}"
    DB_USERNAME: "{{ db_username }}"

# The SYS Account must be handled separately as it *always* shows as OPEN in DBA_USERS
# and local authentication will always work.   Therefore we need to test remote connectivity exclusively
- name: Check if SYS Account Locked Due to Bad Password Attempts After Change
  when: db_username == 'sys'
  block:
    # We need to check the standby databases as well as the primary as it is possible for the SYS account
    # on the standby to become locked independently of the primary database
    - name: Check if SYS Account Locked on Primary Due to Bad Password Attempts After Change
      script: get_sys_remote_lock.sh
      register: get_sys_primary_remote_lock
      changed_when: false
      environment:
        DB_NAME: "{{ hostvars[groups[database_environment + '_primarydb'][0]]['database_primary_sid'] if (oem_db_name is not defined) else oem_db_name  }}"
        DB_TYPE: "{{ 'OEM' if (oem_db_name is defined) else '' }}"
        SECRET_NAME: "{{ secret_name }}"

    - name: Unlock SYS in Primary Database
      script: unlock_db_password.sh
      when: get_sys_primary_remote_lock.stdout is search('.*ORA-28000.*')
      environment:
        DB_USERNAME: "sys"
        OEM_DB_NAME: "{{ oem_db_name | default() }}"

    # Even once we have unlocked the SYS account on the primary it is possible that the account remains locked on the standby
    - name: Check if SYS Account is Remaining Locked on Any Database Due to Bad Password Attempts After Change
      script: get_sys_remote_lock.sh
      register: get_sys_remote_lock
      changed_when: false
      environment:
        DB_NAME: "{{ database_sid }}"
        SECRET_NAME: "{{ secret_name }}"
      loop:
        - "{{ hostvars[groups[database_environment + '_primarydb'][0]]['database_primary_sid'] }}"
        - "{{ hostvars[groups[database_environment + '_standbydb1'][0]]['database_standby_sid'] if (groups[database_environment + '_standbydb1'] is defined) else 'NONE' }}"
        - "{{ hostvars[groups[database_environment + '_standbydb2'][0]]['database_standby_sid'] if (groups[database_environment + '_standbydb2'] is defined) else 'NONE' }}"
      loop_control:
        loop_var: database_sid
      when: oem_db_name is not defined

    # Must Use Local Authentication for SYS if it is Locked (ORA-28000 error) - force unlock of SYS account
    - name: Unlock SYS in Database and Force Timed Unlock
      script: unlock_sys_password.sh
      when:
        - oem_db_name is not defined
        - get_sys_remote_lock.results | map(attribute='stdout') | list | select('search','.*ORA-28000.*') | list | count > 0
      vars:
        ansible_aws_ssm_timeout: 200
