- name: Clean Up Broken or Missing Data Guard Wallets
  when: unlock_system_passwords is not defined
  block:
    - name: Set up oracle database home
      shell: |
        . ~/.bash_profile
        echo $ORACLE_HOME
      register: get_oracle_home
      changed_when: false
      vars:
        ansible_aws_ssm_timeout: 60

    - name: Detect Missing Data Guard Wallet
      shell: |
        . ~/.bash_profile
        dgmgrl  -silent / "exit"
      register: detect_missing_wallet
      ignore_errors: true
      changed_when: false

    # If there is a problem with the Data Guard wallet we will need to create it, but first
    # need to ensure that the existing SQL Net configuration is no longer trying
    # to use it, otherwise we will be unable to use OS Authentication to connect to the DB
    - name: Remove Pre-existing Data Guard Wallet Configuration
      blockinfile:
        state: absent
        path: "{{ get_oracle_home.stdout }}/network/admin/sqlnet.ora"
        marker: "# {mark} ANSIBLE MANAGED BLOCK ADD DATA GUARD WALLET"
      when: detect_missing_wallet.stdout is search('.*ORA-12578.*')

# Allow up to 2 hours for the password rotation to complete.  We can re-enable the monitoring before
# that once the job completes, but this provides a hard-stop to ensure monitoring resumes even if the
# job has failed or is not progressing at a reasonable speed.

# Disable OEM Native Monitoring to avoid noise due to agent / broker connection failures during password changes
- name: Disable Monitoring
  when: unlock_system_passwords is not defined
  block:
    - name: Start database monitoring blackout
      include_role:
        name: ../oem_blackout/oem-blackout
      vars:
        target: "{{ inventory_hostname }}"
        action: "start"
        object_type: "all"
        blackout: "PASSWORD_ROTATION_{{ environment_name }}"
        duration: ""
        allow_jobs: false

    # Disable OEM Script-Based Monitoring to avoid noise due to agent / broker connection failures during password changes
    - name: Temporarily Exclude Target Hosts from Monitoring During Password Changes
      include_role:
        name: ../oem_blackout/oem-blackout
        tasks_from: script_exclusion.yml
      vars:
        action: "start"
        blackout: "PASSWORD_ROTATION_{{ environment_name }}"
        duration: 7200

- name: Get Primary Database Type And Environment
  set_fact:
    database_type: "{{ group_names | select('match','.*_primarydb') | list | first | regex_replace('^.*_(.*)_primarydb', '\\1') }}"
    database_environment: "{{ group_names | select('match','.*_primarydb') | list | first | regex_replace('^(.*)_primarydb', '\\1') }}"
  when: database_primary_sid is defined

- name: Get Standby Database Type And Environment
  set_fact:
    database_type: "{{ group_names | select('match','.*_standbydb\\d+') | list | first | regex_replace('^.*_(.*)_standbydb\\d+', '\\1') }}"
    database_environment: "{{ group_names | select('match','.*_standbydb\\d+') | list | first | regex_replace('^(.*)_standbydb\\d+', '\\1') }}"
  when: database_standby_sid is defined

- name: Set Application (Delius)
  set_fact:
    application: "{{ database_type + '-database' }}"

- name: Build DBA Secret Name From EC2 Tags
  shell: |
    export PATH=$PATH:/usr/local/bin
    INSTANCEID=$(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id)
    APPLICATION=$(aws ec2 describe-tags --filters "Name=resource-id,Values=${INSTANCEID}" "Name=key,Values=application"  --query "Tags[].Value" --output text)
    [ "${APPLICATION}" == "delius" ] && echo {{ environment_name }}-oracle-db-dba-passwords || echo {{ environment_name }}-oracle-{{ database_type }}-db-dba-passwords
  register: build_secret_name
  when: database_primary_sid is defined

- name: Set Secret Manager Name
  set_fact:
    secret_name: "{{ build_secret_name.stdout }}"

#  The rest of this play is in a block so we can re-enable monitoring even if it fails
- name: Rotate Passwords
  when: unlock_system_passwords is not defined
  block:
    # Do not specify database login credentials as will login as SYS on primary
    - name: Set Profile for DBSNMP on Primary
      include_tasks: set_dbsnmp_profile.yml
      when:
        - database_primary_sid is defined

    # We require a special profile for SYS which prevents it getting locked out if an invalid password
    # is used as we must always be able to connect to the SYS account.
    # This profile allows for a high number of failures before locking - this provides time for the DBA
    # to become aware of the situation before the account gets locked out.
    - name: Set Profile for SYS on Primary
      include_tasks: set_sys_profile.yml
      when:
        - database_primary_sid is defined

    # Database passwords only need to be set on the primary
    # (Do not attempt to change password for engineering hosts unless we are an engineering environment)
    - name: Show Groups
      debug: var=group_names

    # Prevent Failover due to problems with password changes by disabling FSFO during password rotation
    - name: Disable Fast Start Failover
      include_role:
        name: ../oracle_ha/build_ha
        tasks_from: set-fsfo-mode.yml
      when:
        - database_primary_sid is defined
        - hostvars[groups[database_environment + '_primarydb'][0]]['fsfo_mode'] | default('disabled') != 'disabled'
      vars:
        fsfo_mode: disabled
        standby1: "{{ database_environment + '_standbydb1' if (database_environment + '_standbydb1' in groups) else '' }}"
        standby2: "{{ database_environment + '_standbydb2' if (database_environment + '_standbydb2' in groups) else '' }}"

    # Handle SYS on its own first to minimize the amount of time FSFO needs to be disabled
    - name: Set Password for SYS
      include_tasks: rotate_system_passwords.yml
      vars:
        db_type: "{{ database_type }}"
        db_username: "{{ username }}"
      loop: ["sys"]
      loop_control:
        loop_var: username
      when:
        - database_primary_sid is defined

    # Now the passwords have been set in the wallet we can re-enable FSFO.
    - name: Re-enable Fast Start Failover
      include_role:
        name: ../oracle_ha/build_ha
        tasks_from: set-fsfo-mode.yml
      when:
        - database_primary_sid is defined
        - hostvars[groups[database_environment + '_primarydb'][0]]['fsfo_mode'] | default('disabled') != 'disabled'
      vars:
        fsfo_mode: "{{ hostvars[groups[database_environment + '_primarydb'][0]]['fsfo_mode'] }}"
        standby1: "{{ database_environment + '_standbydb1' if (database_environment + '_standbydb1' in groups) else '' }}"
        standby2: "{{ database_environment + '_standbydb2' if (database_environment + '_standbydb2' in groups) else '' }}"

    # We are changing the SYSTEM password so keep a note of the old value as this will be required later
    # for rotating the password in the Alfresco or Audit wallets.

    - block:
        - name: Get Existing SYSTEM Password
          shell: |
            export PATH=$PATH:/usr/local/bin
            echo $(aws secretsmanager get-secret-value --secret-id {{ secret_name }} --region eu-west-2  --query SecretString --output text | jq -r .system)
          register: getsystemsecret

        - name: Remember Existing SYSTEM Password
          set_fact:
            original_system_password: "{{ getsystemsecret.stdout }}"

      when:
        - database_type == 'delius'

    - name: Set Password for SYSTEM
      include_tasks: rotate_system_passwords.yml
      vars:
        db_type: "{{ database_type }}"
        db_username: "system"
      when:
        - database_primary_sid is defined

    # New Password will be overwritten by change of DELIUS_APP_SCRIPTS password, so record it in a variable
    - name: Remember New Delius SYSTEM Password
      set_fact:
        new_system_password: "{{ new_password }}"
      when:
        - database_primary_sid is defined

    # Change DELIUS_APP_SCRIPTS password for Delius
    - name: Set Password for DELIUS_APP_SCRIPTS
      include_tasks: rotate_application_passwords.yml
      vars:
        db_type: "{{ database_type }}"
        db_username: "delius_app_scripts"
      when:
        - database_primary_sid is defined
        - database_type == 'delius'

    # Update Alfresco Wallet Password for Delius databases (it uses the Delius database SYSTEM password)
    - name: Update Alfresco Wallet Password
      when: database_type | default('not_delius') == 'delius'
      block:
        - name: Get the Alfresco Wallet Location
          shell: |
            . ~/.bash_profile
            echo "$ORACLE_BASE/wallets/alfresco_wallet"
          register: get_wallet_location
          changed_when: false

        - name: Set the Alfresco Wallet Location
          set_fact:
            wallet_dir: "{{ get_wallet_location.stdout }}"

        - name: Check if Alfresco Wallet Exists
          stat:
            path: "{{ wallet_dir }}"
          register: alfresco_wallet

        - name: Update Alfresco Wallet Password
          include_tasks: rotate_wallet_password.yml
          when: alfresco_wallet.stat.exists
          vars:
            before_password: "{{ original_system_password }}"
            after_password: "{{ new_system_password }}"
            path_to_wallet: "{{ wallet_dir }}"
            recreate_wallet_code_location: "{{ playbook_dir }}/../alfresco_wallet/alfresco_wallet"

    - name: Set Passwords for DBSNMP
      include_tasks: rotate_system_passwords.yml
      vars:
        db_type: "{{ database_type }}"
        db_username: "dbsnmp"
      when:
        - database_primary_sid is defined

    # The same ASMSNMP password is used on primary and standby instances, so we initially create the new
    # password on primary only and then apply to all instances.
    # (Do not attempt to change password for engineering hosts unless we are an engineering environment)
    - name: Generate ASMSNMP Passwords
      include_tasks: generate_asm_password.yml
      vars:
        db_type: "{{ database_type }}"
      when:
        - database_primary_sid is defined

    - name: Rotate ASMSNMP Passwords
      include_tasks: rotate_asm_passwords.yml
      vars:
        db_type: "{{ database_type }}"

    - name: Rotate Oracle Password
      include_tasks: rotate_oracle_password.yml

  # Restart Monitoring regardless of success of password rotation
  always:
    - name: Re-Enable Monitoring
      block:
        # Re-Enable OEM Native Monitoring
        - name: Stop database monitoring blackout
          include_role:
            name: ../oem_blackout/oem-blackout
          vars:
            target: "{{ inventory_hostname }}"
            action: "stop"
            object_type: "all"
            blackout: "PASSWORD_ROTATION_{{ environment_name }}"

        # Re-Enable OEM Script-Based Monitoring
        # We supply the script path here to allow the script_exclusion.yml file
        # to find another script which it calls within the same directory.
        # Ideally this would be done using roles instead of supplying a script path,
        # but that would require significant changes to existing code.
        - name: Un-Exclude Target Hosts from Monitoring During Password Changes
          include_role:
            name: ../oem_blackout/oem-blackout
            tasks_from: script_exclusion.yml
          vars:
            action: "stop"
            blackout: "PASSWORD_ROTATION_{{ environment_name }}"

# Unlock database accounts in case they have become locked whilst waiting for OEM target password updates.
# (This should not happen due to Gradual Database Password Rollover but it can happen if the passwords
#  are changed more than once per hour since any interim passwords cannot be used).
# We only unlock passwords which have recently become locked.
- name: Unlock Accounts for SYS, SYSTEM, DBSNMP
  include_tasks: unlock_system_passwords.yml
  vars:
    db_username: "{{ username }}"
    db_type: "{{ database_type }}"
  loop: ["sys", "system", "dbsnmp"]
  loop_control:
    loop_var: username
  when:
    - database_primary_sid is defined
    - unlock_system_passwords is defined
