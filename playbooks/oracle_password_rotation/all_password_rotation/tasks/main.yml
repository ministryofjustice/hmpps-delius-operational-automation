- name: Clean Up Broken or Missing Data Guard Wallets
  #when: not inventory_hostname is search('.engineering-') or environment_name is search('engineering')
  block:

      - name: Set up oracle database home
        shell: |
                . ~/.bash_profile
                echo $ORACLE_HOME
        register: get_oracle_home
        changed_when: false
        vars:
           ansible_aws_ssm_timeout: 60

      - name: Detect Missing Data Guard Wallet
        shell: |
              . ~/.bash_profile
              dgmgrl  -silent / "exit"
        register: detect_missing_wallet
        ignore_errors: true
        changed_when: false

      # If there is a problem with the Data Guard wallet we will need to create it, but first 
      # need to ensure that the existing SQL Net configuration is no longer trying
      # to use it, otherwise we will be unable to use OS Authentication to connect to the DB 
      - name: Remove Pre-existing Data Guard Wallet Configuration
        blockinfile:
          state: absent
          path: '{{ get_oracle_home.stdout }}/network/admin/sqlnet.ora'  
          marker: "# {mark} ANSIBLE MANAGED BLOCK ADD DATA GUARD WALLET"
        when: detect_missing_wallet.stdout is search('.*ORA-12578.*')

# - name: Process HCL File to Get Account IDs
#   include_tasks: read_hcl.yml
#   run_once: true

# - name: Setup AWS Role to Use with Appropriate SSM and RDS Privileges
#   include_tasks: ../ansible_controller/prepare_ansible_controller.yml
#   run_once: true
#   become: no

# Create symlink so that we may use the oem-blackout directory as a role
# - name: Link to OEM-Blackout in current repo as a role
#   file:
#      dest: ~/.ansible/roles/oem-blackout
#      src: "{{ playbook_dir }}/../oem-blackout"
#      state: link
#   run_once: true
#   delegate_to: localhost
#   become: no

# Allow up to 2 hours for the password rotation to complete.  We can re-enable the monitoring before
# that once the job completes, but this provides a hard-stop to ensure monitoring resumes even if the
# job has failed or is not progressing at a reasonable speed.

# Disable OEM Native Monitoring to avoid noise due to agent / broker connection failures during password changes
# - name: Disable Monitoring
  #when: not inventory_hostname is search('.engineering-') or environment_name is search('engineering')
  # block: 

  #     - name: Start database monitoring blackout
  #       include_role:
  #          name: oem-blackout
  #          tasks_from: ../oem_blackout.yml 
  #       vars:
  #           target: "{{ inventory_hostname }}"  
  #           action: "start" 
  #           object_type: "all" 
  #           blackout: "PASSWORD_ROTATION_{{ environment_name }}" 
  #           duration: "" 
  #           allow_jobs: false

  #     # Disable OEM Script-Based Monitoring to avoid noise due to agent / broker connection failures during password changes
  #     - name: Temporarily Exclude Target Hosts from Monitoring During Password Changes
  #       include_role: 
  #          name: oem-blackout
  #          tasks_from: script_exclusion.yml 
  #       vars:
  #           action: "start"
  #           blackout: "PASSWORD_ROTATION_{{ environment_name }}" 
  #           engineering_role: "{{ assumed_engineering_role }}"
  #           engineering_env: "{{ bastion_inventory.stdout }}"
  #           duration: 7200

- name: Get Primary Database Type And Environment
  set_fact:
    database_type: "{{ group_names | select('match','.*_primarydb') | list | first | regex_replace('^.*_(.*)_primarydb', '\\1') }}"
    database_environment: "{{ group_names | select('match','.*_primarydb') | list | first | regex_replace('^(.*)_primarydb', '\\1') }}"
  when: database_primary_sid is defined

- name: Get Standby Database Type And Environment
  set_fact:
    database_type: "{{ group_names | select('match','.*_standbydb\\d+') | list | first | regex_replace('^(.*)_standbydb\\d+', '\\1') }}"
    database_environment: "{{ group_names | select('match','.*_primarydb') | list | first | regex_replace('^(.*)_standbydb\\d+', '\\1') }}"
  when: database_standby_sid is defined

- name: Set Application (Delius)
  set_fact:
      application: "{{ datbase_type + '-database' }}"
  #when: not environment_name is search('engineering')

# - name: Set Application (Engineering)
#   set_fact:
#       application: "engineering/{{ database_type }}-database"        
#   when: environment_name is search('engineering')

#  The rest of this play is in a block so we can re-enable monitoring even if it fails
- name: Rotate Passwords
  block:

      # When run in AWS the hosts file for the engineering hosts will always be included in the inventory regardless
      # of the environment where it is run.   Therefore we must explicitly exclude engineering hosts unless
      # the engineering environment has been explicitly selected.

      # Do not specify database login credentials as will login as SYS on primary
      - name: Set Profile for DBSNMP on Primary
        include_tasks: set_dbsnmp_profile.yml
        vars:
          db_name: ""
          login_user: ""
          login_pwd: ""
        when: 
          - database_primary_sid is defined
          #- not inventory_hostname is search('.engineering-') or environment_name is search('engineering')

      # We require a special profile for SYS which prevents it getting locked out if an invalid password
      # is used as we must always be able to connect to the SYS account.
      # This profile allows for a high number of failures before locking - this provides time for the DBA
      # to become aware of the situation before the account gets locked out.
      - name: Set Profile for SYS on Primary
        include_tasks: set_sys_profile.yml
        vars:
          db_name: ""
          login_user: ""
          login_pwd: ""
        when: 
          - database_primary_sid is defined
          #- not inventory_hostname is search('.engineering-') or environment_name is search('engineering')

      # Database passwords only need to be set on the primary
      # (Do not attempt to change password for engineering hosts unless we are an engineering environment)
      - name: Show Groups
        debug: var=group_names

      # Prevent Failover due to problems with password changes by disabling FSFO during password rotation
      - name: Disable Fast Start Failover
        include_role:
          name: ../oracle_ha/build_ha
          tasks_from: set-fsfo-mode.yml
        when: 
          - database_primary_sid is defined
          #- not inventory_hostname is search('.engineering-') or environment_name is search('engineering')
          - hostvars[groups[database_evironment + '_primarydb'][0]]['fsfo_mode'] | default('disabled') != 'disabled'
        vars:
            fsfo_mode: disabled
            standby1: "{{ database_evironment + '_standbydb1' if (database_evironment + '_standbydb1' in groups) else '' }}"
            standby2: "{{ database_evironment + '_standbydb2' if (database_evironment + '_standbydb2' in groups) else '' }}"

      # Handle SYS on its own first to minimize the amount of time FSFO needs to be disabled
      - name: Set Password for SYS
        include_tasks: rotate_system_passwords.yml
        vars:
          db_type: "{{ database_type }}"
          db_username: "{{ username }}"
        loop: ['sys']
        loop_control:
            loop_var: username
        when: 
          - database_primary_sid is defined
          #- not inventory_hostname is search('.engineering-') or environment_name is search('engineering')

      # Now the passwords have been set in the wallet we can re-enable FSFO.
      - name: Re-enable Fast Start Failover
        include_role:
          name: ../oracle_ha/build_ha
          tasks_from: set-fsfo-mode.yml
        when: 
          - database_primary_sid is defined
          #- not inventory_hostname is search('.engineering-') or environment_name is search('engineering')
          - hostvars[groups[database_environment + '_primarydb'][0]]['fsfo_mode'] | default('disabled') != 'disabled'
        vars:
            fsfo_mode: "{{ hostvars[groups[database_environment + '_primarydb'][0]]['fsfo_mode'] }}"
            standby1: "{{ database_environment + '_standbydb1' if (database_environment + '_standbydb1' in groups) else '' }}"
            standby2: "{{ database_environment + '_standbydb2' if (database_environment + '_standbydb2' in groups) else '' }}"

      # We are changing the SYSTEM password so keep a note of the old value as this will be required later
      # for rotating the password in the Alfresco or Audit wallets.
      - name: Remember Existing SYSTEM Password
        set_fact:
            original_system_password: "{{ lookup('aws_ssm', '/{{ environment_name }}/{{ application }}/db/oradb_system_password',region=region ) }}"
        when:  
          - database_type == 'delius' # and not environment_name is search('engineering'))
               #or (database_type == 'oem' and environment_name is search('engineering')))
          
      - name: Set Password for SYSTEM
        include_tasks: rotate_system_passwords.yml
        vars:
          db_type: "{{ database_type }}"
          db_username: "system"
        when: 
          - database_primary_sid is defined
          #- not inventory_hostname is search('.engineering-') or environment_name is search('engineering')
      
      # New Password will be overwritten by change of DELIUS_APP_SCRIPTS password, so record it in a variable
      - name: Remember New Delius SYSTEM Password
        set_fact:
           new_system_password: "{{ new_password }}"
        when: 
          - database_primary_sid is defined
          #- not inventory_hostname is search('.engineering-') or environment_name is search('engineering')
               
      # Change DELIUS_APP_SCRIPTS password for Delius
      - name: Set Password for DELIUS_APP_SCRIPTS
        include_tasks: rotate_application_passwords.yml
        vars:
          db_type: "{{ database_type }}"
          db_username: "delius_app_scripts"
        when:
          - database_primary_sid is defined
          #- not inventory_hostname is search('.engineering-') or environment_name is search('engineering')
          - database_type == 'delius'

      # Update Alfresco Wallet Password for Delius databases (it uses the Delius database SYSTEM password)
      - name: Update Alfresco Wallet Password
        when: database_type | default('not_delius') == 'delius'
        block:

          - name: Get the Alfresco Wallet Location
            shell: |
                  . ~/.bash_profile
                  echo "$ORACLE_BASE/wallets/alfresco_wallet"
            register: get_wallet_location
            changed_when: false

          - name: Set the Alfresco Wallet Location
            set_fact:
              wallet_dir: "{{ get_wallet_location.stdout }}"

          - name: Check if Alfresco Wallet Exists
            stat:
              path: "{{ wallet_dir }}"
            register: alfresco_wallet

          - name: Update Alfresco Wallet Password
            include_tasks: rotate_wallet_password.yml
            when: alfresco_wallet.stat.exists
            vars:
              before_password: "{{ original_system_password }}"
              after_password: "{{ new_system_password }}"
              path_to_wallet: "{{ wallet_dir }}"
              recreate_wallet_code_location: "{{ playbook_dir }}/../alfresco_wallet/alfresco_wallet"

      # # Update Audit Wallet Password for Engineering databases (it uses the Engineering database SYSTEM password)
      # - name: Update Audit Wallet Password
      #   when: environment_name is search('engineering')
      #   block:

      #     - name: Get the Audit Wallet Location
      #       shell: |
      #             . ~/.bash_profile
      #             echo "$HOME/admin/delius_audited_interaction/oracle/audit_wallet"
      #       register: get_wallet_location
      #       changed_when: false

      #     - name: Set the Audit Wallet Location
      #       set_fact:
      #         wallet_dir: "{{ get_wallet_location.stdout }}"

      #     - name: Check if Audit Wallet Exists
      #       stat:
      #         path: "{{ wallet_dir }}"
      #       register: audit_wallet

      #     # The name of the repository database is found in the tnsnames file in the
      #     # directory immediately above the wallet
      #     - name: Get Name of Audit Repository Database
      #       shell: |
      #            . ~/.bash_profile
      #            grep AUDITED_INTERACTION_REPO {{ wallet_dir }}/../tnsnames.ora | sed -E 's/.*SERVICE_NAME=(.*)_TAF.*/\1/'
      #       register: get_audit_repo
      #       when: audit_wallet.stat.exists
      #       changed_when: false

      #     - name: Update Audit Wallet Password
      #       include_tasks: rotate_wallet_password.yml
      #       when: audit_wallet.stat.exists
      #       vars:
      #         before_password: "{{ original_system_password }}"
      #         after_password: "{{ new_system_password }}"
      #         path_to_wallet: "{{ wallet_dir }}"
      #         repo_db: "{{ get_audit_repo.stdout }}"
      #         recreate_wallet_code_location: "{{ playbook_dir }}/../../../../engineering/operations/playbooks/delius_audited_interaction"
      #         role_tasks_from: "configure_controller.yml"

      - name: Set Passwords for DBSNMP
        include_tasks: rotate_system_passwords.yml
        vars:
          db_type: "{{ database_type }}"
          db_username: "dbsnmp"
        when: 
          - database_primary_sid is defined
          #- not inventory_hostname is search('.engineering-') or environment_name is search('engineering')

      - name: Rotate Password for DELIUS_AUDIT_POOL on Client and Repository Databases
        when: 
          - database_primary_sid is defined
          - database_type | default('') == 'delius'
          #- not inventory_hostname is search('.engineering-')
        block:

          - name: Find Ansible Config Files Specifying the Audited Interaction Repo
            find:
              paths: "{{ ansible_inventory_sources | select('search','.*/hmpps-env-configs/.*') | first | regex_replace('(.*)/hmpps-env-configs/.*','\\1/hmpps-env-configs/')  }}"
              contains: audited_interaction_repo
              recurse: true
            register: audited_interaction_repos
            delegate_to: localhost
            become: no

          - debug:
               var: audited_interaction_repos

          - name: Read Ansible Config Files Containing Audited Interaction Repo
            slurp:
               src: "{{ item }}"
            loop: "{{ audited_interaction_repos.files | map(attribute='path') | list }}"
            register: config_contents
            delegate_to: localhost
            become: no

          - name: Populate List of Audited Interaction Repository Databases
            set_fact:
              repo_dbs: "{{ repo_dbs | default([]) + [ (item['content'] | b64decode | regex_search('^.*audited_interaction_repo:\\s*(\\w+)$',multiline=true)) | regex_replace('^.*audited_interaction_repo:\\s*(\\w+)$','\\1') ] }}"
            loop: "{{ config_contents.results }}"
            when: item['content'] is defined and item['content']

          # Enable Gradual Database Password Rollover for DELIUS_AUDIT_POOL to avoid
          # logon failures between updating the database password and updating the Audit
          # wallet on the OEM host
          - name: Set Profile for DELIUS_AUDIT_POOL on Primary
            include_tasks: set_delius_audit_pool_profile.yml
            vars:
              db_name: ""
              login_user: ""
              login_pwd: ""
            when: (audited_interaction_repo is defined) or (database_primary_sid in repo_dbs)

          # We rotate the DELIUS_AUDIT_POOL password if this is a client database (audited_interaction_repo is defined)
          # or a repository database (specified as the audited_interaction_repo parameter for at least one environment)
          - name: Set Passwords for Delius Audit Pool User if Audit Preservation Configured
            include_tasks: rotate_system_passwords.yml
            vars:
              db_type: "delius"
              db_username: "delius_audit_pool"
            when: (audited_interaction_repo is defined) or (database_primary_sid in repo_dbs)
          
          - name: Lock Unused Delius Audit Pool User if Audit Preservation Not Configured
            script: lock_db_password.sh
            environment:
               DB_USERNAME: "DELIUS_AUDIT_POOL"
            when: 
               - not (audited_interaction_repo is defined)
               - not (database_primary_sid in repo_dbs)
            register: lock_db_password
            changed_when: lock_db_password.stdout is search ('.*Locked.*')

      # The same ASMSNMP password is used on primary and standby instances, so we initially create the new
      # password on primary only and then apply to all instances.
      # (Do not attempt to change password for engineering hosts unless we are an engineering environment)
      - name: Generate ASMSNMP Passwords
        include_tasks: generate_asm_password.yml
        vars:
          db_type: "{{ database_type }}"
        when: 
          - database_primary_sid is defined
          #- not inventory_hostname is search('.engineering-') or environment_name is search('engineering')

      - name: Generate ASMSNMP Passwords
        include_tasks: rotate_asm_passwords.yml
        vars:
          db_type: "{{ database_type }}"
        #when: not inventory_hostname is search('.engineering-') or environment_name is search('engineering')

      - name: Rotate Oracle Password
        include_tasks: rotate_oracle_password.yml
        #when: not inventory_hostname is search('.engineering-') or environment_name is search('engineering')

      # - name: Get the Engineering environment that the Oracle agent uploads to
      #   set_fact: 
      #     get_oem_env: "{{ inventory_hostname | regex_replace('^.*\\.(engineering-\\w*)\\..*$','\\1') }}"
      #   register: get_oem_env
      #   run_once: true
      #   when: inventory_hostname is search('\\.engineering-')

      # - name: Update OEM Targets
      #   include_tasks: update_oem_targets.yml
      #   run_once: true
      #   delegate_to: localhost
      #   become: no

      # Unlock database accounts in case they have become locked whilst waiting for OEM target password updates.
      # (This should not happen due to Gradual Database Password Rollover but it can happen if the passwords
      #  are changed more than once per hour since any interim passwords cannot be used).
      # We only unlock passwords which have recently become locked.
      - name: Unlock Accounts for SYS, SYSTEM, DBSNMP  
        include_tasks: unlock_system_passwords.yml
        vars:
          db_username: "{{ username }}"
          db_name: ""
          login_user: ""
          login_pwd: ""
          db_type: "{{ database_type }}"
        loop: ['sys','system','dbsnmp']
        loop_control:
            loop_var: username
        when: 
          - database_primary_sid is defined
          #- not inventory_hostname is search('.engineering-') or environment_name is search('engineering')

      - name: Unlock Accounts DELIUS_AUDIT_POOL if in use  
        include_tasks: unlock_system_passwords.yml
        vars:
          db_username: "delius_audit_pool"
          db_name: ""
          login_user: ""
          login_pwd: ""
          db_type: "delius"
        when:
          - database_primary_sid is defined
          - database_type == 'delius'
          - (audited_interaction_repo is defined) or (database_primary_sid in repo_dbs)

# Restart Monitoring regardless of success of password rotation
  #always:

      # - name: Re-Enable Monitoring
      #   when: not inventory_hostname is search('.engineering-') or environment_name is search('engineering')
      #   block: 

      #       # Re-Enable OEM Native Monitoring
      #       - name: Stop database monitoring blackout
      #         include_role: 
      #            name: oem-blackout
      #            tasks_from: ../oem_blackout.yml 
      #         vars:
      #             target: "{{ inventory_hostname }}"  
      #             action: "stop" 
      #             object_type: "all" 
      #             blackout: "PASSWORD_ROTATION_{{ environment_name }}" 

      #       # Re-Enable OEM Script-Based Monitoring
      #       # We supply the script path here to allow the script_exclusion.yml file
      #       # to find another script which it calls within the same directory.   
      #       # Ideally this would be done using roles instead of supplying a script path,
      #       # but that would require significant changes to existing code.
      #       - name: Un-Exclude Target Hosts from Monitoring During Password Changes
      #         include_role: 
      #           name: oem-blackout
      #           tasks_from: script_exclusion.yml 
      #         vars:
      #             action: "stop"
      #             blackout: "PASSWORD_ROTATION_{{ environment_name }}"
      #             engineering_role: "{{ assumed_engineering_role }}"
      #             engineering_env: "{{ bastion_inventory.stdout }}"
      #             #exclusion_expiry: "{{ exclude_timeout }}"