- block:
    - name: Retrieve All Passwords
      shell: |
        export PATH=$PATH:/usr/local/bin
        echo $(aws secretsmanager get-secret-value --secret-id {{ secret_name }} --region eu-west-2  --query SecretString --output text)
      register: getsecrets

    - name: Combine New Password
      set_fact:
        secrets: "{{ getsecrets.stdout | from_json | default([]) | combine({ db_username: new_password }) }}"

    - name: Record Secret Tags
      delegate_to: localhost
      become: no
      shell: |
        export PATH=$PATH:/usr/local/bin
        TAGS=$(aws secretsmanager describe-secret --secret-id {{ secret_name }} --region eu-west-2 --query "Tags[]")
        echo $TAGS
      register: tags

    - name: Populate Secret Tags Dictionary
      set_fact:
        tag_dict: "{{ tag_dict | default({}) | combine( {tag.Key: tag.Value} ) }}"
      loop: "{{ tags.stdout }}"
      loop_control:
        loop_var: tag

    # There is a potential for this task to fail due to AWS throttling, so allow it to retry a few times if needed
    - name: Record New Password in Secret Manager
      community.aws.aws_secret:
        name: "{{ secret_name }}"
        state: present
        secret_type: "string"
        secret: "{{ secrets | to_json }}"
        region: "{{ region }}"
        tags: "{{ tag_dict }}"
      retries: 4
      delay: "{{ 60 | random }}"
      throttle: 1

  when: oem_db_name is not defined

- block:
    - name: Initialise Secrets Dictionary
      set_fact:
        secretsmanager_passwords_dict: {}

    - name: Setup Temporary Secrets Dictionary
      set_fact:
        secret_password_dict:
          account:
            account_name: "hmpps-oem-{{ aws_environment }}"
            assume_role_name: "EC2OracleEnterpriseManagementSecretsRole"
            secret: "{{ secret_name }}"
            users:

    - name: Add User {{ db_username }} To Secret Dictionary
      set_fact:
        secret_password_dict: "{{ secret_password_dict |  combine({ 'account': { 'users': [{db_username: new_password | default(None) }] }}, recursive=true) }}"

    - name: Update {{ db_username }} Password In Secrets
      import_role:
        name: secretsmanager-passwords
      vars:
        secretsmanager_passwords: "{{ secret_password_dict }}"

  when: oem_db_name is defined
