- name: Check if Cloud Control Agent Installed
  stat:
    path: "{{ emctl_agent }}"
  register: agent_emctl

- name: Determine if Diagnostics Pack is enabled
  set_fact:
    has_diagnostic_pack: >-
      {{ (database_parameters.control_management_pack_access is defined) and
         (database_parameters.control_management_pack_access | default('') is search('.*DIAGNOSTIC.*')) }}

- block:
    - name: Find out target name
      shell: |
        {{ emctl_agent }} config agent listtargets | egrep -i -e "{{ object_type }}\]$" | sed 's/^\[//;s/\]$//' | awk -F', ' '{printf("%s:%s",$1,$2)}'
      register: target_name_type
      when: agent_emctl.stat.exists

    - name: Create blackout name fact if defined
      set_fact:
        blackout_name: "{{ blackout }}"
      when: (blackout is defined) and (blackout|length > 0)

    - name: Create blackout name fact if not defined
      set_fact:
        blackout_name: "{{ object_type }}"
      when: ((blackout is defined) and (blackout|length == 0)) or (blackout is not defined)

    - name: Allow OEM Jobs to Run During Blackout if declared
      set_fact:
        allow_jobs_flag: "{{ '-allow_jobs' if ( allow_jobs | default(false) ) else '' }}"

    - name: Create duration fact
      set_fact:
        period: "-d {{ duration }}"
      when: (duration is defined) and (duration|length > 0)

    - name: Special case to set fact if object_type parameter is set at node level
      set_fact:
        nodelevel: "-nodeLevel"
      when: object_type == "all"

    - name: Start Blackout {{ blackout_name }}
      shell: |
        {{ emctl_agent}} start blackout {{ blackout_name }} {{ nodelevel | default() }} {{ target_name_type.stdout }} {{ period | default() }} {{ allow_jobs_flag }}
      register: blackout_create
      changed_when: blackout_create.rc == 0
      failed_when: blackout_create.rc != 0 and (blackout_create.stdout.find("already exists") == -1)
      when: action == "start"

    - name: Output the status of start blackout
      debug:
        msg: "Blackout {{ blackout_name }} already exists"
      when: action == "start" and (blackout_create.stdout.find("already exists") != -1)

    - name: Find blackout status when action is stop
      shell: |
        {{ emctl_agent}} status blackout {{ target_name_type.stdout }}
      register: blackout_status
      when: action == "stop"

    - name: Stop Blackout {{ blackout_name }}
      shell: |
        {{ emctl_agent}} stop blackout {{ blackout_name }}
      when: (action == "stop") and (blackout_status.stdout.find("No Blackout registered") == -1)

  when:
    - agent_emctl.stat.exists
    - has_diagnostic_pack

- name: Disable OEM Script-Based Monitoring if no Diagnostic Pack
  include_tasks: script_exclusion.yml
  vars:
    duration: "{{ duration | quote }}"
  when: not has_diagnostic_pack
