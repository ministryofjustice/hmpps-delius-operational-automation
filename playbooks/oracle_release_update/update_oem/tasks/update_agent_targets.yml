---

- name: Get sysman password from ssm parameter store
  shell: . /etc/environment && aws ssm get-parameters --region ${REGION} --with-decryption --name /${HMPPS_ENVIRONMENT}/${APPLICATION}/oem-database/db/oradb_sysman_password | jq -r '.Parameters[].Value'
  register: sysman_output
  changed_when: false
  no_log: true

- name: Set fact for sysman password to be used elsewhere
  set_fact:
    sysman_password: "{{ sysman_output.stdout | default('Welcome1') }}"

- name: Get Name of Agent Host
  include: get_agent_target.yml

- name: Show Which Target
  debug:
      msg: "Updating OEM Targets for {{ agent_host }}"

# We start by determining the lifecycle status for the new targets we are going to create.   
# This will be the same as the lifecycle status of the existing targets that they are due to replace.
- name: Generate Command to List Existing Target Properties
  shell: |
          . ~/.bash_profile
          {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force 1>&2
          {{ emcli }} sync 1>&2
          {{ emcli }} list -resource="Targets" -search="HOST_NAME='{{ agent_host }}'" -column="TARGET_NAME" -script -noheader | awk '{printf("{{ emcli }} list -resource=\"TargetProperties\" -search=\"TARGET_NAME='"'"'%s'"'"'\" -column=\"PROPERTY_NAME,PROPERTY_VALUE\" -script; ",$1)}'
  register: existing_target_properties
  changed_when: false
  environment:
          SYSMAN_PASSWORD: "{{ sysman_password }}"

# We determine existing lifecycle status based on the most commonly used status for all existing targets on the host
- name: Generate Command to Get Existing Lifecycle Status
  set_fact:
     get_lifecycle_status: "({{ existing_target_properties.stdout }}) | grep orcl_gtp_lifecycle_status | sort | uniq -c | sort -r -n -k1 | head -1 | awk '{print $NF}'"

- name: Get the Lifecycle Status
  shell: |
   . ~/.bash_profile
    {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force 1>&2
    {{ emcli }} sync 1>&2
    {{ get_lifecycle_status }}
  register: get_lifecycle_status 
  changed_when: false
  environment:
     SYSMAN_PASSWORD: "{{ sysman_password }}"

- name: Set lifecycle status
  set_fact:
    lifecycle_status: "{{ get_lifecycle_status.stdout_lines[-1] | default('unknown') }}"

# Fallback to Hard-Coded Lifecycle Status if we cannot find the current one from existing targets.
# This may happen if the 11g targets have already been deleted or did not have a lifecycle status assigned to them.
- name: Set fact lifecycle status
  block:

    - set_fact: lifecycle_status="Development"
      when: inventory_dir is search("dev")

    - set_fact: lifecycle_status="Test"
      when: inventory_dir is search("test|training|int")

    - set_fact: lifecycle_status="Production"
      when: inventory_dir is search("pre-prod|perf")
  
    - set_fact: lifecycle_status="Stage"
      when: inventory_dir is search("stage")

    - set_fact: lifecycle_status="MissionCritical"
      when:  inventory_dir is search("delius-prod")

  when: 
     - inventory_dir is search("hmpps-env-configs")
     - lifecycle_status == 'unknown'

- name: Show Lifecycle Status
  debug: var=lifecycle_status

    
#########################################################
#
# (1)  ORACLE HOME TARGET
#
#  Add new Oracle Home target for Updated Grid Oracle Home
#
##########################################################

# Find out if we have a target for the New Grid Infrastructure Oracle Home and create it if it does not exist
# (Do not delete the Old Oracle Home as that will be decommissioned separately)
- name: Generate Command to List Existing Oracle Home Properties
  shell: |
        . ~/.bash_profile
        {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force 1>&2
        {{ emcli }} sync 1>&2
        {{ emcli }} list -resource="Targets" -search="HOST_NAME='{{ agent_host }}'" -search="TARGET_TYPE='oracle_home'" -column="TARGET_NAME" -script -noheader | awk '{printf("{{ emcli }} list -resource=\"TargetProperties\" -search=\"TARGET_NAME='"'"'%s'"'"'\" -column=\"PROPERTY_NAME,PROPERTY_VALUE\" -script; ",$1)}'
  register: existing_oracle_home_properties
  changed_when: false
  environment:
          SYSMAN_PASSWORD: "{{ sysman_password }}"

- name: Generate Command to Get New Grid Oracle Home Target if it exists
  set_fact:
     get_new_gi_home_cmd: "({{ existing_oracle_home_properties.stdout }}) | grep INSTALL_LOCATION | grep -c {{ oracle_grid_new_oracle_home }} | cat"

- name: Find out if the New Grid Infrastructure Oracle Home target exists
  shell: |
         . ~/.bash_profile
         {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force 1>&2
         {{ emcli }} sync 1>&2
         {{ get_new_gi_home_cmd }}
  register: get_new_oracle_grid_home_exists 
  changed_when: false
  environment:
      SYSMAN_PASSWORD: "{{ sysman_password }}"

# This block will run if the New Grid Oracle Home Target does not already exist
- name: Create New Grid Oracle Home Target
  block:

    # For Grid Infrastructure Home Names we use the Convention OraGIHome_<n>_<hostname> where <n> is a sequential counter
    - name: Get Name of Highest Numbered Existing Grid Infrastructure Homes Matching Naming Convention
      shell: |
            . ~/.bash_profile
            {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force 1>&2
            {{ emcli }} sync 1>&2
            {{ emcli }} list -resource="Targets" -search="HOST_NAME='{{ agent_host }}'" -search="TARGET_TYPE='oracle_home'" -column="TARGET_NAME" -script -noheader |  grep -E "OraGIHome_[[:digit:]]_{{ agent_host }}" | sort -n -k2 -t_ | tail -1
      register: highest_gi_home_name
      changed_when: false
      environment:
              SYSMAN_PASSWORD: "{{ sysman_password }}"

    - name: Increment Grid Infrastructure Home Name Counter
      set_fact:
          gi_home_counter:  "{{ ( ( highest_gi_home_name.stdout_lines[0] | default('OraGIHome_0_' + agent_host ) ) | regex_replace('.+_(\\d+)_.+','\\1') | int ) + 1 }}"

    - name: Set New Grid Infrastructure Home Name
      set_fact:
          new_gi_home_name:  "{{ ( highest_gi_home_name.stdout_lines[0] | default('OraGIHome_0_' + agent_host ) ) | regex_replace('(.+)_\\d+_(.+)','\\1_' + gi_home_counter + '_\\2') }}"

    - name: Set Properties
      set_fact:
          gi_home_name: "{{ new_gi_home_name }}"
          gi_home_type: "O"
          gi_install_location: "{{ oracle_grid_new_oracle_home }}"
          gi_inventory: "{{ oracle_inventory }}"

    - name: Create Oracle Home Target
      shell: |
          . ~/.bash_profile
          {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force
          {{ emcli }} sync
          {{ emcli }} add_target -name="{{ gi_home_name }}" -type="oracle_home" -host="{{ agent_host }}" -properties="HOME_TYPE:{{ gi_home_type }};INSTALL_LOCATION:{{ gi_install_location }};INVENTORY:{{ gi_inventory }};orcl_gtp_lifecycle_status:{{ lifecycle_status }}"
      environment:
        SYSMAN_PASSWORD: "{{ sysman_password }}"

  when: get_new_oracle_grid_home_exists.stdout_lines[-1] == "0"

#########################################
#
# (2)  HIGH AVAILABILITY SERVICE TARGET
#
#      Create New HAS target
#
#########################################

- name: Check if HAS Target Already Exists
  include_tasks: check_target_exists.yml
  vars: 
     target_name: "has_{{ agent_host }}"
     target_type: has

- debug:
     msg: "The target has_{{ agent_host }} already exists: {{ target_exists }}"

# Create New HAS Target if one does not already exist
# We make 2 changes to the default HAS target configuration:
# (1)  Increase frequency to 15 minutes to ensure timely notifications and allow down status to be cleared before overnight blackouts are lifted
# (2)  Remove monitoring of Exadata components DISKMON and ONS
- name: Create New HAS Target
  shell: |
    . ~/.bash_profile
      {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force
      {{ emcli }} sync
      {{ emcli }} add_target -name="has_{{ agent_host }}" -type="has" -host="{{ agent_host }}" -properties="OracleHome:{{ oracle_grid_new_oracle_home }};orcl_gtp_lifecycle_status:{{ lifecycle_status }}"
  when: not ( target_exists | bool )
  environment:
      SYSMAN_PASSWORD: "{{ sysman_password }}"

# Ensure the properties of the HAS target are up to date
- name: Modify HAS Target
  shell: |
      . ~/.bash_profile
      {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force
      {{ emcli }} sync
      {{ emcli }} modify_target -name="has_{{ agent_host }}" -type="has" -host="{{ agent_host }}" -properties="OracleHome:{{ oracle_grid_new_oracle_home }};orcl_gtp_lifecycle_status:{{ lifecycle_status }}"
      {{ emcli }} modify_collection_schedule -targetType=has -targetNames="has_{{ agent_host }}" -collectionName=resource_statusSiha -freqType=Minute -freqValue=15 -preview=N
      {{ emcli }} modify_threshold  -target_type=has -target_name="has_{{ agent_host }}" -metric=resource_status -column=crs_event_composite_status -key_columns="resource_ora.diskmon.type_ora.diskmon;" -warning_threshold="undefined" -critical_threshold="undefined"
      {{ emcli }} modify_threshold  -target_type=has -target_name="has_{{ agent_host }}" -metric=resource_status -column=crs_event_composite_status -key_columns="resource_ora.ons.type_ora.ons;" -warning_threshold="undefined" -critical_threshold="undefined"
  environment:
      SYSMAN_PASSWORD: "{{ sysman_password }}"


#########################################
#
# (3)  ASM TARGET
#
#      Modify ASM target
#
#########################################

- name: Find Out Grid Home of Osm Instance from Cloud Control
  shell:  |
      . ~/.bash_profile
      {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force 1>&2
      {{ emcli }} sync 1>&2
      {{ emcli }} list -resource="TargetProperties" -search="TARGET_NAME='+ASM_{{ agent_host }}'" -column="PROPERTY_NAME,PROPERTY_VALUE" -script | grep OracleHome | awk '{print $2}'
  changed_when: false
  register: grid_home_in_cloud
  environment:
          SYSMAN_PASSWORD: "{{ sysman_password }}"

- name: Modify Existing ASM Target
  shell: |
    . ~/.bash_profile
      {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force
      {{ emcli }} sync
      {{ emcli }} modify_target -name="+ASM_{{ agent_host }}" -type="osm_instance" -properties="OracleHome:{{ oracle_grid_new_oracle_home }}"
  when: grid_home_in_cloud.stdout != oracle_grid_new_oracle_home
  environment:
      SYSMAN_PASSWORD: "{{ sysman_password }}"
      
#########################################
#
# (4)  LISTENER TARGET
#
#      Create New Listener Target
#
#########################################

# Find out if we have a target for the previous Listener; delete it if it does exist so we can add the new one
- name: Delete Old Listener Target
  include_tasks: delete_old_target.yml
  vars: 
     target_type: oracle_listener

- name: Get listener name
  shell: |
    . ~/.bash_profile 
    srvctl config listener | grep "Name: " | awk '{print $NF}'
  register: listener_name
  changed_when: false

# Get Listener Port
- name: Get listener port
  shell: |
    . ~/.bash_profile 
    srvctl config listener | grep "End points" | awk -F':' '{print $NF}' 
  changed_when: false
  register: listener_port

# Create New Listener Target if one does not already exist
- name: Create New Listener Target
  shell: |
    . ~/.bash_profile
      {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force
      {{ emcli }} sync
      {{ emcli }} add_target -name="{{ listener_name.stdout }}_{{ agent_host }}" -type="oracle_listener" -host="{{ agent_host }}" -properties="LsnrName:{{ listener_name.stdout }};ListenerOraDir:{{ oracle_grid_new_oracle_home }}/network/admin/;Port:{{ listener_port.stdout }};OracleHome:{{ oracle_grid_new_oracle_home }};Machine:{{ agent_host }};orcl_gtp_lifecycle_status:{{ lifecycle_status }}"
  when: existing_target_name.stdout == ''  or get_target_home_match.stdout != '1'
  environment:
     SYSMAN_PASSWORD: "{{ sysman_password }}"


#########################################################
#
# (5)  ORACLE HOME TARGET
#
#  Add new Oracle Home target for New Oracle Database Home
#
##########################################################

# Find out if we have a target for the New Database Oracle Home and create it if it does not exist
# (Do not delete the 11g Oracle Home as that will be decommissioned separately)
- name: Generate Command to List Existing Oracle Home Properties
  shell: |
        . ~/.bash_profile
        {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force 1>&2
        {{ emcli }} sync 1>&2
        {{ emcli }} list -resource="Targets" -search="HOST_NAME='{{ agent_host }}'" -search="TARGET_TYPE='oracle_home'" -column="TARGET_NAME" -script -noheader | awk '{printf("{{ emcli }} list -resource=\"TargetProperties\" -search=\"TARGET_NAME='"'"'%s'"'"'\" -column=\"PROPERTY_NAME,PROPERTY_VALUE\" -script; ",$1)}'
  register: existing_oracle_home_properties
  changed_when: false
  environment:
          SYSMAN_PASSWORD: "{{ sysman_password }}"

- name: Generate Command to Get New Database Oracle Home Target if it exists
  set_fact:
     get_new_db_home_cmd: "({{ existing_oracle_home_properties.stdout }}) | grep INSTALL_LOCATION | grep -c {{ oracle_database_new_oracle_home }} | cat"

- name: Find out if the New Database Oracle Home target exists
  shell: |
         . ~/.bash_profile
         {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force 1>&2
         {{ emcli }} sync 1>&2
         {{ get_new_db_home_cmd }}
  register: get_new_oracle_database_home_exists 
  changed_when: false
  environment:
      SYSMAN_PASSWORD: "{{ sysman_password }}"

# This block will run if no New Database Oracle Home Target already exists
- name: Create New Database Oracle Home Target
  block:

    # For Database Infrastructure Home Names we use the Convention OraDBHome_<n>_<hostname> where <n> is a sequential counter
    - name: Get Name of Highest Numbered Existing Database Homes Matching Naming Convention
      shell: |
            . ~/.bash_profile
            {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force 1>&2
            {{ emcli }} sync 1>&2
            {{ emcli }} list -resource="Targets" -search="HOST_NAME='{{ agent_host }}'" -search="TARGET_TYPE='oracle_home'" -column="TARGET_NAME" -script -noheader |  grep -E "OraDBHome_[[:digit:]]_{{ agent_host }}" | sort -n -k2 -t_ | tail -1
      register: highest_db_home_name
      changed_when: false
      environment:
              SYSMAN_PASSWORD: "{{ sysman_password }}"

    - name: Increment Database Home Name Counter
      set_fact:
          db_home_counter:  "{{ ( ( highest_db_home_name.stdout_lines[0] | default('OraDBHome_0_' + agent_host ) ) | regex_replace('.+_(\\d+)_.+','\\1') | int ) + 1 }}"

    - name: Set New Grid Infrastructure Home Name
      set_fact:
          new_db_home_name:  "{{ ( highest_db_home_name.stdout_lines[0] | default('OraDBHome_0_' + agent_host ) ) | regex_replace('(.+)_\\d+_(.+)','\\1_' + db_home_counter + '_\\2') }}"

    - name: Set Properties
      set_fact:
          db_home_name: "{{ new_db_home_name }}"
          db_home_type: "O"
          db_install_location: "{{ oracle_database_new_oracle_home }}"
          db_inventory: "{{ oracle_inventory }}"

    - name: Create Oracle Home Target
      shell: |
          . ~/.bash_profile
          {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force 1>&2
          {{ emcli }} sync 1>&2
          {{ emcli }} add_target -name="{{ db_home_name }}" -type="oracle_home" -host="{{ agent_host }}" -properties="HOME_TYPE:{{ db_home_type }};INSTALL_LOCATION:{{ db_install_location }};INVENTORY:{{ db_inventory }};orcl_gtp_lifecycle_status:{{ lifecycle_status }}"
      environment:
        SYSMAN_PASSWORD: "{{ sysman_password }}"

  when: get_new_oracle_database_home_exists.stdout_lines[-1] == "0"


# Get name of Oracle database as registered with the agent.  Note that this is case sensitive and different cases have been used
# in different environments so we cannot assume which case has been used
- name: Get Database Target Name
  shell: |
        . ~/.bash_profile
        {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force 1>&2
        {{ emcli }} sync 1>&2
        {{ emcli }} list -resource="Targets" -search="HOST_NAME='{{ agent_host }}'" -search="TARGET_TYPE='oracle_database'" -column="TARGET_NAME" -script -noheader | awk '{print $1}'
  register: database_target_name
  changed_when: false
  environment:
          SYSMAN_PASSWORD: "{{ sysman_password }}"

- name: Find Out Oracle Home of Database from Cloud Control
  shell:  |
      . ~/.bash_profile
      {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force 1>&2
      {{ emcli }} sync 1>&2
      {{ emcli }} list -resource="TargetProperties" -search="TARGET_NAME='{{ database_target_name.stdout }}'" -column="PROPERTY_NAME,PROPERTY_VALUE" -script | grep OracleHome | awk '{print $2}'
  changed_when: false
  register: db_home_in_cloud
  environment:
          SYSMAN_PASSWORD: "{{ sysman_password }}"

- name: Assign Database to New Home
  shell:  |
          . ~/.bash_profile
          {{ emcli }} login -username=sysman -password=${SYSMAN_PASSWORD} -force 1>&2
          {{ emcli }} sync 1>&2
          {{ emcli }} modify_target -name="{{ database_target_name.stdout }}" -type="oracle_database" -properties="OracleHome:{{ oracle_database_new_oracle_home }}" -on_agent
  environment:
          SYSMAN_PASSWORD: "{{ sysman_password }}"
  when: not ((db_home_in_cloud.stdout_lines | join(' ')) is search(oracle_database_new_oracle_home))