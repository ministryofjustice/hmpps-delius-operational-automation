---
- hosts: "{{ target_hosts }}"
  gather_facts: no
  become: yes
  become_user: oracle
  roles:
     - release_update


# Run the following to Update OEM Targets *** only when inside of AWS ***
# This playbook calls an SSM Automation to run the OEM Changes within the associated
# Engineering Environment.
- hosts: localhost
  gather_facts: no
  become: no
  tasks:
     - include_vars:
          file: release_update/vars/main.yml
     - name: Run SSM Automation to Update OEM Targets
       include: release_update/tasks/update_oem_targets.yml
       vars:
          update_host: "{{ item }}"
          grid_home: "{{ oem_gi_home }}"
          database_home: "{{ oem_db_home }}"
          document_name: "oracle-release-update-oem"
       loop: "{{ target_hosts.split(',') }}"
       run_once: yes
       when:
         - apply_mode == 'switch-clone' 
         - is_aws_environment
         - groups[item][0] in switched_targets

# Run the following to Update OEM Targets *** only when run on non-AWS (e.g. local VMs) ***
# This playbook runs on the Primary OEM Host directly since AWS IAM / Engineering Accounts
# are not relevant if not running in AWS.
# (Only run if the host has an agent in place currently connected to an OMS)
- hosts: "{{ groups['oem_primarydb'][0] }}"
  gather_facts: no
  become: yes
  become_user: oracle
  vars:
          oracle_grid_new_oracle_home: "{{ hostvars.localhost.oem_gi_home }}"
          oracle_database_new_oracle_home: "{{ hostvars.localhost.oem_db_home }}"
          update_targets: "{{ hostvars.localhost.switched_targets | default([]) }}"
  roles:
     - { role: update_oem, when: apply_mode == 'switch-clone' and not ( hostvars.localhost.is_aws_environment ) and (hostvars.localhost.agent_connected | bool)}


# Once the Release Update has been applied by Switching to the Clone Home then ensure all patches are installed
- hosts: "{{ target_hosts }}"
  gather_facts: no
  become: yes
  become_user: oracle
  vars:
     oracle_vars_dir: "{{ lookup('env','HOME') }}/.ansible/roles/hmpps-oracledb-bootstrap/vars"
     install_absent_patches: true
     target_host: "{{ target_hosts }}"
  roles:
    - { role: hmpps-oracledb-patches, when: ( apply_mode | default('unknown') ) == 'switch-clone' }
