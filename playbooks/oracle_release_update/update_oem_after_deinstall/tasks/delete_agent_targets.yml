---
- name: Set Agent Host
  set_fact:
    agent_host: "{{ target_host + '.' + dns_zone_internal }}"

- name: Find Out if Deinstalled Home Exists as a Target
  shell: |
    . {{ stage }}/emcli_login.sh
    ALL_HOME_TARGETS=$({{ emcli }} list -resource="Targets" -search="HOST_NAME='{{ agent_host }}'" -search="TARGET_TYPE='oracle_home'" -column="TARGET_NAME" -script -noheader)
    for TARGET in ${ALL_HOME_TARGETS}; do {{ emcli }} list -resource="TargetProperties" -search="TARGET_NAME='$TARGET'" -search="PROPERTY_NAME='INSTALL_LOCATION'" -column="PROPERTY_VALUE" -script | grep -q "{{ oracle_home }}" && echo $TARGET && break; done
  register: existing_oracle_home
  failed_when: existing_oracle_home.rc > 1
  changed_when: false

- name: Seach Output For Oracle Home Name
  set_fact:
    oracle_home_name: "{{ item }}"
  loop: "{{ existing_oracle_home.stdout_lines }}"
  when: item is search(agent_host)

- debug: var=oracle_home_name

# # This block will run if the Deinstalled Oracle Home Target still exists
# - name: Delete Deinstalled  Oracle Home Target
#   block:
#     - name: Delete Target from Repository
#       shell: |
#         . {{ stage }}/emcli_login.sh
#         {{ emcli }} delete_target -name="{{ oracle_home_name }}" -type="oracle_home"

#     # Pause Until OEM has Finished Deleting the Target
#     # (Otherwise it will fail when we try to add the new target)
#     - name: Wait for Existing Target Deletion
#       script: ../../update_oem/files/wait_for_target_deletion.sh {{ existing_oracle_home.stdout }}
#       changed_when: false

#   when: existing_oracle_home.rc == 0
