- name: Include Variables for {{ dms_user_application }} Setup
  include_vars: "{{ dms_user_application }}.yml"

- name: Get {{ dms_user }} password from ssm
  shell: . /etc/environment && aws ssm get-parameters --region ${REGION} --with-decryption --name /${HMPPS_ENVIRONMENT}/${APPLICATION}/delius-database/db/{{ dms_user }}_password | jq -r '.Parameters[].Value'
  changed_when: false
  register: "dms_password"
  no_log: true

# We need to be able to log into the DMS User Account to create the Database Link
# so the Logon Trigger on this Account must be temporarily removed if it exists
- name: Check Existence of Logon Trigger
  shell: 
    cmd: |
      . ~/.bash_profile
      sqlplus -s / as sysdba << EOF

      WHENEVER SQLERROR EXIT FAILURE
      SET ECHO OFF HEAD OFF PAGES 0 FEED OFF SERVEROUTPUT ON

      SELECT 'TRIGGER_NAME='||trigger_name
      FROM   dba_triggers
      WHERE  trigger_name = '{{ dms_user }}_RESTRICT'
      AND    owner = '{{ user_support_user }}';
  
      EOF
  delegate_to: "{{ delius_primary_host }}"
  register: get_logon_trigger
  changed_when: false

# If we drop the logon trigger it will be recreated later
- name: Drop of Logon Trigger
  shell: 
    cmd: |
      . ~/.bash_profile
      sqlplus -s / as sysdba << EOF

      WHENEVER SQLERROR EXIT FAILURE
      SET ECHO OFF HEAD OFF PAGES 0 FEED OFF SERVEROUTPUT ON

      DROP TRIGGER {{ dms_user }}_RESTRICT;
  
      EOF
  delegate_to: "{{ delius_primary_host }}"
  register: drop_logon_trigger
  when: get_logon_trigger.stdout is search('.*DB_LINK={{ dms_user }}_RESTRICT.*')

- name: Check Existence of Database Link to the Primary Database
  shell: 
    cmd: |
      . ~/.bash_profile
      sqlplus -s /nolog << EOF

      connect {{ dms_user }}/${DMS_PASSWORD}

      WHENEVER SQLERROR EXIT FAILURE
      SET ECHO OFF HEAD OFF PAGES 0 FEED OFF SERVEROUTPUT ON

      SELECT 'DB_LINK='||db_link
      FROM   user_db_links
      WHERE  db_link = 'AWSDMS_DBLINK';
  
      EOF
  delegate_to: "{{ delius_primary_host }}"
  register: get_db_link
  changed_when: false
  environment:
    DMS_PASSWORD: "{{ dms_password.stdout }}"

- name: Check If Database Link is Functional
  shell: 
    cmd: |
      . ~/.bash_profile
      sqlplus -s /nolog << EOF

      connect {{ dms_user }}/${DMS_PASSWORD}

      WHENEVER SQLERROR EXIT FAILURE
      SET ECHO OFF HEAD OFF PAGES 0 FEED OFF SERVEROUTPUT ON

      SELECT *
      FROM   dual@awsdms_dblink;
  
      EOF
  delegate_to: "{{ delius_primary_host }}"
  register: check_db_link
  when: get_db_link.stdout is search('.*DB_LINK=AWSDMS_DBLINK.*')
  changed_when: false
  environment:
    DMS_PASSWORD: "{{ dms_password.stdout }}"

- name: Drop Non-Functional Database Link
  shell: 
    cmd: |
      . ~/.bash_profile
      sqlplus -s /nolog << EOF

      connect {{ dms_user }}/${DMS_PASSWORD}

      WHENEVER SQLERROR EXIT FAILURE
      SET ECHO OFF HEAD OFF PAGES 0 FEED OFF SERVEROUTPUT ON

      DROP DATABASE LINK awsdms_dblink;
  
      EOF
  delegate_to: "{{ delius_primary_host }}"
  register: drop_db_link
  when: 
     - get_db_link.stdout is search('.*DB_LINK=AWSDMS_DBLINK.*')
     - check_db_link.rc | default(0) > 0
  environment:
    DMS_PASSWORD: "{{ dms_password.stdout }}"

- name: Create Database Link to the Primary Database
  shell: 
    cmd: |
      . ~/.bash_profile
      sqlplus -s /nolog << EOF

      WHENEVER SQLERROR EXIT FAILURE
      SET ECHO OFF HEAD OFF PAGES 0 FEED OFF SERVEROUTPUT ON

      connect / as sysdba

      -- The DMS User does not normally have privileges to
      -- create a database link so we grant this temporarily
      GRANT CREATE DATABASE LINK TO {{ dms_user }};

      connect {{ dms_user }}/${DMS_PASSWORD}

      CREATE DATABASE LINK awsdms_dblink
      CONNECT TO {{ dms_user }} IDENTIFIED BY ${DMS_PASSWORD}
      USING '{{ delius_primary_sid | upper }}';

      connect / as sysdba

      REVOKE CREATE DATABASE LINK FROM {{ dms_user }};
    
      EOF
  delegate_to: "{{ delius_primary_host }}"
  register: create_db_link
  when: ( not (get_db_link.stdout is search('.*DB_LINK=AWSDMS_DBLINK.*')) )
        or ( drop_db_link.stdout | default('') is search('.*Database link dropped..*') )     
  environment:
    DMS_PASSWORD: "{{ dms_password.stdout }}"