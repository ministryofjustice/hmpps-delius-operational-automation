---
- name: Import Incident Rule Set for Delius Targets
  block:
    - name: Ensure EMCLI session is ready
      include_tasks: "{{ playbook_dir }}/../../common/tasks/emcli_login.yml"

    - name: Initialize All Metrics
      set_fact:
        all_oem_metrics: {}
      when: all_oem_metrics is not defined

    - name: Initialize Host Metrics
      set_fact:
        host_oem_metrics: {}
      when: host_oem_metrics is not defined

    - name: Initialize List of OEM Targets on this Host
      set_fact:
        oem_targets: []

    - name: Get List of OEM Targets on this Host
      ansible.builtin.shell: |
        . ~/.bash_profile
        {{ emctl_agent }} config agent listtargets | grep -E "^\[.*\]$" | sed 's/^\[//' | sed 's/\]$//'
      register: get_list_of_oem_targets
      changed_when: false

    - name: Populate List of OEM Targets on this Host
      set_fact:
        oem_targets: "{{ oem_targets + [{'target_name': (item.split(',')[0]), 'target_type': (item.split(',')[1] | trim) }]}}"
      loop: "{{ get_list_of_oem_targets.stdout_lines }}"

    - name: Show OEM Targets
      debug:
         var: oem_targets

    - name: Set the Metric Thresholds
      shell: |
        # Quoting the heredoc delimiter is required to avoid expansion of $ symbol
        # used in Metric Extension names ME$METRIC_EXTENSION
        cat <<-'EOINPUT' > {{ stage }}/oem_threshold.txt
        {{ item.1.input_file }}
        EOINPUT
        echo "Setting thresholds for {{ item.1.target_type }} {{ item.0.target_name }}"
        . ~/.bash_profile
        export JAVA_HOME=$ORACLE_HOME/jdk/jre
        {{ emcli }} modify_threshold -target_name={{ item.0.target_name }} -target_type={{ item.1.target_type }} \
              -input_file="FILE:{{ stage }}/oem_threshold.txt"
        # There appears to be an undocumented bug unsetting thresholds using EMCLI input files.
        # Although the documentation suggests using " " to unset the threshold, this appears to
        # instead result in the literal value of " " being used.  As a workaround we can
        # unset the threshold by specifying it directly as a command line parameter instead of
        # using the input file.
        # (We currently do not handle metrics with key columns)
        while IFS= read -r line; do
            case "$line" in
                START_RECORD*)
                    metric=""
                    column=""
                    warning_threshold=""
                    set_threshold=false
                    ;;
                metric*,*)
                    metric=$(echo "$line" | cut -d',' -f2 | xargs)
                    ;;
                column*,*)
                    column=$(echo "$line" | cut -d',' -f2 | xargs)
                    ;;
                warning_threshold*,*)
                    warning_threshold=$(echo "$line" | cut -d',' -f2 | xargs)
                    if [[ "$warning_threshold" == "\" \"" ]]; then
                        set_threshold=true
                    fi
                    ;;
                END_RECORD*)
                    if $set_threshold; then
                        echo "Using workaround to unset Warning Threshold for $metric:$column."
                        {{ emcli }} modify_threshold \
                           -target_name={{ item.0.target_name }} \
                           -target_type={{ item.1.target_type }} \
                           -metric="$metric" -column="$column" \
                           -warning_threshold="" \
                           -key_columns=";"
                    fi
                    ;;
            esac
        done < {{ stage }}/oem_threshold.txt
      loop: "{{ oem_targets | product(( all_oem_metrics | flatten_emcli_metrics ) + ( host_oem_metrics | flatten_emcli_metrics )) }}"
      when:
        - item.0.target_type == item.1.target_type
        - (item.0.target_name == item.1.target_name) or (item.1.target_name == 'all')
      register: set_metric_thresholds

    - debug:
        var: set_metric_thresholds

    - name: Enable and Disable Collections
      shell: |
        echo "Setting scheduler state for {{ item.1.target_type }} {{ item.0.target_name }} {{ item.1.collection_name }}"
        . ~/.bash_profile
        export JAVA_HOME=$ORACLE_HOME/jdk/jre
        {{ emcli }} modify_collection_schedule -targetNames={{ item.0.target_name }} -targetType={{ item.1.target_type }} \
              -collectionName={{ item.1.collection_name }} \
              -collectionStatus={{ item.1.collection_attribute_value }} \
              -preview=N -force
      loop: "{{ oem_targets | product(( all_oem_metrics | flatten_emcli_metrics('schedule') ) + ( host_oem_metrics | flatten_emcli_metrics('schedule') )) }}"
      when:
        - item.0.target_type == item.1.target_type
        - (item.0.target_name == item.1.target_name) or (item.1.target_name == 'all')
        - item.1.collection_attribute == 'collectionStatus'
      register: enable_disable_collections

    # We change the collection schedule by using the "interval" attribute.  This is not an Oracle attribute but
    # instead it combines 2 Oracle attributes we have defined here for that purpose, separated by a space.
    # It takes the form 'freqValue freqType' where freqValue and freqType are Oracle attributes described at:
    # https://docs.oracle.com/en/enterprise-manager/cloud-control/enterprise-manager-cloud-control/13.5/emcli/modify_collection_schedule.html#GUID-A166D2BC-8ECE-4B11-921D-0D756F827E86
    # For example '15 Minute' requires a collection to be taken every 15 minutes.
    # freqType={Minute}{Hour}{Day}{Week}{Weekly}{Month}
    # freqValue={any integer value for Minute/Hour/Day/Week}{One or more from
    #            Mon...Sun for Weekly}{One or more from 1;2..31 or Last for Month}
    - name: Reschedule Collections
      shell: |
        echo "Setting scheduler frequency for {{ item.1.target_type }} {{ item.0.target_name }} {{ item.1.collection_name }}"
        . ~/.bash_profile
        export JAVA_HOME=$ORACLE_HOME/jdk/jre
        {{ emcli }} modify_collection_schedule -targetNames={{ item.0.target_name }} -targetType={{ item.1.target_type }} \
              -collectionName={{ item.1.collection_name }} \
              -freqType={{ item.1.collection_attribute_value.split(' ')[1] }}\
              -freqValue={{ item.1.collection_attribute_value.split(' ')[0] }}\
              -preview=N -force
      loop: "{{ oem_targets | product(( all_oem_metrics | flatten_emcli_metrics('schedule') ) + ( host_oem_metrics | flatten_emcli_metrics('schedule') )) }}"
      when:
        - item.0.target_type == item.1.target_type
        - (item.0.target_name == item.1.target_name) or (item.1.target_name == 'all')
        - item.1.collection_attribute == 'interval'
      register: reschedule_collections

    - name: Set Alert Log Filter Expressions
      include_tasks: set_alert_log_filter_expression.yml
      loop: "{{ oem_targets | product(( all_oem_metrics | flatten_emcli_metrics('custom_properties') ) + ( host_oem_metrics | flatten_emcli_metrics('custom_properties') )) }}"
      when:
        - item.0.target_type == 'oracle_database'
        - item.0.target_type == item.1.target_type
        - (item.0.target_name == item.1.target_name) or (item.1.target_name == 'all')
      register: set_alert_log_filter_expressions
      vars:
        filter_expression: "{{ item.1.property_value }}"
        database_target_name: "{{ item.0.target_name }}"

  always:
    - name: Remove Temporary Files from Stage Area
      file:
        path: "{{ stage }}/{{ item }}"
        state: absent
      loop:
        - oem_threshold.txt
      tags: remove_temporary_files
