- name: Update repositories cache and install AWS client package
  delegate_to: localhost
  shell:  |
    apt-get update
    apt install -y awscli
    apt install -y jq
  become_user: root

- name: Read ansible file to get database names and their environments
  include: read_hcl.yml
  run_once: true

- name: Start document to audit database in all their respective environments
  delegate_to: localhost
  shell: aws ssm start-automation-execution --document-name "arn:aws:ssm:eu-west-2:{{ item.value.aws_account_id }}:automation-definition/oracle-licence-audit-database" --region eu-west-2 --parameters "TargetHost={{ item.value.target_host }}" | jq --raw-output '.AutomationExecutionId'
  register:  database_audit_status
  environment:
    AWS_ACCESS_KEY_ID: "{{ item.value.aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ item.value.aws_secret_access_key }}"
    AWS_SESSION_TOKEN: "{{ item.value.aws_session_token }}"
  loop: "{{ target_database_dict | dict2items }}"
  loop_control: 
    label: "{{ item.key }}"

- name: Add ssm execution id to target dictionary
  set_fact:
    target_database_dict: "{{ target_database_dict | combine({ item.item.key: {'execution_id': item.stdout }},recursive=true) }}"
  loop: "{{ database_audit_status.results }}"
  loop_control: 
    label: "{{ item.item.key }}"
  when: item.stdout != ''

- name: Output database audit ssm execution details
  debug:
    msg: "Database auditing for {{ item.value.target_host }} in {{ item.value.environment }} {{ (item.value.execution_id == '') | ternary('Not Started', 'Started') }}"
  loop: "{{ target_database_dict | dict2items }}"
  loop_control: 
    label: "{{ item.key }}"

- name: Wait for database auditing to finish
  delegate_to: localhost
  become: no
  shell: aws ssm describe-automation-step-executions --automation-execution-id "{{ item.value.execution_id }}" --region=eu-west-2 --filters "Key=StepName,Values=CheckBuildStatus" | jq --raw-output '.StepExecutions[0].StepStatus'
  register:  automation_status
  until: automation_status.stdout == 'Success' or automation_status.stdout == 'Failed'
  retries: 50
  delay: 30
  environment:
    AWS_ACCESS_KEY_ID: "{{ item.value.aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ item.value.aws_secret_access_key }}"
    AWS_SESSION_TOKEN: "{{ item.value.aws_session_token }}"
  loop: "{{ target_database_dict | dict2items }}"
  loop_control: 
    label: "{{ item.key }}"
  when: item.value.execution_id != ''

- name: Remove Delius non-weblogic environments from aws accounts dictionary
  set_fact:
    aws_account_ids: "{{ aws_account_ids | combine({ 'hmpps-engineering-dev': omit, 'hmpps-engineering-prod': omit}) }}"

- name: Create weblogic dictionary
  set_fact:
    weblogic_info: {}

- name: Loop through environments and get weblogic information
  include_tasks: audit-weblogic.yml
  loop: "{{ aws_account_ids | dict2items }}"
  loop_control:
    pause: 2
    loop_var: envs
  ignore_errors: true

- name: Remove weblogic results file
  file:
    path: "{{ weblogic_output }}"
    state: absent

- name: Create weblogic results file
  file:
    path: "{{ weblogic_output }}"
    state: touch

- name: Set headings in weblogic results file
  lineinfile:
    path: "{{ weblogic_output }}"
    line: "Environment:InstanceType:InstanceTypeVcpuCount:TotalVpcuAvailable:TotalVcpuUsed"

- name: Copy results to local file
  lineinfile:
    path: "{{ weblogic_output }}"
    line: "{{ item.key }}:{{ item.value.instance_type }}:{{ item.value.instance_type_vcpu_count }}:{{item.value.total_no_vcpus_available }}:{{ item.value.total_no_vcpus_used }}"
  with_dict: "{{ weblogic_info }}" 

- name: Total up number for weblogic vcpu's
  set_fact: 
    total_vpcu: "{{ total_vpcu | default(0) | int + item.value.total_no_vcpus_used }}"
  with_dict: "{{ weblogic_info }}"

- name: Copy vcpu total to local file
  lineinfile:
    path: "{{ weblogic_output }}"
    line: "Vcpu Total: {{ total_vpcu }}"

- name: Upload weblogic output file to s3
  shell: aws s3 cp {{ weblogic_output }} s3://{{ dependencies_bucket.name }}/{{ audit_output }}/{{ weblogic_file }}

- name: Create directory locally
  file:
    path: "{{ audit_local_dir }}"
    state: directory

- name: Download s3 bucket output
  shell: aws s3 cp s3://{{ dependencies_bucket.name }}/{{ audit_output }} {{ audit_local_dir }} --recursive --exclude "*.zip"
  register: down

- name: Compress directory
  archive:
    path: "{{ audit_local_dir }}/*"
    dest: "{{ audit_local_dir }}/{{ audit_local_file }}"
    format: zip

- name: Upload to s3 bucket the zip file
  shell: aws s3 cp {{ audit_local_dir }}/{{ audit_local_file }} s3://{{ dependencies_bucket.name }}/{{ audit_output }}/{{ audit_local_file }}

- name: Remove directory locally
  file:
    path: "{{ audit_local_dir }}"
    state: absent

- name: INFORMATION
  debug:
    msg: "Please check s3 bucket {{ dependencies_bucket.name }}/{{ audit_output }}/{{ audit_local_file }} containging output files!"