- name: Read Common Terraform HCL File
  set_fact:
      hcl: "{{ lookup('file','{{ inventory_dir }}/../common/common.tfvars') | replace('\n',' ') }}"
    
- name: Get All AWS Account IDs from Terraform HCL File
  set_fact:
      aws_account_id_strings: "{{ hcl | regex_replace('.*aws_account_ids = \\{(.*?)\\}.*','\\1') | regex_replace('\\\"\\s+',',') | regex_replace('\\\"','') }}"
      eng_dev_id: "{{ hcl | regex_replace('.*(aws_engineering_account_ids = \\{.*?\\}).*','\\1') | regex_replace('.*non-prod\\s+=\\s+\\\"(\\d+)\\\".*','\\1') }}"
      eng_prod_id: "{{ hcl | regex_replace('.*(aws_engineering_account_ids = \\{.*?\\}).*','\\1') | regex_replace('.*\\s+prod\\s+=\\s+\\\"(\\d+)\\\".*','\\1') }}"

- name: Create AWS Account IDs
  set_fact:
    aws_account_ids: "{{ aws_account_ids | default({}) | combine({item.split('=')[0] | trim: item.split('=')[1] | trim}) }}"
  loop: "{{ aws_account_id_strings.split(',') | list }}" 
  when: item is search('=')

- name: Add Engineering Accounts
  set_fact:
    aws_account_ids: "{{ aws_account_ids | combine({'hmpps-engineering-dev': eng_dev_id}) | combine({'hmpps-engineering-prod': eng_prod_id}) }}"
            
- name: Remove accounts not required
  set_fact:
    aws_account_ids: "{{ aws_account_ids | combine({ 'hmpps-probation': omit, 'cloud-platform': omit}) }}"

- name: Setup session role
  delegate_to: localhost
  community.aws.sts_assume_role:
    role_arn: "arn:aws:iam::{{ item.value }}:role/terraform"
    role_session_name: "{{ item.value}}_terraform"
  loop: "{{ aws_account_ids | dict2items }}"
  loop_control: 
    label: "{{ item.key }}"
  register: assumed_roles

- name: Add session role to aws_account_ids
  set_fact:
    aws_account_ids: "{{ aws_account_ids | combine({ item.item.key: {'aws_account_id': item.item.value, 'aws_access_key_id': item.sts_creds.access_key, 'aws_secret_access_key': item.sts_creds.secret_key, 'aws_session_token': item.sts_creds.session_token }},recursive=true) }}"
  loop: "{{ assumed_roles.results }}"
  loop_control: 
    label: "{{ item.item.key }}"

- name: Get enironments containing non-engineering database
  delegate_to: localhost
  shell: egrep "\[*_primarydb.*\]$|\[*_standbydb.*\]$" {{ inventory_dir }}/../delius*/ansible/hosts | sed -E 's/^.*\/(delius-.*)\/(ansible).*\[(.*.)\]$/hmpps-\1:\3/' | egrep -v 'delius-core-sandpit'
  register: environments

- name: Get enironments containing engineering database
  delegate_to: localhost
  shell: egrep "\[*_primarydb.*\]$" {{ inventory_dir }}/../../hmpps-engineering-platform-terraform/env_configs/ansible/*/hosts | sed -E 's/^.*\/(ansible)\/(.*)\/.*\[(.*.)\]$/hmpps-engineering-\2:\3/'
  register: eng_environments

- name: Set fact for database target dictionary
  set_fact:
    tmp_host: |
      {{ 
        { item:
              {'aws_account_id': '',
              'environment': item.split(':')[0],
              'target_host': item.split(':')[1],
              'execution_id': '',
              'aws_access_key_id': '',
              'aws_secret_access_key': '',
              'aws_session_token': ''}
          }
      }}
  with_items: 
    - "{{ environments.stdout_lines }}"
    - "{{ eng_environments.stdout_lines }}"
  register: hosts

- name: Create new target dictionary
  set_fact:
    target_database_dict: "{{ target_database_dict | default({}) | combine(item) }}"
  with_items: "{{ hosts.results | map(attribute='ansible_facts.tmp_host') | list }}"

- name: Add session role info to database target dictionary
  set_fact:
    target_database_dict: "{{ target_database_dict | combine({ item.0.key: {'aws_account_id': item.1.value.aws_account_id, 'aws_access_key_id': item.1.value.aws_access_key_id, 'aws_secret_access_key': item.1.value.aws_secret_access_key, 'aws_session_token': item.1.value.aws_session_token}},recursive=true) }}"
  with_nested: 
    - "{{ target_database_dict | dict2items  }}"
    - "{{ aws_account_ids | dict2items }}"
  when: item[0].key.split(':')[0] == item[1].key
  no_log: true

- name: Add fqdn to database target dictionary
  set_fact:
    target_database_dict: "{{ target_database_dict | combine({ item.key: {'fqdn': item.value.target_host.split('_')[0] + '-db-' + item.value.target_host.split('_')[1] | regex_replace('primarydb','1') | regex_replace('standbydb1','2') | regex_replace('standbydb2','3') + '.' + item.value.environment | regex_replace('hmpps-delius-','') | regex_replace('hmpps-','') | regex_replace('core-','') | regex_replace('^prod','probation.service.justice.gov.uk') + item.value.environment | regex_replace('hmpps-engineering-dev|hmpps-engineering-prod','.probation.hmpps.dsd.io') | regex_replace('hmpps-delius-core-dev','.delius-core.probation.hmpps.dsd.io') | regex_replace('hmpps-delius-prod','') | regex_replace('hmpps-delius-.*$','.delius.probation.hmpps.dsd.io') }},recursive=true) }}"
  with_items: "{{ target_database_dict | dict2items }}"