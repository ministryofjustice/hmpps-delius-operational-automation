- name: Get database role
  script: ../../../../common/files/get_database_role.sh
  register: db_role

- name: Set facts adg
  set_fact:
    is_adg: "{{ 'READ ONLY WITH APPLY' in db_role.stdout }}"

- name: Set hidden UMF parameter on both primary and ADG databases
  script: set_hidden_parameter.sh
  register: set_hidden_parameter
  failed_when: set_hidden_parameter.rc != 0
  when: database_primary_id is defined or is_adg

- block:
    - name: Build Secret Id From EC2 Tags
      shell: |
        export PATH=$PATH:/usr/local/bin
        INSTANCEID=$(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id)
        ENVIRONMENT_NAME=$(aws ec2 describe-tags --filters "Name=resource-id,Values=${INSTANCEID}" "Name=key,Values=environment-name"  --query "Tags[].Value" --output text)
        DELIUS_ENVIRONMENT=$(aws ec2 describe-tags --filters "Name=resource-id,Values=${INSTANCEID}" "Name=key,Values=delius-environment"  --query "Tags[].Value" --output text)
        APPLICATION=$(aws ec2 describe-tags --filters "Name=resource-id,Values=${INSTANCEID}" "Name=key,Values=application"  --query "Tags[].Value" --output text)
        echo ${ENVIRONMENT_NAME}-${DELIUS_ENVIRONMENT}-${APPLICATION}-dba-passwords
      register: buildsecretid

    - name: Enable RMF database user
      include_tasks: enable-database-user.yml
      vars:
        secret_id: "{{ buildsecretid.stdout }}"

    - name: Create database links on primary
      script: create_database_links.sh
      environment:
        PRIMARY_DB_LINK: "{{ primary_db_link }}"
        ADG_DB_LINK: "{{ adg_db_link }}"
        SECRET_ID: "{{ buildsecretid.stdout }}"
      register: create_database_links
      failed_when: create_database_links.rc != 0

    - name: Configure umf node on primary
      script: configure_node.sh
      environment:
        NODE: "{{ primary_node }}"
        DB_LINK: "{{ primary_db_link }}"
      register: configure_primary_node
      failed_when: configure_primary_node.rc != 0

  when: database_primary_sid is defined

- name: Configure umf node on adg
  script: configure_node.sh
  environment:
    NODE: "{{ adg_node }}"
    DB_LINK: "{{ adg_db_link }}"
  register: configure_adg_node
  failed_when: configure_adg_node.rc != 0
  when: is_adg

- block:
    - name: Create umf topology on primary
      script: create_topology.sh
      environment:
        TOPOLOGY_NAME: "{{ topology_name }}"

    - name: Register adg node to topology
      script: register_to_topology.sh
      environment:
        TOPOLOGY_NAME: "{{ topology_name }}"
        ADG_NODE: "{{ adg_node }}"
        PRIMARY_DB_LINK: "{{ primary_db_link }}"
        ADG_DB_LINK: "{{ adg_db_link }}"

    - name: Register adg node for awr service
      script: register_to_awr.sh
      environment:
        TOPOLOGY_NAME: "{{ topology_name }}"
        ADG_NODE: "{{ adg_node }}"

  when: database_primary_sid is defined
