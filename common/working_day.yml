- hosts: localhost
  gather_facts: no
  become: no

  tasks:

      - name: Check the Calendar
        setup:
          filter: ansible_date_time

      - name: Check if Today is the Weekend
        set_fact:
          weekend: "{{ true if (ansible_date_time.weekday in ['Saturday','Sunday']) else false }}"

      - name: For Weekdays Use Non Working Days Table to Find Out if Today is Non Working Day
        when: not weekend
        block:

        - name: Lookup Todays Date in the Non Working Days Table
          shell: |
                 NON_WORKING_DAY_EXISTS=$(aws dynamodb --region eu-west-2 get-item \
                                            --table-name dev-non-working-days \
                                            --key "{\"code_value\":{\"S\":\"{{ ansible_date_time.date | replace('-','') }}\"}}" \
                                            --projection-expression "code_value" --output json | jq -nr '[ inputs ] | if length > 0 then "YES" else "NO" end')
          changed_when: false
          register: check_non_working_day

      - name: Is Non Working Day
        set_fact:
           non_working_day: "{{ true if (weekend or check_non_working_day.stdout == 'YES') else false }}"

      - name: Get Most Recent Data in the Non Working Days Table
        shell: |
                LAST_UDPATED_DATETIME=$(aws dynamodb --region eu-west-2 scan --table-name dev-non-working-days | \
                                          jq -r '[ .Items[].last_updated_datetime.S ] | sort | max')
        changed_when: false 
        register: get_most_recent_non_working_day_data
            
      - debug:
           var: get_most_recent_non_working_day_data

      - name: Output Day type
        debug:
           msg: "{{ 'Working Day: ' + ('NO' if non_working_day else 'YES') }}"
      
- hosts: "{{ target_host }}"
  gather_facts: no
  become: true
  become_user: oracle

  tasks:

    # If this is Not a Non-Working Day then we check if there is any new
    # Non-Working Day reference to be added.   (We don't try this if it is
    # a Non-Working Day as the source database may be down in lower environments -
    # we will catch up with any new reference data on the subsequent run.  Note
    # that new reference data for Non-Working Days is normally added months or
    # years in advance so there is no urgency for this block to be executed).
    - name: Update DynamoDB With Any New Non Working Days Added to Reference Data
      when: not hostvars['localhost']['non_working_day']
      block:

        - name: Query Delius Reference Data for Non Working Days for Probation
          script: get_nonworking_days.sh
          register: get_nonworking_days
          changed_when: false
          environment:
             PREVIOUS_MOST_RECENT_DATA: "{{ hostvars['localhost']['get_most_recent_non_working_day_data'].stdout }}"

        - debug:
             var: get_nonworking_days.stdout_lines

        - name: Add New Non-Working Days to DynamoDB
          shell: |
              aws dynamodb --region eu-west-2 put-item --table-name dev-non-working-days --item '{{ non_working_day_json }}'
          loop: "{{ get_nonworking_days.stdout_lines }}"
          loop_control:
            loop_var: non_working_day_json