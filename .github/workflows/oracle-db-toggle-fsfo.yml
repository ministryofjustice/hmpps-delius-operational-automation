name: "Oracle: Toggle Fast Start Failover"
run-name: "Oracle: ${{ inputs.TargetEnvironment }}-toggle-fsfo"
on:
  workflow_dispatch:
    inputs:
      TargetEnvironment:
        description: "Target environment"
        required: true
        type: choice
        options:
          - "delius-core-dev"
          - "delius-core-test"
          - "delius-core-training"
          - "delius-core-stage"
          - "delius-core-preprod"
          - "delius-core-prod"
          - "delius-mis-dev"
          - "delius-mis-stage"
          - "delius-mis-preprod"
          - "delius-mis-prod"
      FSFOMode:
        description: "FSFO mode required."
        type: choice
        default: "disable"
        options:
          - "disable"
          - "enable"
      VerboseOutput:
        description: "Verbose Output level"
        type: choice
        default: ""
        options:
          - ""
          - "-vv"
          - "-vvv"
          - "-vvvv"
      SourceCodeVersion:
        description: "Source version for the hmpps-delius-operation-automation. Enter a pull request, branch, commit ID, tag, or reference."
        type: string
        default: "main"
      SourceConfigVersion:
        description: "Source version for the modernisation-platform-configuration-management. Enter a pull request, branch, commit ID, tag, or reference."
        type: string
        default: "main"

  workflow_call:
    inputs:
      TargetEnvironment:
        description: "Target environment"
        required: true
        type: string
      FSFOMode:
        description: "FSFO mode required."
        required: true
        type: string

env:
  ansible_config: operations/playbooks/ansible.cfg
  disable_command: ansible-playbook operations/playbooks/oracle_ha/disable-fsfo.yml
  enable_command: ansible-playbook operations/playbooks/oracle_ha/enable-fsfo.yml
  inventory: inventory/ansible

permissions:
  contents: read
  packages: read
  id-token: write

jobs:          
  oracle_toggle_fsfo:
    name: oracle-toggle-fsfo
    environment: ${{ inputs.TargetEnvironment }}-preapproved
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ministryofjustice/hmpps-delius-operational-automation:0.78.0
    timeout-minutes: 1440
    continue-on-error: false
    steps:

      - name: Prepare Target Name
        id: preparetargetname
        run: echo TargetHost="environment_name_$(echo ${{ inputs.TargetEnvironment }} | sed 's/delius-core-dev/delius_core_development_dev/;s/delius-core-test/delius_core_test_test/;s/delius-core-training/delius_core_test_training/;s/delius-core-stage/delius_core_preproduction_stage/;s/delius-core-preprod/delius_core_preproduction_preprod/;s/delius-core-prod/delius_core_production_prod/')_delius_primarydb" >> $GITHUB_OUTPUT

      - name: Checkout Ansible Playbooks and Roles From hmpps-delius-operation-automation
        uses: actions/checkout@v4
        with:
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            playbooks/oracle_ha
            playbooks/ansible.cfg
          path: operations
          ref: ${{ inputs.SourceCodeVersion }}
          fetch-depth: 0

      - name: Checkout Ansible Inventory From modernisation-platform-configuration-management
        uses: actions/checkout@v4
        with:
          repository: ministryofjustice/modernisation-platform-configuration-management
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            ansible/hosts
            ansible/group_vars
          path: inventory
          ref: ${{ inputs.SourceConfigVersion }}
          fetch-depth: 0

      - name: Configure AWS Credentials
        id: login-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/modernisation-platform-oidc-cicd"
          role-session-name: "hmpps-delius-operational-automation-${{ github.run_number }}"
          role-duration-seconds: 21600
          aws-region: "eu-west-2"

      - name: Start Ansible Toggle FSFO
        shell: bash
        run: |
          export ANSIBLE_CONFIG=$ansible_config
          if [[ "${{ inputs.FSFOMode }}" == "disable" ]];
          then
             $disable_command -i $inventory -e ansible_aws_ssm_bucket_name=${{ vars.ANSIBLE_AWS_SSM_BUCKET_NAME }} \
             -e primary=${{ steps.preparetargetname.outputs.TargetHost }}
          fi
          if [[ "${{ inputs.FSFOMode }}" == "enable" ]];
          then
            # NOTE: FSFO will only be enabled if fsfo_mode is "enabled" in the
            # relevant Ansible group_vars file for the primary database.
            # You may also set this value to "observe" if you wish to enable
            # FSFO in Observer-only mode.
            # The standby_number is not relevant for enabling FSFO but must
            # not be undefined, so we set it arbitrarily to 0
             $enable_command -i $inventory -e ansible_aws_ssm_bucket_name=${{ vars.ANSIBLE_AWS_SSM_BUCKET_NAME }} \
             -e primary=${{ steps.preparetargetname.outputs.TargetHost }} \
             -e standby_number=0
          fi