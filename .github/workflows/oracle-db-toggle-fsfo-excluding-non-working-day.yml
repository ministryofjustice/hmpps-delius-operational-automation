name: "Oracle: Toggle Fast Start Failover Excluding Non-Working Day"
on:
  workflow_dispatch:
    inputs:
      TargetEnvironment:
        description: "Target environment"
        required: true
        type: choice
        options:
          - "delius-core-dev"
          - "delius-core-test"
          - "delius-core-training"
          - "delius-core-stage"
          - "delius-core-preprod"
          - "delius-core-prod"
          - "delius-mis-dev"
          - "delius-mis-stage"
          - "delius-mis-preprod"
          - "delius-mis-prod"
      FSFOMode:
        description: "FSFO mode required."
        type: choice
        default: "disable"
        options:
          - "disable"
          - "enable"
      SkipNonWorkingDay:
        description: "Skip non-working day?"
        type: choice
        default: "yes"
        options:
          - "yes"
          - "no"

env:
  ansible_config: operations/playbooks/ansible.cfg
  command: ansible-playbook operations/common/working_day.yml
  inventory: inventory/ansible

permissions:
  contents: read
  packages: read
  id-token: write

jobs:
  # Check if today is a working day and if so call the Toggle FSFO GHA workflow
  check-if-working-day:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.TargetEnvironment }}-preapproved
    container:
      image: ghcr.io/ministryofjustice/hmpps-delius-operational-automation:0.80.0
    outputs:
      working_day: ${{ steps.checkworkingday.outputs.working_day }}
    steps:

      - name: Prepare Inventory Name
        id: prepareinventorynames
        run: |
          # Prepare to run on primary Delius Database Host in this environment
          target_host="environment_name_$(echo ${{ github.event.inputs.TargetEnvironment }} | sed 's/dev/development_dev/;s/test/test_test/;s/training/test_training/;s/stage/preproduction_stage/;s/pre-prod/preproduction_pre_prod/;s/-prod/_production_prod/;s/-/_/g')_delius_primarydb"
          echo "target_host=${target_host}" >> $GITHUB_OUTPUT

      - name: Checkout Inventory From modernisation-platform-configuration-management
        uses: actions/checkout@v4
        with:
          repository: ministryofjustice/modernisation-platform-configuration-management
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            ansible/hosts
            ansible/group_vars
          path: inventory
          ref: ${{ github.event.inputs.SourceConfigVersion }}
          fetch-depth: 0

      - name: Checkout From hmpps-delius-operational-automation
        uses: actions/checkout@v4
        with:
          repository: ministryofjustice/hmpps-delius-operational-automation
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            common/working_day.yml
            common/files/get_nonworking_days.sh
          path: operations
          ref: ${{ github.event.inputs.SourceCodeVersion }}
          fetch-depth: 0

      - name: Configure AWS Credentials
        id: login-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/modernisation-platform-oidc-cicd"
          role-session-name: "hmpps-delius-operational-automation-${{ github.run_number }}"
          role-duration-seconds: 21600
          aws-region: "eu-west-2"

      - name: Run Check Working Day Playbook
        shell: bash
        id: checkworkingday
        env:
            TARGET_ENVIRONMENT: "${{ github.event.inputs.TargetEnvironment }}"
        run: |
          shopt -s nocasematch
          export ANSIBLE_CONFIG=$ansible_config
          # We run the Ansible to determine if this is a non-working day twice for 2 reasons:
          # (1) The first run spools to output which makes it easier to debug if there is a problem.
          # (2) The first run updates the DynamoDB table with the custom list of non-working days, so
          #     if a new date(s) has been added, it will be picked up and used by the second run to
          #     actually determine if this is a non-working day.
          SIMPLE_ENVIRONMENT_NAME="${TARGET_ENVIRONMENT##*-}"
          $command -vv -i $inventory -e ansible_aws_ssm_bucket_name=${{ vars.ANSIBLE_AWS_SSM_BUCKET_NAME }} \
              -e target_host=${{ steps.prepareinventorynames.outputs.target_host }} \
              -e region=eu-west-2 \
              -e simple_environment_name=${SIMPLE_ENVIRONMENT_NAME}
          WORKING_DAY=$( $command -i $inventory -e ansible_aws_ssm_bucket_name=${{ vars.ANSIBLE_AWS_SSM_BUCKET_NAME }} \
               -e target_host=${{ steps.prepareinventorynames.outputs.target_host }} \
               -e region=eu-west-2 \
               -e simple_environment_name=${SIMPLE_ENVIRONMENT_NAME} | grep WORKING_DAY= )
          WORKING_DAY=$( echo ${WORKING_DAY} | grep -oE "WORKING_DAY=(YES|NO)" | awk -F= '{print $2}' )
          echo "WORKING DAY $WORKING_DAY"  
          if [[ "${WORKING_DAY}" != "NO" && "${WORKING_DAY}" != "YES" ]]
          then
             echo "Could not determine if today is a working day for the Probation Service."
             exit 1
          fi
          echo "working_day=${WORKING_DAY}" >> $GITHUB_OUTPUT

  toggle-fsfo:
      needs: check-if-working-day
      if: ${{ needs.check-if-working-day.outputs.working_day == 'YES' || github.event.inputs.SkipNonWorkingDay == 'no' }}
      name: Toggle FSFO
      uses:
        ministryofjustice/hmpps-delius-operational-automation/.github/workflows/oracle-db-toggle-fsfo.yml@main
      with:
        TargetEnvironment: ${{ github.event.inputs.TargetEnvironment }}
        FSFOMode: ${{ github.event.inputs.FSFOMode }}

  skip-toggle-fsfo:
      needs: check-if-working-day
      if: ${{ needs.check-if-working-day.outputs.working_day != 'YES' && github.event.inputs.SkipNonWorkingDay == 'yes' }}
      runs-on: ubuntu-latest
      name: Do Not Toggle FSFO
      steps:
        - name: Echo No-Op Message
          run: |
              echo "Today is not a working day for probation in the ${{ github.event.inputs.TargetEnvironment }} environment."