name: "Oracle: Statistics"
run-name: "Oracle: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.TargetEnvironment || 'iterative-call-for' }}-delius-oracle-statistics"
on:
  workflow_dispatch:
    inputs:
      TargetEnvironment:
        description: "Target environment"
        required: true
        type: choice
        options:
          - "delius-core-dev"
          - "delius-core-test"
          - "delius-core-training"
          - "delius-core-stage"
          - "delius-core-preprod"
          - "delius-core-prod"
      GatherNewStatistics:
        description: "Gather new statistics for Delius database."
        type: choice
        default: "no"
        options:
          - "no"
          - "yes"
      GatherParallelism:
        description: "Degree of Parallelism to use for gathering new statistics (ignored if GatherNewStatistics = no)."
        type: choice
        default: "1"
        options: 
          - "1"
          - "2"
          - "4"
          - "8"
          - "16"
          - "32"
      ExportBackupStatisticsToS3:
        description: "Use Data Pump to export a backup of the current statistics and copy the file to S3."
        type: choice
        default: "no"
        options:
          - "no"
          - "yes"
      StatisticsIdentifier:
        description: "Optional identifier for Statistics export."
        type: string
        default: ""
      ImportSourceEnvironment:
        description: "Source environment for import of statistics."
        default: "None"
        type: choice
        options:
          - "None"
          - "delius-core-dev"
          - "delius-core-stage"
          - "delius-core-preprod"
      VerboseOutput:
        description: "Verbose Output level"
        type: choice
        default: ""
        options:
          - ""
          - "-vv"
          - "-vvv"
          - "-vvvv"
      SourceCodeVersion:
        description: "Source version for the hmpps-delius-operation-automation. Enter a pull request, branch, commit ID, tag, or reference."
        type: string
        default: "main"
      SourceConfigVersion:
        description: "Source version for the modernisation-platform-configuration-management. Enter a pull request, branch, commit ID, tag, or reference."
        type: string
        default: "main"

  repository_dispatch:
    types: ["oracle-db-statistics-success","oracle-db-statistics-failure"]     
        
env:
  ansible_config: operations/playbooks/ansible.cfg
  command: ansible-playbook operations/playbooks/oracle_statistics/oracle_statistics.yml
  inventory: inventory/ansible
  # Below for ACT testing only
  # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}


permissions:
  contents: read
  packages: read
  id-token: write

jobs:

  oracle-pre-delius-statistics:
    runs-on: ubuntu-latest
    outputs:
      TargetHost: ${{ steps.preparation.outputs.TargetHost }}
      TargetEnvironment: ${{ steps.preparation.outputs.TargetEnvironment }}
      ImportSourceEnvironment: ${{ steps.preparation.outputs.ImportSourceEnvironment }}
      StatisticsIdentifier: ${{ steps.preparation.outputs.StatisticsIdentifier }}
      ExportBackupStatisticsToS3: ${{ steps.preparation.outputs.ExportBackupStatisticsToS3 }}
      SourceCodeVersion: ${{ steps.preparation.outputs.SourceCodeVersion }}
      SourceConfigVersion: ${{ steps.preparation.outputs.SourceConfigVersion }}
      Verbose: ${{ steps.preparation.outputs.Verbose }}
      Inputs: ${{ steps.preparation.outputs.Inputs }}
      JobId: ${{ github.job }}
    steps:
      - name: Prepare Target Name And Json Input For Repository Dispatch Event
        id: preparation
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]
          then
            TargetHost=environment_name_$(echo ${{ github.event.inputs.TargetEnvironment }} | sed 's/dev/development_dev/;s/test/test_test/;s/training/test_training/;s/preprod/preproduction_preprod/;s/stage/preproduction_stage/;s/-/_/g')_delius_primarydb   
            # Build a JSON variable capturing all the inputs which have been supplied
            Inputs="{"
            Inputs=$Inputs"\"TargetHost\": \"$TargetHost\","
            Inputs=$Inputs"\"TargetEnvironment\": \"${{ github.event.inputs.TargetEnvironment }}\","
            Inputs=$Inputs"\"GatherNewStatistics\": \"${{ github.event.inputs.GatherNewStatistics }}\","
            Inputs=$Inputs"\"GatherParallelism\": \"${{ github.event.inputs.GatherParallelism }}\","
            Inputs=$Inputs"\"ExportBackupStatisticsToS3\": \"${{ github.event.inputs.ExportBackupStatisticsToS3 }}\","
            Inputs=$Inputs"\"StatisticsIdentifier\": \"${{ github.event.inputs.StatisticsIdentifier }}\","
            Inputs=$Inputs"\"ImportSourceEnvironment\": \"${{ github.event.inputs.ImportSourceEnvironment }}\","
            Inputs=$Inputs"\"SourceCodeVersion\": \"${{ github.event.inputs.SourceCodeVersion }}\","
            Inputs=$Inputs"\"SourceConfigVersion\": \"${{ github.event.inputs.SourceConfigVersion }}\","
            Inputs=$Inputs"\"VerboseOutput\": \"${{ github.event.inputs.VerboseOutput }}\""
            Inputs=$Inputs"}"
          elif [[ "${{ github.event_name }}" == "repository_dispatch" ]]
          then
            echo "${{ github.event.client_payload }}"
            Inputs='${{ toJson(github.event.client_payload) }}'
          fi

          echo "TargetHost=$(echo $Inputs | jq -r '.TargetHost')"  >> $GITHUB_OUTPUT
          echo "TargetEnvironment=$(echo $Inputs | jq -r '.TargetEnvironment')" >> $GITHUB_OUTPUT
          echo "ImportSourceEnvironment=$(echo $Inputs | jq -r '.ImportSourceEnvironment')" >> $GITHUB_OUTPUT
          echo "StatisticsIdentifier=$(echo $Inputs | jq -r '.StatisticsIdentifier')" >> $GITHUB_OUTPUT
          echo "ExportBackupStatisticsToS3=$(echo $Inputs | jq -r '.ExportBackupStatisticsToS3')" >> $GITHUB_OUTPUT
          echo "SourceCodeVersion=$(echo $Inputs | jq -r '.SourceCodeVersion')" >> $GITHUB_OUTPUT
          echo "SourceConfigVersion=$(echo $Inputs | jq -r '.SourceConfigVersion')" >> $GITHUB_OUTPUT
          echo "Verbose=$(echo $Inputs | jq -r '.Verbose')" >> $GITHUB_OUTPUT

          echo "Inputs="$(echo $Inputs | jq @json)
          Inputs=$(echo $Inputs | jq -r | jq @json)
          echo "Inputs="$(echo $Inputs | jq @json) >> $GITHUB_OUTPUT

          if [[ "${{ github.event.event_type }}" == "oracle-db-statistics-failure" ]]
          then
              echo "Gathering of Delius statistics failed."
              exit 1
          fi

  oracle-gather-delius-statistics:
    if: ${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.GatherNewStatistics == 'yes' || github.event.inputs.ExportBackupStatisticsToS3 == 'yes') }}
    needs: [oracle-pre-delius-statistics]
    environment: ${{ github.event.inputs.TargetEnvironment }}-preapproved
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ministryofjustice/hmpps-delius-operational-automation:0.80.0
    timeout-minutes: 1440
    continue-on-error: false
    env:
      Inputs: "${{ needs.oracle-pre-delius-statistics.outputs.Inputs }}"
    outputs: 
      JobId: ${{ github.job }}
    steps:                                        
      - name: Checkout Ansible Playbooks and Roles From hmpps-delius-operation-automation
        uses: actions/checkout@v4
        with:
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            playbooks/oracle_statistics
            playbooks/ansible.cfg
          path: operations
          ref: ${{ github.event.inputs.SourceCodeVersion }}
          fetch-depth: 0

      - name: Checkout Ansible Inventory From modernisation-platform-configuration-management
        uses: actions/checkout@v4
        with:
          repository: ministryofjustice/modernisation-platform-configuration-management
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            ansible/hosts
            ansible/group_vars
          path: inventory
          ref: ${{ github.event.inputs.SourceConfigVersion }}
          fetch-depth: 0

      - name: Configure AWS Credentials
        id: login-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/modernisation-platform-oidc-cicd"
          role-session-name: "hmpps-delius-operational-automation-${{ github.run_number }}"
          role-duration-seconds: 21600
          aws-region: "eu-west-2"
  
      - name: Start Ansible Gather Delius Statistics
        shell: bash
        run: |
          export ANSIBLE_CONFIG=$ansible_config
          $command -i $inventory -e ansible_aws_ssm_bucket_name=${{ vars.ANSIBLE_AWS_SSM_BUCKET_NAME }} \
          -e hosts=${{ needs.oracle-pre-delius-statistics.outputs.TargetHost }} \
          -e import_source_environment=None \
          -e gather_new_statistics=${{ github.event.inputs.GatherNewStatistics }} \
          -e statistics_identifier=${{ github.event.inputs.StatisticsIdentifier }} \
          -e export_to_s3=${{ github.event.inputs.ExportBackupStatisticsToS3 }} \
          -e parallelism=${{ github.event.inputs.GatherParallelism }} \
          -e repository_dispatch="${{ github.repository }}" -e json_inputs="$Inputs" \
          ${{ github.event.inputs.VerboseOutput }}

  oracle-export-remote-delius-statistics:
    if: ${{ always() && github.event_name == 'workflow_dispatch' && needs.oracle-pre-delius-statistics.outputs.ImportSourceEnvironment != 'None' && needs.oracle-gather-delius-statistics.result == 'skipped' }}
    needs: [oracle-pre-delius-statistics,oracle-gather-delius-statistics]
    environment: ${{ needs.oracle-pre-delius-statistics.outputs.ImportSourceEnvironment }}-preapproved
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ministryofjustice/hmpps-delius-operational-automation:0.80.0
    timeout-minutes: 1440
    continue-on-error: false
    outputs:
      TargetHost: ${{ needs.oracle-pre-delius-statistics.outputs.TargetHost }}
      TargetEnvironment: ${{ needs.oracle-pre-delius-statistics.outputs.TargetEnvironment }}
      ImportSourceEnvironment: ${{ needs.oracle-pre-delius-statistics.outputs.ImportSourceEnvironment }}
      SourceCodeVersion: ${{ needs.oracle-pre-delius-statistics.outputs.SourceCodeVersion }}
      SourceConfigVersion: ${{ needs.oracle-pre-delius-statistics.outputs.SourceConfigVersion }}
      Verbose: ${{ needs.oracle-pre-delius-statistics.outputs.Verbose }}
      JobId: ${{ github.job }}
      RemoteStatisticsIdentifier: ${{ github.event.inputs.StatisticsIdentifier }}
    steps:
      - name: Prepare Remote Target Name And Remote Statistics Identifier
        id: preparation
        shell: bash
        run: |
          TargetHost=environment_name_$(echo ${{ needs.oracle-pre-delius-statistics.outputs.ImportSourceEnvironment }} | sed 's/dev/development_dev/;s/test/test_test/;s/training/test_training/;s/preprod/preproduction_preprod/;s/stage/preproduction_stage/;s/-/_/g')_delius_primarydb
          StatisticsIdentifier=${{ needs.oracle-pre-delius-statistics.outputs.StatisticsIdentifier }}
          # If no Statistics Identifier has been specified as an input we generate one
          # based on the timestamp
          if [[ -z $StatisticsIdentifier ]]
          then
            DATE=$(date +"%Y%m%dT%H%M%S")
            ENV=$(echo ${{ needs.oracle-pre-delius-statistics.outputs.ImportSourceEnvironment }} | awk -F- '{printf("%s_%s",$1,$NF)}')
            RemoteStatisticsIdentifier="${ENV^^}_${DATE}"
          else
            RemoteStatisticsIdentifier="$StatisticsIdentifier"
          fi
          echo RemoteStatisticsIdentifier="${RemoteStatisticsIdentifier}" >> $GITHUB_OUTPUT
          echo TargetHost="${TargetHost}" >> $GITHUB_OUTPUT

      - name: Checkout Ansible Playbooks and Roles From hmpps-delius-operation-automation
        uses: actions/checkout@v4
        with:
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            playbooks/oracle_statistics
            playbooks/ansible.cfg
          path: operations
          ref: ${{ needs.oracle-pre-delius-statistics.outputs.SourceCodeVersion }}
          fetch-depth: 0

      - name: Checkout Ansible Inventory From modernisation-platform-configuration-management
        uses: actions/checkout@v4
        with:
          repository: ministryofjustice/modernisation-platform-configuration-management
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            ansible/hosts
            ansible/group_vars
          path: inventory
          ref: ${{ needs.oracle-pre-delius-statistics.outputs.SourceConfigVersion }}
          fetch-depth: 0

      - name: Configure AWS Credentials
        id: login-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/modernisation-platform-oidc-cicd"
          role-session-name: "hmpps-delius-operational-automation-${{ github.run_number }}"
          role-duration-seconds: 21600
          aws-region: "eu-west-2"

      - name: Start Ansible Export Delius Statistics From Remote Environment
        shell: bash
        run: |
          export ANSIBLE_CONFIG=$ansible_config
          $command -i $inventory -e ansible_aws_ssm_bucket_name=${{ vars.ANSIBLE_AWS_SSM_BUCKET_NAME }} \
          -e hosts=${{ steps.preparation.outputs.TargetHost }} \
          -e import_source_environment=${{ needs.oracle-pre-delius-statistics.outputs.ImportSourceEnvironment }} \
          -e statistics_identifier=${{ steps.preparation.outputs.RemoteStatisticsIdentifier }} \
          -e gather_new_statistics=no \
          -e export_to_s3=yes ${{ needs.oracle-pre-delius-statistics.outputs.VerboseOutput }}

  oracle-import-delius-statistics:
    needs: [oracle-export-remote-delius-statistics]
    environment: ${{ needs.oracle-export-remote-delius-statistics.outputs.TargetEnvironment }}-preapproved
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ministryofjustice/hmpps-delius-operational-automation:0.80.0
    timeout-minutes: 1440
    continue-on-error: false
    outputs: 
      JobId: ${{ github.job }}
    steps:
      - name: Checkout Ansible Playbooks and Roles From hmpps-delius-operation-automation
        uses: actions/checkout@v4
        with:
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            playbooks/oracle_statistics
            playbooks/ansible.cfg
          path: operations
          ref: ${{ needs.oracle-export-remote-delius-statistics.outputs.SourceCodeVersion }}
          fetch-depth: 0

      - name: Checkout Ansible Inventory From modernisation-platform-configuration-management
        uses: actions/checkout@v4
        with:
          repository: ministryofjustice/modernisation-platform-configuration-management
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            ansible/hosts
            ansible/group_vars
          path: inventory
          ref: ${{ needs.oracle-export-remote-delius-statistics.outputs.SourceConfigVersion }}
          fetch-depth: 0

      - name: Configure AWS Credentials
        id: login-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/modernisation-platform-oidc-cicd"
          role-session-name: "hmpps-delius-operational-automation-${{ github.run_number }}"
          role-duration-seconds: 21600
          aws-region: "eu-west-2"

      - name: Start Ansible Import Delius Statistics From Remote Environment
        shell: bash
        run: |
          export ANSIBLE_CONFIG=$ansible_config
          $command -i $inventory -e ansible_aws_ssm_bucket_name=${{ vars.ANSIBLE_AWS_SSM_BUCKET_NAME }} \
          -e hosts=${{ needs.oracle-export-remote-delius-statistics.outputs.TargetHost }} \
          -e import_source_environment=${{ needs.oracle-export-remote-delius-statistics.outputs.ImportSourceEnvironment }} \
          -e gather_new_statistics=no \
          -e statistics_identifier=${{ needs.oracle-export-remote-delius-statistics.outputs.RemoteStatisticsIdentifier }} \
          -e export_to_s3=no ${{ github.event.inputs.VerboseOutput }}

  setup-notification-failure-slack:
    if: failure()
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ministryofjustice/hmpps-delius-operational-automation:0.80.0
    needs: [oracle-pre-delius-statistics,oracle-gather-delius-statistics,oracle-export-remote-delius-statistics,oracle-import-delius-statistics]
    environment: ${{ github.event.inputs.TargetEnvironment }}-preapproved
    steps:

      - name: Checkout Local Repo to get Composite Action
        uses: actions/checkout@v5

      - name: Determine Which Job Failed
        id: determine_which_job_failed
        shell: bash
        run: |
             [ "${{ needs.oracle-pre-delius-statistics.result }}" == "failure" ] && echo "failed_job=oracle-pre-delius-statistics" >> "$GITHUB_OUTPUT"
             [ "${{ needs.oracle-gather-delius-statistics.result }}" == "failure" ] && echo "failed_job=oracle-gather-delius-statistics" >> "$GITHUB_OUTPUT"
             [ "${{ needs.oracle-export-remote-delius-statistics.result }}" == "failure" ] && echo "failed_job=oracle-export-remote-delius-statistics" >> "$GITHUB_OUTPUT"
             [ "${{ needs.oracle-import-delius-statistics.result }}" == "failure" ] && echo "failed_job=oracle-import-delius-statistics" >> "$GITHUB_OUTPUT"
             exit 0

      - name: Send Slack Failure Notification
        id: foreground_slack_notification
        uses: ./.github/actions/send-slack-notification
        with:
          Emoji: ":github-red:"
          TextHeader: "Statistics Job Failure"
          TextBody: ":cross-red: Statistics job failed"
          TargetHost: "${{ needs.oracle-pre-delius-statistics.outputs.TargetHost }}"
          TargetEnvironment: "${{ needs.oracle-pre-delius-statistics.outputs.TargetEnvironment }}"
          JobName: "${{ steps.determine_which_job_failed.outputs.failed_job }}"
          SourceCodeVersion: ${{ needs.oracle-pre-delius-statistics.outputs.SourceCodeVersion }}
          SourceConfigVersion: ${{ needs.oracle-pre-delius-statistics.outputs.SourceConfigVersion }}
 
  completion-slack:
    if: github.event_name == 'repository_dispatch'
    needs: [oracle-pre-delius-statistics]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ministryofjustice/hmpps-delius-operational-automation:0.80.0
    environment: ${{ github.event.inputs.TargetEnvironment }}-preapproved
    steps:

      - name: Checkout Local Repo to get Composite Action
        uses: actions/checkout@v5
       
      # If there was a failure during the background run this would have
      # been trapped already by the oracle-pre-delius-statistics job, so
      # we only need to handle the successful completion case here.
      - name: Send Slack Completion Success Notification
        id: background_success_slack_notification
        uses: ./.github/actions/send-slack-notification
        with:
          Emoji: ":github-green:"
          TextHeader: "Statistics Job Success"
          TextBody: ":github-tick: Statistics job completed successfully"
          TargetHost: "${{ needs.oracle-pre-delius-statistics.outputs.TargetHost }}"
          TargetEnvironment: "${{ needs.oracle-pre-delius-statistics.outputs.TargetEnvironment }}"
          JobName: "completed"
          SourceCodeVersion: ${{ needs.oracle-pre-delius-statistics.outputs.SourceCodeVersion }}
          SourceConfigVersion: ${{ needs.oracle-pre-delius-statistics.outputs.SourceConfigVersion }}
 