name: "Oracle: Build HA"
run-name: "Oracle: ${{ format('{0}_{1}', github.event.inputs.TargetEnvironment, github.event.inputs.TargetHost) }}_build_ha"
on:
  workflow_dispatch:
    inputs:
      TargetEnvironment:
        description: "Target environment"
        required: true
        type: choice
        options:
          - "delius-core-dev"
          - "delius-core-test"
          - "delius-core-training"
          - "delius-core-stage"
          - "delius-core-pre-prod"
          - "delius-core-prod"
      TargetHost:
        description: "Build HAs for Primary"
        required: true
        type: choice
        options: 
          - "delius_primarydb"
          - "mis_primarydb"
          - "misboe_primarydb"
          - "misdsd_primarydb"
      PrimarySourceType:
        description: "Build HA using Backup of Primary or Activate Database Duplication from Primary"
        required: true
        type: choice
        default: "active duplicate"
        options:
          - "backup"
          - "active duplicate"
      Procedure:
        description: "Build HA and Run Post Steps; or Run Post Steps Only (All Options run FSFO Setup when configured)"
        required: true
        type: choice
        default: "build"
        options:
          - "build"
          - "post"
          - "fsfo setup"
      SourceCodeVersion:
        description: "Source version for the  hmpps-delius-operation-automation. Enter a pull request, branch, commit ID, tag, or reference."
        type: string
        default: "main"
      SourceConfigVersion:
        description: "Source version for the modernisation-platform-configuration-management. Enter a pull request, branch, commit ID, tag, or reference."
        type: string
        default: "main"
      VerboseOutput:
        description: "Verbose Output level"
        type: choice
        options:
          - ""
          - "-v"
          - "-vv"
          - "-vvv"
          - "-vvvv"

env:
  command: ansible-playbook operations/playbooks/oracle_ha/build-ha.yml
  inventory: inventory/ansible

# Allow permissions on repository and docker image respectively 
permissions:
  contents: read
  packages: read

jobs:
  deployment:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ministryofjustice/hmpps-delius-operational-automation:0.1
    timeout-minutes: 1440
    continue-on-error: false
    steps:
      - name: Prepare Primary Inventory Name
        id: prepareprimaryname
        run: |
          echo "primaryHost=environment_name_$(echo ${{ github.event.inputs.TargetEnvironment }} | sed 's/delius-core-dev/delius_core_development_dev/;s/delius-core-test/delius_core_test_test/;s/delius-core-training/delius_core_test_training/;s/delius-core-stage/delius_core_preproduction_stage/;s/delius-core-pre-prod/delius_core_preproduction_pre_prod/;s/delius-core-prod/delius_core_production_prod/')_${{ github.event.inputs.TargetHost }}" >> $GITHUB_OUTPUT

      - name: Checkout Inventory From modernisation-platform-configuration-management
        uses: actions/checkout@v4
        with:
          repository: ministryofjustice/modernisation-platform-configuration-management
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            ansible/hosts
            ansible/group_vars
          path: inventory
          ref: ${{ github.event.inputs.SourceConfigVersion }}
          fetch-depth: 0

      - name: Check Standbydb's Configured In Ansible Inventory
        id: standbydbsconfigured
        run: |
          standbydb1Host=$(echo ${{ steps.prepareprimaryname.outputs.primaryHost }} | sed 's/primarydb/standbydb1/')
          standbydb2Host=$(echo ${{ steps.prepareprimaryname.outputs.primaryHost }} | sed 's/primarydb/standbydb2/')
          ls -l $inventory/group_vars/${{ standbydb1Host }}.yml > /dev/null 2>&1
          if [[ $? -eq 0 ]]
          then
            echo "standbydb1Host=${ standbydb1Host }"  >> $GITHUB_OUTPUT
            echo "high_availability_count=1" >> $GITHUB_OUTPUT
          fi
          ls -l $inventory/group_vars/${{ standbydb2Host }}.yml > /dev/null 2>&1
          if [[ $? -eq 0 ]]
          then
            echo "standbydb2Host=${ standbydb2Host }" >> $GITHUB_OUTPUT
            echo "high_availability_count=2" >> $GITHUB_OUTPUT
          fi

      - name: No Standbydb's Configured
        if: ${{ steps.standbydbsconfigured.outputs.standbydb1Host  == '' }}
        uses: actions/github-script@v3
        with:
          script: core.setFailed('No Standbydb's Configured)

      - name: Check Fast Start Fail Over Ansible Variable
        id: getfsfomode
        working-directory: $inventory
        run: |
          fsfo_mode=$(ansible-inventory --host ${{ steps.prepareprimaryname.outputs.primaryHost }} --vars | yq '.fsfo_mode')
          [ "$fsfo_mode" == "null" ] && echo "fsfo_mode=disabled" >> $GITHUB_OUTPUT || echo "fsfo_mode=$fsfo_mode" >> $GITHUB_OUTPUT

      - name: Checkout From modernisation-platform-configuration-management
        uses: actions/checkout@v4
        with:
          repository: ministryofjustice/modernisation-platform-configuration-management
          sparse-checkout-cone-mode: false
          sparse-checkout: playbooks/oracle_ha
          path: operations
          ref: ${{ github.event.inputs.SourceCodeVersion }}
          fetch-depth: 0

      - name: Configure AWS Credentials
        id: login-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.CICD_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CICD_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build High Availability Standby 1 Database
        if: ${{ steps.standbydbsconfigured.outputs.standbydb1Host != '' }}
        run: |
          echo "$command -i $inventory"
          # -e primary=${{ steps.prepareprimaryname.outputs.primaryHost }} \
          # -e standby=${{ steps.standbydbsconfigured.outputs.standbydb1Host }} \
          # -e method=${{ github.event.inputs.Procedure }} \
          # -e high_availability_count=${{ steps.standbydbsconfigured.outputs.high_availability_count }} \
          # -e fsfo_mode=${{ steps.getfsfomode.outputs.fsfo_mode }} \
          # -e standby_number=1 \
          # -e primary_source_type=${{ github.event.inputs.PrimarySourceType }}"
          