name: "Oracle: Database Duplicate"
run-name: "Oracle: ${{ format('{0}-{1}', github.event.inputs.TargetEnvironment, github.event.inputs.TargetHost) }}-database-duplicate"
on:
  workflow_dispatch:
    inputs:
      TargetEnvironment:
        description: "Target environment"
        required: true
        type: choice
        options:
          - "delius-core-test"
          - "delius-core-stage"
          - "delius-core-pre-prod"
      TargetHost:
        description: "Duplicate to target host"
        type: choice
        options:
          - "delius_primarydb"
          - "mis_primarydb"
      SourceDb: 
        description: "Source database to duplicate"
        type: choice
        default: ""
        options:
          - ""
          - "PRDNDA"
          - "PRDMIS"
      S3SourceBucket: 
        description: "Source s3 bucket containing backups"
        type: choice
        default: ""
        options:
          - ""
          - "prod-oracle-database-backups"
      RestoreDatetime:
        description: Restore datetime from source database, format [YYMMDDHH24MISS]"
        type: string
        default: ""
      SkipAudit: 
        description: "Skip Final Archival of AUDITED_INTERACTION (use only if target database is unavailable)"
        type : choice
        default: "no"
        options:
          - "no"
          - "yes"
      AnonymiseDelius:
        description: "Anonymise Delius data"
        type: choice
        default: "no"
        options:
          - "no"
          - "yes"
      SourceCodeVersion:
        description: "Source version for the hmpps-delius-operation-automation. Enter a pull request, branch, commit ID, tag, or reference."
        type: string
        default: "main"
      SourceConfigVersion:
        description: "Source version for the modernisation-platform-configuration-management. Enter a pull request, branch, commit ID, tag, or reference."
        type: string
        default: "main"
env:
  ansible_config: operations/playbooks/ansible.cfg 
  ansible_playbook_directory: ansible-playbook operations/playbooks/oracle_duplicate
  inventory: inventory/ansible

# Allow permissions on repository and docker image and OIDC token
permissions:
  contents: read
  packages: read
  id-token: write

jobs:          
  oracle-rman-pre-duplicate:
    name: oracle-rman-pre-duplicate
    environment: ${{ github.event.inputs.TargetEnvironment }}-preapproved
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ministryofjustice/hmpps-delius-operational-automation:0.41.0
    timeout-minutes: 1440
    continue-on-error: true
    outputs:
      SlackChannel: ${{ steps.preparation.outputs.SlackChannel }}
      DuplicateTarget: ${{ steps.preparation.outputs.DuplicateTarget }}
      JobId: ${{ github.job }}
    steps:

      - name: Output Input Parameters
        shell: bash
        run: |
          echo -e "TargetEnvironment: ${{ github.event.inputs.TargetEnvironment }}\n\
          TargetHost: ${{ github.event.inputs.TargetHost }}\n\
          SourceDb: ${{ github.event.inputs.SourceDb }}\n\
          S3SourceBucket: ${{ github.event.inputs.S3SourceBucket }}\n\
          RestoreDatetime: ${{ github.event.inputs.RestoreDatetime }}\n\
          SourceCodeVersion: ${{ github.event.inputs.SourceCodeVersion }}\n\
          SourceConfigVersion: ${{ github.event.inputs.SourceConfigVersion }}"

      - name: Prepare Duplicate Target Name and Slack Channel Name
        id: preparation
        run: |
          echo "DuplicateTarget=environment_name_$(echo ${{ github.event.inputs.TargetEnvironment}} | sed 's/delius-core-dev/delius_core_development_dev/;s/delius-core-test/delius_core_test_test/;s/delius-core-training/delius_core_test_training/;s/delius-core-stage/delius_core_preproduction_stage/;s/delius-core-pre-prod/delius_core_preproduction_pre_prod/;s/delius-core-prod/delius_core_production_prod/')_${{ github.event.inputs.TargetHost }}" >> $GITHUB_OUTPUT
          if [[ "${{ github.event.inputs.TargetEnvironment }}" == "delius-core-prod" ]]; then
            echo "SlackChannel=delius-aws-oracle-prod-alerts" >> $GITHUB_OUTPUT
          else
            echo "SlackChannel=delius-aws-oracle-dev-alerts" >> $GITHUB_OUTPUT
          fi
          exit 1

      - name: Check Restore DateTime Input
        if: ${{ github.event.inputs.RestoreDateTime != '' }}
        shell: bash
        run: |
          isDateInvalid()
          {
              DATE="${1}"

              # Time format hour[01..23]:min[01..59]:sec[01..59]
              TIMEFORMAT="(([012][0]|[01][1-9]|[2][1-3])-([012345][0-9])-([012345][0-9]))"

              # Date format day[01..31], month[01,03,05,07,08,10,12], year[1900..2099]
              DATE_1="((([123][0]|[012][1-9])|3[1])-(0[13578]|1[02])-(19|20)[0-9][0-9])"

              # Date format day[01..30], month[04,06,09,11], year[1900..2099]
              DATE_2="(([123][0]|[012][1-9])-(0[469]|11)-(19|20)[0-9][0-9])"

              # Date format day[01..28], month[02], year[1900..2099]
              DATE_3="(([12][0]|[01][1-9]|2[1-8])-02-(19|20)[0-9][0-9])"

              # Date format day[29], month[02], year[1904..2096]
              DATE_4="(29-02-(19|20(0[48]|[2468][048]|[13579][26])))"

              # Match the date in the Regex
              if [[ "${DATE}" =~ ^((${DATE_1}|${DATE_2}|${DATE_3}|${DATE_4})-${TIMEFORMAT})$ ]]
              then
                  echo "Restore Datetime ${DATE} valid"
              else
                  echo "Restore Datetime ${DATE} invalid!"
                  exit 1
              fi
          }
          isDateInvalid '${{ github.event.inputs.RestoreDateTime }}'

      - name: Checkout hmpps-delius-operation-automation
        uses: actions/checkout@v4
        with:
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            playbooks/oracle_duplicate
            playbooks/delius_users
            playbooks/awr_export
            playbooks/block_sessions
            playbooks/oem_blackout
            common/*
            playbooks/ansible.cfg
          path: operations
          ref: ${{ github.event.inputs.SourceCodeVersion }}
          fetch-depth: 0

      - name: Checkout modernisation-platform-configuration-management
        uses: actions/checkout@v4
        with:
          repository: ministryofjustice/modernisation-platform-configuration-management
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            ansible/hosts
            ansible/group_vars
          path: inventory
          ref: ${{ github.event.inputs.SourceConfigVersion }}
          fetch-depth: 0

      - name: Checkout Ansible Required Roles From modernisation-platform-configuration-management
        uses: actions/checkout@v4
        with:
          repository: ministryofjustice/modernisation-platform-configuration-management
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            ansible/roles/secretsmanager-passwords
            ansible/roles/get-modernisation-platform-facts
          path: roles
          ref: ${{ github.event.inputs.SourceConfigVersion }}
          fetch-depth: 0

      - name: Configure AWS Credentials
        id: login-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/modernisation-platform-oidc-cicd"
          role-session-name: "hmpps-delius-operational-automation-${{ github.run_number }}"
          aws-region: "eu-west-2"

      - name: Start Ansible Oracle RMAN Pre Duplicate
        shell: bash
        run: |
          export ANSIBLE_CONFIG=$ansible_config
          ln -s $PWD/roles/ansible/roles $PWD/operations/playbooks/oracle_duplicate/roles
          $ansible_playbook_directory/rman-pre-duplicate.yml -e ansible_aws_ssm_bucket_name=${{ vars.ANSIBLE_AWS_SSM_BUCKET_NAME }} -i $inventory \
          -e duplicate_target=${{ steps.preparation.outputs.DuplicateTarget }} \
          -e skip_audited_interaction_archival=${{ github.event.inputs.SkipAudit }}

  slack-notification:
    if: always() && ${{ contains(needs.*.result, 'failure') }}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ministryofjustice/hmpps-delius-operational-automation:0.41.0
    needs: ['oracle-rman-pre-duplicate']
    environment: ${{ github.event.inputs.TargetEnvironment }}-preapproved
    steps:

      - name: Configure AWS Credentials
        id: login-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/modernisation-platform-oidc-cicd"
          role-session-name: "hmpps-delius-operational-automation-${{ github.run_number }}"
          aws-region: "eu-west-2"

      - name: Get Slack Token
        id: get-slack-token
        shell: bash
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          OEM_ACCOUNT_ID=$(aws ssm get-parameter --name account_ids --region eu-west-2 --with-decryption  --output json | \
                jq '.Parameter.Value' | tr -d '\' | sed 's/^\"//' | sed 's/\"$//' | \
                jq -r 'to_entries | map(select(.key | contains("hmpps-oem-"))) | first' | jq -r '.value' )
          SECRET_ARN="arn:aws:secretsmanager:eu-west-2:${OEM_ACCOUNT_ID}:secret:/oracle/database/EMREP/shared-passwords"
          SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id "${SECRET_ARN}" --query SecretString --output json)
          SLACK_TOKEN=$(echo ${SECRET_VALUE} | jq -r | jq -r 'to_entries[] | select(.key=="slack_token").value')
          echo "slack_token=${SLACK_TOKEN}" >> $GITHUB_OUTPUT

          [ "${{ needs.oracle-rman-pre-duplicate.result }}" == "failure" ] && echo "jobid=${{ needs.oracle-rman-pre-duplicate.outputs.JobId }}" >> $GITHUB_OUTPUT

      - name: Slack Failure Notification
        id: slack
        uses: slackapi/slack-github-action@v1.25.0
        with:
            channel-id: "${{ needs.oracle-rman-pre-duplicate.outputs.SlackChannel }}"
            payload: |
              { 
                "icon_emoji":"broken_record",
                "text":"Failed RMAN Duplicate",
                "blocks":[
                  {
                    "type": "section",
                    "text": 
                    {
                      "type": "mrkdwn",
                      "text": ":no_entry: Failed RMAN Duplicate:"}
                    },
                    {
                      "type": "section",
                      "fields":[
                          {
                            "type": "mrkdwn",
                            "text": "*Workflow:*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }}>"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Job:*\n${{ steps.get-slack-token.outputs.jobid }}"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Repo:*\n${{ github.repository }}"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Duplicate Target:*\n${{ needs.oracle-rman-pre-duplicate.outputs.DuplicateTarget }}"
                          }
                        ]
                    }  
                  ]
                }
        env:
          SLACK_BOT_TOKEN: ${{ steps.get-slack-token.outputs.slack_token }}
          