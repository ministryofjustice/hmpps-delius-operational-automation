---
name: "LDAP: On Demand Backup"
permissions:
  id-token: write  # This is required for requesting the JWT
on:
  workflow_call:
    inputs:
      environment:
        description: environment to create backup in [dev|test|preprod|prod]
        required: true
        type: string
    secrets:
        PWO_PUBLIC_SLACK_WEBHOOK_URL:
            required: true

jobs:
  create-backup:
    runs-on: ubuntu-latest
    environment: delius-core-${{ inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check environment
        run: |
          if [[ ! "${{ inputs.environment }}" =~ ^(dev|test|preprod|prod)$ ]]; then
            echo "Invalid environment: ${{ inputs.environment }}"
            exit 1
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/modernisation-platform-oidc-cicd"
          role-session-name: "hmpps-delius-operational-automation-${{ github.run_number }}"
          aws-region: "eu-west-2"

      - name: Get ldap EFS FS id
        id: get-efs-id
        run: |
          echo "EFS_ID=$(aws efs describe-file-systems --query "FileSystems[]" --output json | jq -rj '.[] | select(.Name=="ldap") | .FileSystemId')" >> $GITHUB_OUTPUT

      - name: Create backup
        id: create-backup
        run: |
            echo BACKUP_JOB_ID=$(aws efs start-backup-job --resource-arn ${{ steps.get-efs-id.outputs.EFS_ID }} \
            --iam-role-arn arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ inputs.environment }}-ldap-efs-awsbackup-role \
            --backup-vault-name "${{ inputs.environment }}-ldap-efs-vault") | jq -r '.BackupJobId' >> $GITHUB_OUTPUT

      - name: Wait for backup to complete
        timeout-minutes: 10
        run: |
            while [ "$(aws backup describe-backup-job --backup-job-id 646aa307-33c7-423b-aa33-9dfdf5db72f5 | jq -rj '.State)" != "\"COMPLETED\"" ]; do
                sleep 10
            done
            echo "Backup completed"

      - name: Notify Slack
        uses: ministryofjustice/github-actions/slack-notify@main
        if: success()
        with:
          status: "success"
          message: "On-Demand LDAP backup completed successfully for ${{ inputs.environment }} environment"
          webhook-url: ${{ secrets.PWO_PUBLIC_SLACK_WEBHOOK_URL }}

      - name: Notify Slack
        uses: ministryofjustice/github-actions/slack-notify@main
        if: failure()
        with:
          status: "failure"
          message: "On-Demand LDAP backup failed for ${{ inputs.environment }} environment"
          webhook-url: ${{ secrets.PWO_PUBLIC_SLACK_WEBHOOK_URL }}