name: "Oracle: Backup Marshal"
run-name: "Oracle: Backup Marshal"
on:
  workflow_dispatch:
    inputs:
      VerboseOutput: 
        description: "Verbose Output level"
        type: choice
        options:
          - ""
          - "-v"
          - "-vv"
          - "-vvv"
          - "-vvvv"
      SourceCodeVersion:
        description: "Source version for the hmpps-delius-operation-automation. Enter a pull request, branch, commit ID, tag, or reference."
        type: string
        default: "main"
      SourceConfigVersion:
        description: "Source version for the modernisation-platform-configuration-management. Enter a pull request, branch, commit ID, tag, or reference."
        type: string
        default: "main"

# Allow permissions on repository and docker image and OIDC token
permissions:
  contents: read
  packages: read
  id-token: write  # This is required for requesting the JWT

jobs:
  collate-environments:
    name: Get Environments
    runs-on: ubuntu-latest
    outputs:
       scheduled_matrix: ${{ steps.generate-matrix.outputs.environment_maxtrix }}
    container:
      image: ghcr.io/ministryofjustice/hmpps-delius-operational-automation:0.41.0
    continue-on-error: false
    steps:

      - name: Checkout hmpps-delius-operation-automation
        uses: actions/checkout@v4
        with:
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            playbooks/oracle_backup/files/list_github_environments.py
          path: operations
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.SourceCodeVersion || 'main' }}
          fetch-depth: 0

      - name: Generate Matrix for All Environments
        id: generate-matrix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          ENVIRONMENTS=$(python operations/playbooks/oracle_backup/files/list_github_environments.py | grep -E -- "-preapproved$")
          echo "environment_matrix="$(echo $ENVIRONMENTS | tr ' ' '\n' | jq -sR 'split("\n") | map(select(. != ""))')
          echo "environment_matrix="$(echo $ENVIRONMENTS | tr ' ' '\n' | jq -sR 'split("\n") | map(select(. != ""))') >> $GITHUB_OUTPUT


# jobs:
#   prepare-run-matrix:
#     runs-on: ubuntu-latest
#     # environment: ${{needs.build_rman_target_name.outputs.TargetEnvironment}}
#     # outputs:
#     #   validate_chunks_matrix: ${{ steps.prepare-next-steps.outputs.validate_chunks_matrix }}
#     strategy:
#       matrix:

#     steps: 
#       - name: Configure AWS Credentials
#         id: login-aws
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/modernisation-platform-oidc-cicd"
#           role-session-name: "oracle-backup-marshal-${{ github.run_number }}"
#           aws-region: "eu-west-2"

  get-runtime-info:
      name: Get Runtime Info
      runs-on: ubuntu-latest
      needs: collate-environments
      strategy:
        matrix:
          value: ${{fromJson(needs.collate-environments.outputs.environment_matrix)}}
      environment: ${{ matrix.environment }}
      container:
        image: ghcr.io/ministryofjustice/hmpps-delius-operational-automation:0.41.0
      continue-on-error: false
      steps:

            - name: Read Current Backup Runtime Information into JSON Variable
              id: read-runtime-info
              run: |
                  SSM_PARAMETER_PATHS=$(aws ssm describe-parameters --query 'Parameters[*].Name' --parameter-filters "Key=Name,Option=BeginsWith,Values=/oracle-backups/" --output text)
                  SSM_PARAMETER_VALUES=$(aws ssm get-parameters --names ${SSM_PARAMETER_PATHS} --query "Parameters[*].Value" --output text)
                  echo $SSM_PARAMETER_PATHS
                  echo $SSM_PARAMETER_VALUES


  # # The following logic determines what needs to be done next:
  # # (1) Successful Backups may now proceed to Chunk Validation
  # VALIDATE_CHUNKS=$(echo $SSM_PARAMETER_VALUES | jq 'select (.FixAbsentChunks == "yes" and .Phase == "Backup" and .Status == "Success" and (.RmanTarget | contains("primarydb")))' | jq -s '.' | jq '{include: .}')
  # echo "validate_chunks_matrix="$(echo ${SCHEDULED_JSON} | sed 's/ //g') >> $GITHUB_OUTPUT

  # validate-chunks:
  #   needs: prepare-run-matrix
  #   if: ${{ needs.prepare-run-matrix.outputs.validate_chunks_matrix != '{"include":[]}' }}
  #   strategy:
  #     matrix: ${{fromJson(needs.prepare-run-matrix.outputs.validate_chunks_matrix)}}
  #   name: Validate Chunks
  #   uses:
  #     ministryofjustice/hmpps-delius-operational-automation/.github/workflows/oracle-db-validate-backups.yml@main
  #   with:
  #     TargetEnvironment: ${{ matrix.TargetEnvironment }}
  #     TargetHost: ${{ matrix.TargetHost }}
