name: "Oracle: OEM Password Rotation"
run-name: "Oracle: ${{ github.event.inputs.TargetOemEnvironment }}-oem-password-rotation"
on:
  workflow_dispatch:
    inputs:
      TargetOemEnvironment:
        description: "Target OEM Environment"
        required: true
        type: choice
        options:
          - "hmpps-oem-development"
          - "hmpps-oem-test"
          - "hmpps-oem-preproduction"
          - "hmpps-oem-production"
      TargetEnvironmentName:
        description: "Target Environment Name"
        type: choice
        options:
          - "hmpps-oem-development"
          - "hmpps-oem-test"
          - "hmpps-oem-preproduction"
          - "hmpps-oem-production"
          - "delius-core-dev"
          - "delius-core-test"
          - "delius-core-training"
          - "delius-core-stage"
          - "delius-core-preprod"
          - "delius-core-prod"
          - "delius-mis-dev"
          - "delius-mis-stage"
          - "delius-mis-preprod"
          - "delius-mis-prod"
      SyncMonitoringPasswords:
        description: "Sync EM Cloud Control Target Monitoring Passwords with Secret Manager"
        type: choice
        default: "yes"
        options:
          - "yes"
          - "no"
      RotateRMANPassword:
        description: "Rotate RMAN Catalog Password"
        type: choice
        default: "no"
        options:
          - "yes"
          - "no"
      RotateOEMPasswords:
        description: "Rotate EM Cloud Control Passwords"
        type: choice
        default: "no"
        options:
          - "yes"
          - "no"
      VerboseOutput:
        description: "Verbose Output level"
        type: choice
        default: ""
        options:
          - ""
          - "-vv"
          - "-vvv"
          - "-vvvv"
      SourceCodeVersion:
        description: "Source version for the hmpps-delius-operation-automation. Enter a pull request, branch, commit ID, tag, or reference."
        type: string
        default: "main"
      SourceConfigVersion:
        description: "Source version for the modernisation-platform-configuration-management. Enter a pull request, branch, commit ID, tag, or reference."
        type: string
        default: "main"
  workflow_call:
    inputs:
      TargetOemEnvironment:
        description: "Target environment"
        required: true
        type: string
      TargetEnvironmentName:
        description: "Target Environment Name"
        required: true
        type: string
      SyncMonitoringPasswords:
        description: "Sync EM Cloud Control Target Monitoring Passwords with Secret Manager"
        required: true
        type: string
      RotateRMANPassword:
        description: "Rotate RMAN Catalog Password"
        required: true
        type: string
      RotateOEMPasswords:
        description: "Rotate EM Cloud Control Passwords"
        required: true
        type: string

env:
  ansible_config: operations/playbooks/ansible.cfg
  command: ansible-playbook operations/playbooks/oracle_password_rotation/oem_password_rotation.yml --limit server_type_hmpps_oem
  inventory: inventory/ansible

# Allow permissions on repository and docker image and OIDC token
permissions:
  contents: read
  packages: read
  id-token: write

jobs: 
  oracle-oem-password-preparation:
    runs-on: ubuntu-latest
    continue-on-error: false
    outputs:
      TargetOemEnvironment: ${{ steps.prepare.outputs.TargetOemEnvironment }}
      TargetOemHost: ${{ steps.prepare.outputs.TargetOemHost }}
      TargetEnvironmentName: ${{ steps.prepare.outputs.TargetEnvironmentName }}
      SyncMonitoringPasswords: ${{ steps.prepare.outputs.SyncMonitoringPasswords }}
      RotateRMANPassword: ${{ steps.prepare.outputs.RotateRMANPassword }}
      RotateOEMPasswords: ${{ steps.prepare.outputs.RotateOEMPasswords }}
      VerboseOutput: ${{ steps.prepare.outputs.VerboseOutput }}
      SlackChannel: ${{ steps.prepare.outputs.SlackChannel }}
      JobId: ${{ github.job }}
    steps:

      - name: Prepare Ansbile OEM Target Host And Slack Channel
        id: prepare
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]
          then
            TargetOemEnvironment="${{ github.event.inputs.TargetOemEnvironment }}"
            TargetOemHost="environment_name_$(echo ${{ github.event.inputs.TargetOemEnvironment }}  | sed 's/-/_/g')"
            TargetEnvironmentName="${{ github.event.inputs.TargetEnvironmentName }}"
            SyncMonitoringPasswords="${{ github.event.inputs.SyncMonitoringPasswords }}"
            RotateRMANPassword="${{ github.event.inputs.RotateRMANPassword }}"
            RotateOEMPasswords="${{ github.event.inputs.RotateOEMPasswords }}"
            VerboseOutput="${{ github.event.inputs.VerboseOutput }}"
          elif [[ "${{ github.event_name }}" == "schedule" ]]
          then
            TargetOemEnvironment="${{ inputs.TargetOemEnvironment }}"
            TargetOemHost="environment_name_$(echo ${{ inputs.TargetOemEnvironment }}  | sed 's/-/_/g')"
            TargetEnvironmentName="${{ inputs.TargetEnvironmentName }}"
            SyncMonitoringPasswords="${{ inputs.SyncMonitoringPasswords }}"
            RotateRMANPassword="${{ inputs.RotateRMANPassword }}"
            RotateOEMPasswords="${{ inputs.RotateOEMPasswords }}"
            VerboseOutput=""
          fi
          echo "TargetOemEnvironment=${TargetOemEnvironment}" >> $GITHUB_OUTPUT
          echo "TargetOemHost=${TargetOemHost}" >> $GITHUB_OUTPUT
          echo "TargetEnvironmentName=${TargetEnvironmentName}" >> $GITHUB_OUTPUT
          echo "SyncMonitoringPasswords=${SyncMonitoringPasswords}" >> $GITHUB_OUTPUT
          echo "RotateRMANPassword=${RotateRMANPassword}" >> $GITHUB_OUTPUT
          echo "RotateOEMPasswords=${RotateOEMPasswords}" >> $GITHUB_OUTPUT
          echo "VerboseOutput=${VerboseOutput}" >> $GITHUB_OUTPUT

          Environment=$(echo ${TargetOemHost} | rev | cut -d'_' -f1 | rev)
          if [[ "${Environment}" == "production" ]]; then
            echo "SlackChannel=delius-aws-oracle-prod-alerts" >> $GITHUB_OUTPUT
          else
            echo "SlackChannel=delius-aws-oracle-dev-alerts" >> $GITHUB_OUTPUT
          fi

  oracle-oem-password-rotation:
    needs: oracle-oem-password-preparation
    environment: ${{ needs.oracle-oem-password-preparation.outputs.TargetOemEnvironment }}-preapproved
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ministryofjustice/hmpps-delius-operational-automation:0.78.0
    timeout-minutes: 1440
    continue-on-error: false
    outputs:
      JobId: ${{ github.job }}
    steps:

      - name: Checkout Ansible Playbooks and Roles From hmpps-delius-operation-automation
        uses: actions/checkout@v4
        with:
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            playbooks/oracle_password_rotation
            playbooks/ansible.cfg
          path: operations
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.SourceCodeVersion || 'main' }}
          fetch-depth: 0

      - name: Checkout Ansible Inventory From modernisation-platform-configuration-management
        uses: actions/checkout@v4
        with:
          repository: ministryofjustice/modernisation-platform-configuration-management
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            ansible/hosts
            ansible/group_vars
          path: inventory
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.SourceCodeVersion || 'main' }}
          fetch-depth: 0

      - name: Checkout Ansible Required Roles From modernisation-platform-configuration-management
        uses: actions/checkout@v4
        with:
          repository: ministryofjustice/modernisation-platform-configuration-management
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            ansible/roles/secretsmanager-passwords
            ansible/roles/get-modernisation-platform-facts
          path: roles
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.SourceCodeVersion || 'main' }}
          fetch-depth: 0

      - name: Configure AWS Credentials
        id: login-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/modernisation-platform-oidc-cicd"
          role-session-name: "hmpps-delius-operational-automation-${{ github.run_number }}"
          role-duration-seconds: 21600
          aws-region: "eu-west-2"

      - name: Start Ansible OEM Password Rotation
        shell: bash
        run: |
          export ANSIBLE_CONFIG=$ansible_config
          ln -s $PWD/roles/ansible/roles $PWD/operations/playbooks/oracle_password_rotation/roles
          $command -i $inventory \
          -e oem_target=${{ needs.oracle-oem-password-preparation.outputs.TargetOemHost }} \
          -e environment_name=${{ needs.oracle-oem-password-preparation.outputs.TargetEnvironmentName }}  \
          -e target_environment_name=${{ needs.oracle-oem-password-preparation.outputs.TargetEnvironmentName }} \
          -e sync_monitoring_passwords=${{ needs.oracle-oem-password-preparation.outputs.SyncMonitoringPasswords }} \
          -e rotate_rman_password=${{ needs.oracle-oem-password-preparation.outputs.RotateRMANPassword }} \
          -e rotate_oem_passwords=${{ needs.oracle-oem-password-preparation.outputs.RotateOEMPasswords }} ${{ needs.oracle-oem-password-preparation.outputs.VerboseOutput }}

  slack-notification:
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ministryofjustice/hmpps-delius-operational-automation:0.78.0
    needs: [oracle-oem-password-preparation,oracle-oem-password-rotation]
    environment: ${{ needs.oracle-oem-password-preparation.outputs.TargetOemEnvironment }}-preapproved
    env:
      TargetOemEnvironment: ${{ needs.oracle-oem-password-preparation.outputs.TargetOemEnvironment }}
    steps:

      - name: Configure AWS Credentials
        id: login-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/modernisation-platform-oidc-cicd"
          role-session-name: "hmpps-delius-operational-automation-${{ github.run_number }}"
          role-duration-seconds: 21600
          aws-region: "eu-west-2"

      - name: Get Slack Token
        id: get-slack-token
        shell: bash
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          OEM_ACCOUNT_ID=$(aws ssm get-parameter --name account_ids --region eu-west-2 --with-decryption  --output json | \
                jq '.Parameter.Value' | tr -d '\' | sed 's/^\"//' | sed 's/\"$//' | \
                jq -r 'to_entries | map(select(.key | contains("hmpps-oem-"))) | first' | jq -r '.value' )
          SECRET_ARN="arn:aws:secretsmanager:eu-west-2:${OEM_ACCOUNT_ID}:secret:/oracle/database/EMREP/shared-passwords"
          SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id "${SECRET_ARN}" --query SecretString --output json)
          SLACK_TOKEN=$(echo ${SECRET_VALUE} | jq -r | jq -r 'to_entries[] | select(.key=="slack_token").value')
          echo "slack_token=${SLACK_TOKEN}" >> $GITHUB_OUTPUT

          if [[ "${{ needs.oracle-oem-password-preparation.result }}" == "failure" ]]
          then
            echo "jobid=${{ needs.oracle-oem-password-preparation.outputs.JobId }}" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.oracle-oem-password-rotation.result }}" == "failure" ]]
          then
            echo "jobid=${{ needs.oracle-oem-password-rotation.outputs.JobId }}" >> $GITHUB_OUTPUT
          fi

      - name: Slack Failure Notification
        id: slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
            channel-id: ${{ needs.oracle-oem-password-preparation.outputs.SlackChannel }}
            payload: |
              { 
                "icon_emoji":"large_purple_circle",
                "text":"Failed OEM Password Rotation",
                "blocks":[
                  {
                    "type": "section",
                    "text": 
                    {
                      "type": "mrkdwn",
                      "text": "Failed OEM Password Rotation:"}
                    },
                    {
                      "type": "section",
                      "fields":[
                          {
                            "type": "mrkdwn",
                            "text": "*Workflow:*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }}>"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Job:*\n${{ steps.get-slack-token.outputs.jobid }}"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Repo:*\n${{ github.repository }}"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*OEM Environment:*\n${{ env.TargetOemEnvironment }}"
                          }
                        ]
                    }  
                  ]
                }
        env:
          SLACK_BOT_TOKEN: ${{ steps.get-slack-token.outputs.slack_token }}

          