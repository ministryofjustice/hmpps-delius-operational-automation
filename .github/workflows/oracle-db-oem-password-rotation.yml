name: "Oracle: OEM Password Rotation"
run-name: "Oracle: ${{ github.event.inputs.TargetOemEnvironment }}-oem-password-rotation"
on:
  workflow_dispatch:
    inputs:
      TargetOemEnvironment:
        description: "Target OEM Environment"
        required: true
        type: choice
        options:
          - "hmpps-oem-development"
          - "hmpps-oem-test"
          - "hmpps-oem-preproduction"
          - "hmpps-oem-production"
      TargetEnvironmentName:
        description: "Target Environment Name"
        type: choice
        options:
          - "hmpps-oem-development"
          - "hmpps-oem-test"
          - "hmpps-oem-preproduction"
          - "hmpps-oem-production"
          - "delius-core-dev"
          - "delius-core-test"
          - "delius-core-training"
          - "delius-core-stage"
          - "delius-core-preprod"
          - "delius-core-prod"
          - "delius-mis-dev"
          - "delius-mis-stage"
          - "delius-mis-preprod"
          - "delius-mis-prod"
      SyncMonitoringPasswords:
        description: "Sync EM Cloud Control Target Monitoring Passwords with Secret Manager"
        type: choice
        default: "yes"
        options:
          - "yes"
          - "no"
      RotateRMANPassword:
        description: "Rotate RMAN Catalog Password"
        type: choice
        default: "no"
        options:
          - "yes"
          - "no"
      RotateOEMPasswords:
        description: "Rotate EM Cloud Control Passwords"
        type: choice
        default: "no"
        options:
          - "yes"
          - "no"
      VerboseOutput:
        description: "Verbose Output level"
        type: choice
        default: ""
        options:
          - ""
          - "-vv"
          - "-vvv"
          - "-vvvv"
      SourceCodeVersion:
        description: "Source version for the hmpps-delius-operation-automation. Enter a pull request, branch, commit ID, tag, or reference."
        type: string
        default: "main"
      SourceConfigVersion:
        description: "Source version for the modernisation-platform-configuration-management. Enter a pull request, branch, commit ID, tag, or reference."
        type: string
        default: "main"
  workflow_call:
    inputs:
      TargetOemEnvironment:
        description: "Target environment"
        required: true
        type: string
      TargetEnvironmentName:
        description: "Target Environment Name"
        required: true
        type: string
      SyncMonitoringPasswords:
        description: "Sync EM Cloud Control Target Monitoring Passwords with Secret Manager"
        required: true
        type: string
      RotateRMANPassword:
        description: "Rotate RMAN Catalog Password"
        required: true
        type: string
      RotateOEMPasswords:
        description: "Rotate EM Cloud Control Passwords"
        required: true
        type: string

env:
  ansible_config: operations/playbooks/ansible.cfg
  command: ansible-playbook operations/playbooks/oracle_password_rotation/oem_password_rotation.yml
  inventory: inventory/ansible

# Allow permissions on repository and docker image and OIDC token
permissions:
  contents: read
  packages: read
  id-token: write

jobs:          
  deployment:
    name: oracle-oem-password-rotation
    environment: ${{ github.event.inputs.TargetOemEnvironment }}-preapproved
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ministryofjustice/hmpps-delius-operational-automation:0.41.0
    timeout-minutes: 1440
    continue-on-error: false
    steps:

      - name: Prepare Ansbile OEM Target Host
        id: prepareoemtargethost
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]
          then
            TargetOemHost="environment_name_$(echo ${{ github.event.inputs.TargetOemEnvironment }}  | sed 's/-/_/g')"
            TargetEnvironmentName="${{ github.event.inputs.TargetEnvironmentName }}"
            SyncMonitoringPasswords="${{ github.event.inputs.SyncMonitoringPasswords }}"
            RotateRMANPassword="${{ github.event.inputs.RotateRMANPassword }}"
            RotateOEMPasswords="${{ github.event.inputs.RotateOEMPasswords }}"
            VerboseOutput="${{ github.event.inputs.VerboseOutput }}"
          elif [[ "${{ github.event_name }}" == "schedule" ]]
          then
            TargetOemHost=="environment_name_$(echo ${{ inputs.TargetOemEnvironment }}  | sed 's/-/_/g')"
            TargetEnvironmentName="${{ inputs.TargetEnvironmentName }}"
            SyncMonitoringPasswords="${{ inputs.SyncMonitoringPasswords }}"
            RotateRMANPassword="${{ inputs.RotateRMANPassword }}"
            RotateOEMPasswords="${{ inputs.RotateOEMPasswords }}"
            VerboseOutput=""
          fi
          echo "TargetOemHost=${TargetOemHost}" >> $GITHUB_OUTPUT
          echo "TargetEnvironmentName=${TargetEnvironmentName}" >> $GITHUB_OUTPUT
          echo "SyncMonitoringPasswords=${SyncMonitoringPasswords}" >> $GITHUB_OUTPUT
          echo "RotateRMANPassword=${RotateRMANPassword}" >> $GITHUB_OUTPUT
          echo "RotateOEMPasswords=${RotateOEMPasswords}"  >> $GITHUB_OUTPUT

      - name: Checkout Ansible Playbooks and Roles From hmpps-delius-operation-automation
        uses: actions/checkout@v4
        with:
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            playbooks/oracle_password_rotation
            playbooks/ansible.cfg
          path: operations
          ref: ${{ github.event.inputs.SourceCodeVersion }}
          fetch-depth: 0

      - name: Checkout Ansible Inventory From modernisation-platform-configuration-management
        uses: actions/checkout@v4
        with:
          repository: ministryofjustice/modernisation-platform-configuration-management
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            ansible/hosts
            ansible/group_vars
          path: inventory
          ref: ${{ github.event.inputs.SourceConfigVersion }}
          fetch-depth: 0

      - name: Checkout Ansible Required Roles From modernisation-platform-configuration-management
        uses: actions/checkout@v4
        with:
          repository: ministryofjustice/modernisation-platform-configuration-management
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            ansible/roles/secretsmanager-passwords
            ansible/roles/get-modernisation-platform-facts
          path: roles
          ref: ${{ github.event.inputs.SourceConfigVersion }}
          fetch-depth: 0

      - name: Configure AWS Credentials
        id: login-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/modernisation-platform-oidc-cicd"
          role-session-name: "hmpps-delius-operational-automation-${{ github.run_number }}"
          aws-region: "eu-west-2"

      - name: Start Ansible OEM Password Rotation
        shell: bash
        run: |
          export ANSIBLE_CONFIG=$ansible_config
          ln -s $PWD/roles/ansible/roles $PWD/operations/playbooks/oracle_password_rotation/roles
          $command -i $inventory \
          -e oem_target=${{ steps.prepareoemtargethost.outputs.TargetOemHost }} \
          -e environment_name=${{ steps.prepareoemtargethost.outputs.TargetEnvironmentName }}  \
          -e target_environment_name=${{steps.prepareoemtargethost.outputs.TargetEnvironmentName }} \
          -e sync_monitoring_passwords=${{ steps.prepareoemtargethost.outputs.SyncMonitoringPasswords }} \
          -e rotate_rman_password=${{ steps.prepareoemtargethost.outputs.RotateRMANPassword }} \
          -e rotate_oem_passwords=${{ steps.prepareoemtargethost.outputs.RotateOEMPasswords }} ${{ steps.prepareoemtargethost.outputs.VerboseOutput }}
          