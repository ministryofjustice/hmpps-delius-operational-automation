name: "Oracle: Schedule Toggle Fast Start Failover"
on:
  schedule:
    - cron: '00 19 * * MON-FRI'
    - cron: '00 07 * * MON-FRI'
  workflow_dispatch:
    inputs:
      TargetEnvironment:
        description: "Target environment"
        required: true
        type: choice
        options:
          - "delius-core-dev"
          - "delius-core-test"
          - "delius-core-training"
          - "delius-core-stage"
          - "delius-core-preprod"
          - "delius-core-prod"
          - "delius-mis-dev"
          - "delius-mis-stage"
          - "delius-mis-preprod"
          - "delius-mis-prod"
      FSFOMode:
        description: "FSFO mode required."
        type: choice
        default: "disable"
        options:
          - "disable"
          - "enable"

env:
  ansible_config: operations/playbooks/ansible.cfg
  command: ansible-playbook operations/common/working_day.yml
  inventory: inventory/ansible
  # USE LOCAL VERSION OF FILE FOR DEVELOPMENT
  schedule_file: operations/.github/workflows/oracle-db-toggle-fsfo-schedule.json
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

permissions:
  contents: read
  packages: read
  id-token: write

jobs:
  prepare-run-matrix:
    runs-on: ubuntu-latest
    outputs:
      scheduled_matrix: ${{ steps.filter-toggle-fsfo-schedule.outputs.scheduled_matrix }}
    steps:

      - name: Checkout Toggle FSFO Schedule
        uses: actions/checkout@v4
        with:
          sparse-checkout-cone-mode: false
          sparse-checkout: |
             .github/workflows/oracle-db-toggle-fsfo-schedule.json
          path: operations
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.SourceCodeVersion || 'FSFO-test' }}
          fetch-depth: 0

      - name: Filter Toggle FSFO Schedule
        id: filter-toggle-fsfo-schedule
        shell: bash
        run: |
             echo "CAT $schedule_file"
             cat $schedule_file
             echo "END OF CAT"
             # Schedule an immediate run if using Workflow Dispatch, otherwise check if a run is scheduled.
             if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
                 echo "[{\"TargetEnvironment\": \"${{ inputs.TargetEnvironment }}\",\"CronSchedule\": \"IMMEDIATE\",\"Action\": \"${{ inputs.FSFOMode }}\",\"SkipNonWorkingDays\": \"false\"}]" > $schedule_file
                 cat $schedule_file
                 SCHEDULED_JSON=$(jq '.' $schedule_file | jq '{include: .}')
             else

                 echo "Schedule file is: $schedule_file"
                 echo "Contents:"
                 cat $schedule_file
                 echo "---------------------"
                 SCHEDULED_JSON=$(jq '[.[] | select (.CronSchedule=="${{ github.event.schedule }}") | {"TargetEnvironment","CronSchedule","Action","SkipNonWorkingDays"}]' $schedule_file | jq '{include: .}')

             fi
             echo ${SCHEDULED_JSON}
             echo "scheduled_matrix="$(echo ${SCHEDULED_JSON} | sed 's/ //g') >> $GITHUB_OUTPUT

  report-schedule-toggle-fsfo:
    needs: prepare-run-matrix
    runs-on: ubuntu-latest
    if: ${{ needs.prepare-run-matrix.outputs.scheduled_matrix != '{"include":[]}' }}
    steps:
      - name: Report Toggle FSFO Scheduled to Run
        id: report-run
        run: |
              echo "Running toggle FSFO for these targets: ${{ needs.prepare-run-matrix.outputs.scheduled_matrix }}"
 
  report-no-scheduled-toggle-fsfo:
    needs: prepare-run-matrix
    runs-on: ubuntu-latest
    if: ${{ needs.prepare-run-matrix.outputs.scheduled_matrix == '{"include":[]}' }}
    steps:
        - name: Report Nothing to Do
          id: report-no-run
          run: |
              echo "No target environments scheduled for toggling FSFO."
              echo "SM: ${{ needs.prepare-run-matrix.outputs.scheduled_matrix }}"
 
  run-toggle-fsfo:
      needs: prepare-filtered-run-matrix
      strategy:
        fail-fast: false
        matrix: >-
            ${{ 
              needs.prepare-filtered-run-matrix.result == 'success' &&
              needs.prepare-filtered-run-matrix.outputs.scheduled_matrix != '' &&
              fromJson(needs.prepare-run-matrix.outputs.scheduled_matrix) ||
              '{"include":[]}'
             }}
      name: Toggle FSFO
      uses:
        ./.github/workflows/oracle-db-toggle-fsfo-excluding-non-working-day.yml
      with:
        TargetEnvironment: ${{ matrix.TargetEnvironment }}
        FSFOMode: ${{ matrix.Action }}
        SkipNonWorkingDay: ${{ matrix.SkipNonWorkingDay }}
      secrets:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}