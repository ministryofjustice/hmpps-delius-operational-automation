name: "Oracle: Validate Backup"
run-name: "Oracle: ${{ github.event_name == 'workflow_dispatch' && format('{0}_{1}', github.event.inputs.TargetEnvironment, github.event.inputs.TargetHost) }}_validate_backup"
on:
  workflow_dispatch:
    inputs:
      TargetEnvironment:
        description: "Target environment"
        required: true
        type: choice
        options:
          - "delius-core-dev"
          - "delius-core-test"
          - "delius-core-training"
          - "delius-core-stage"
          - "delius-core-pre-prod"
          - "delius-core-prod"
      TargetHost:
        description: "Validate backup target host"
        required: true
        type: choice
        options: 
          - "delius_primarydb"
          - "mis_primarydb"
          - "misboe_primarydb"
          - "misdsd_primarydb"
          - "delius_standbydb1"
          - "mis_standbydb1"
          - "misboe_standbydb1"
          - "misdsd_standbydb1"
          - "delius_standbydb2"
      RestoreDatetime:
        description: "Validate backup until restore datetime [DD-MM-YYYY HH24:MI:SS]"
        type: string
        default: ""
      VerboseOutput: 
        description: "Verbose Output level"
        type: choice
        options:
          - ""
          - "-v"
          - "-vv"
          - "-vvv"
          - "-vvvv"
      SourceCodeVersion:
        description: "Source version for the hmpps-delius-operation-automation. Enter a pull request, branch, commit ID, tag, or reference."
        type: string
        default: "main"
      SourceConfigVersion:
        description: "Source version for the modernisation-platform-configuration-management. Enter a pull request, branch, commit ID, tag, or reference."
        type: string
        default: "main"

  workflow_call:
    inputs:
      TargetEnvironment:
        description: "Target environment"
        required: true
        type: string
      TargetHost:
        description: "Validate backup target host"
        required: true
        type: string

env:
  ansible_config: operations/playbooks/ansible.cfg
  command: ansible-playbook operations/playbooks/oracle_backup/validate_backup.yml
  inventory: inventory/ansible

# Allow permissions on repository and docker image respectively 
permissions:
  contents: read
  packages: read

jobs:
  build_rman_target_name:
    runs-on: ubuntu-latest
    outputs:
      RmanTarget: ${{ steps.preparermantargetname.outputs.RmanTarget }}
      TargetEnvironment: ${{ steps.preparermantargetname.outputs.TargetEnvironment }}
    continue-on-error: false
    steps:

      - name: Check Restore DateTime Input
        if: ${{ (github.event_name == 'workflow_dispatch') && (github.event.inputs.RestoreDatetime != '') }}
        run: |
          isDateInvalid()
          {
              DATE="${1}"

              # Time format hour[01..23]:min[01..59]:sec[01..59]
              TIMEFORMAT="(([012][0]|[01][1-9]|[2][1-3]):([012345][0-9]):([012345][0-9]))"

              # Date format day[01..31], month[01,03,05,07,08,10,12], year[1900..2099]
              DATE_1="((([123][0]|[012][1-9])|3[1])-(0[13578]|1[02])-(19|20)[0-9][0-9])"

              # Date format day[01..30], month[04,06,09,11], year[1900..2099]
              DATE_2="(([123][0]|[012][1-9])-(0[469]|11)-(19|20)[0-9][0-9])"

              # Date format day[01..28], month[02], year[1900..2099]
              DATE_3="(([12][0]|[01][1-9]|2[1-8])-02-(19|20)[0-9][0-9])"

              # Date format day[29], month[02], year[1904..2096]
              DATE_4="(29-02-(19|20(0[48]|[2468][048]|[13579][26])))"

              # Match the date in the Regex
              if [[ "${DATE}" =~ ^((${DATE_1}|${DATE_2}|${DATE_3}|${DATE_4}) ${TIMEFORMAT})$ ]]
              then
                  echo "Restore Datetime ${DATE} valid"
                  exit 1
              else
                  echo "Restore Datetime ${DATE} invalid!"
                  exit 1
              fi
          }
          isDateInvalid '${{ github.event.inputs.RestoreDatetime }}'

      - name: Prepare Rman Target Name
        id: preparermantargetname
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]
          then
            TargetHost="${{ github.event.inputs.TargetHost }}"
            TargetEnvironment="${{ github.event.inputs.TargetEnvironment }}"
          elif [[ "${{ github.event_name }}" == "schedule" ]]
          then
            TargetHost="${{ inputs.TargetHost }}"
            TargetEnvironment="${{ inputs.TargetEnvironment }}"
          fi;
          RmanTarget="environment_name_$(echo $TargetEnvironment | sed 's/delius-core-dev/delius_core_development_dev/;s/delius-core-test/delius_core_test_test/;s/delius-core-training/delius_core_test_training/;s/delius-core-stage/delius_core_preproduction_stage/;s/delius-core-pre-prod/delius_core_preproduction_pre_prod/;s/delius-core-prod/delius_core_production_prod/')_$TargetHost"
          echo "RmanTarget=$RmanTarget" >> $GITHUB_OUTPUT
          echo "TargetEnvironment=$TargetEnvironment" >> $GITHUB_OUTPUT
          
  deployment:
    name: oracle-validate-backup
    needs: build_rman_target_name
    environment: ${{ needs.build_rman_target_name.outputs.TargetEnvironment}}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ministryofjustice/hmpps-delius-operational-automation:0.1
    timeout-minutes: 1440
    env:
      RmanTarget: ${{needs.build_rman_target_name.outputs.RmanTarget}}
    continue-on-error: false
    steps:

      - name: Checkout hmpps-delius-operation-automation
        uses: actions/checkout@v4
        with:
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            playbooks/oracle_backup
          path: operations
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.SourceCodeVersion || 'main' }}
          fetch-depth: 0

      - name: Checkout modernisation-platform-configuration-management
        uses: actions/checkout@v4
        with:
          repository: ministryofjustice/modernisation-platform-configuration-management
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            ansible/hosts
            ansible/group_vars
          path: inventory
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.SourceConfigVersion || 'main' }}
          fetch-depth: 0

      - name: Configure AWS Credentials
        id: login-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.CICD_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CICD_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Start Ansible Validate Backup
        run: $command -i $inventory -e rman_target=$RmanTarget $VerboseOutput
          