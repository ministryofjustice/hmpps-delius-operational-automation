name: "Oracle: Validate Backup"
run-name: "Oracle: ${{ github.event_name == 'workflow_dispatch' && format('{0}_{1}', github.event.inputs.TargetEnvironment, github.event.inputs.TargetHost) }}_validate_backup"
on:
  workflow_dispatch:
    inputs:
      TargetEnvironment:
        description: "Target environment"
        required: true
        type: choice
        options:
          - "delius-core-dev"
          - "delius-core-test"
          - "delius-core-training"
          - "delius-core-stage"
          - "delius-core-pre-prod"
          - "delius-core-prod"
      TargetHost:
        description: "Validate backup target host"
        required: true
        type: choice
        options: 
          - "delius_primarydb"
          - "mis_primarydb"
          - "misboe_primarydb"
          - "misdsd_primarydb"
          - "delius_standbydb1"
          - "mis_standbydb1"
          - "misboe_standbydb1"
          - "misdsd_standbydb1"
          - "delius_standbydb2"
          - "Random Delius Standby"
      RestoreDatetime:
        description: "Validate backup until restore datetime [DD-MM-YYYY HH24:MI:SS]"
        type: string
        default: ""
      VerboseOutput: 
        description: "Verbose Output level"
        type: choice
        options:
          - ""
          - "-v"
          - "-vv"
          - "-vvv"
          - "-vvvv"
      SourceCodeVersion:
        description: "Source version for the hmpps-delius-operation-automation. Enter a pull request, branch, commit ID, tag, or reference."
        type: string
        default: "main"
      SourceConfigVersion:
        description: "Source version for the modernisation-platform-configuration-management. Enter a pull request, branch, commit ID, tag, or reference."
        type: string
        default: "main"

  workflow_call:
    inputs:
      TargetEnvironment:
        description: "Target environment"
        required: true
        type: string
      TargetHost:
        description: "Validate backup target host"
        required: true
        type: string

env:
  ansible_config: operations/playbooks/ansible.cfg
  command: ansible-playbook operations/playbooks/oracle_backup/validate_backup.yml -e ansible_aws_ssm_bucket_name=${{ vars.ANSIBLE_AWS_SSM_BUCKET_NAME }}
  inventory: inventory/ansible

# Allow permissions on repository and docker image respectively 
permissions:
  contents: read
  packages: read
  id-token: write

jobs:
  build_rman_target_name:
    runs-on: ubuntu-latest
    outputs:
      RmanTarget: ${{ steps.preparermantargetname.outputs.RmanTarget }}
      TargetEnvironment: ${{ steps.preparermantargetname.outputs.TargetEnvironment }}-preapproved
      SlackChannel: ${{ steps.prepare-slack-channel-name.outputs.SlackChannel }}
    continue-on-error: false
    steps:

      - name: Prepare Slack Channel Name
        id: prepare-slack-channel-name
        run: |
             if [[ "${{ github.event.inputs.TargetEnvironment }}" == "delius-core-prod" ]]; then
                echo "SlackChannel=delius-aws-oracle-prod-alerts" >> $GITHUB_OUTPUT
             else
                echo "SlackChannel=delius-aws-oracle-dev-alerts" >> $GITHUB_OUTPUT
             fi

      - name: Check Restore DateTime Input
        if: ${{ (github.event_name == 'workflow_dispatch') && (github.event.inputs.RestoreDatetime != '') }}
        run: |
          isDateInvalid()
          {
              DATE="${1}"

              # Time format hour[01..23]:min[01..59]:sec[01..59]
              TIMEFORMAT="(([012][0]|[01][1-9]|[2][1-3]):([012345][0-9]):([012345][0-9]))"

              # Date format day[01..31], month[01,03,05,07,08,10,12], year[1900..2099]
              DATE_1="((([123][0]|[012][1-9])|3[1])-(0[13578]|1[02])-(19|20)[0-9][0-9])"

              # Date format day[01..30], month[04,06,09,11], year[1900..2099]
              DATE_2="(([123][0]|[012][1-9])-(0[469]|11)-(19|20)[0-9][0-9])"

              # Date format day[01..28], month[02], year[1900..2099]
              DATE_3="(([12][0]|[01][1-9]|2[1-8])-02-(19|20)[0-9][0-9])"

              # Date format day[29], month[02], year[1904..2096]
              DATE_4="(29-02-(19|20(0[48]|[2468][048]|[13579][26])))"

              # Match the date in the Regex
              if [[ "${DATE}" =~ ^((${DATE_1}|${DATE_2}|${DATE_3}|${DATE_4}) ${TIMEFORMAT})$ ]]
              then
                  echo "Restore Datetime ${DATE} valid"
              else
                  echo "Restore Datetime ${DATE} invalid!"
                  exit 1
              fi
          }
          isDateInvalid '${{ github.event.inputs.RestoreDatetime }}'

      - name: Prepare Rman Target Name
        id: preparermantargetname
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]
          then
            TargetHost="${{ github.event.inputs.TargetHost }}"
            TargetEnvironment="${{ github.event.inputs.TargetEnvironment }}"
          else
            TargetHost="${{ inputs.TargetHost }}"
            TargetEnvironment="${{ inputs.TargetEnvironment }}"
          fi;
          RmanTarget="environment_name_$(echo $TargetEnvironment | sed 's/delius-core-dev/delius_core_development_dev/;s/delius-core-test/delius_core_test_test/;s/delius-core-training/delius_core_test_training/;s/delius-core-stage/delius_core_preproduction_stage/;s/delius-core-pre-prod/delius_core_preproduction_pre_prod/;s/delius-core-prod/delius_core_production_prod/')_$TargetHost"
          echo "RmanTarget=$RmanTarget" >> $GITHUB_OUTPUT
          echo "TargetEnvironment=$TargetEnvironment" >> $GITHUB_OUTPUT
          
  deployment:
    name: oracle-validate-backup
    needs: build_rman_target_name
    environment: ${{ needs.build_rman_target_name.outputs.TargetEnvironment}}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ministryofjustice/hmpps-delius-operational-automation:0.41.0
    timeout-minutes: 1440
    env:
      RmanTarget: ${{ needs.build_rman_target_name.outputs.RmanTarget }}
      SlackChannel: ${{ needs.build_rman_target_name.outputs.SlackChannel }}
    continue-on-error: false
    steps:

      - name: Checkout hmpps-delius-operation-automation
        uses: actions/checkout@v4
        with:
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            playbooks/oracle_backup
            playbooks/ansible.cfg
          path: operations
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.SourceCodeVersion || 'main' }}
          fetch-depth: 0

      - name: Checkout Ansible Inventory From modernisation-platform-configuration-management
        uses: actions/checkout@v4
        with:
          repository: ministryofjustice/modernisation-platform-configuration-management
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            ansible/hosts
            ansible/group_vars
          path: inventory
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.SourceConfigVersion || 'main' }}
          fetch-depth: 0

      - name: Checkout Ansible Required Roles From modernisation-platform-configuration-management
        uses: actions/checkout@v4
        with:
          repository: ministryofjustice/modernisation-platform-configuration-management
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            ansible/roles/secretsmanager-passwords
            ansible/roles/get-modernisation-platform-facts
          path: roles
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.SourceConfigVersion || 'main' }}
          fetch-depth: 0

      - name: Install yq
        uses: dcarbone/install-yq-action@v1.1.1
        with:
          download-compressed: true
          version: "v4.35.1"
          force: true

      - name: Randomize TargetHost If Specified
        if: ${{ contains( env.RmanTarget,'Random') }}
        working-directory: ${{ env.inventory }}
        id: randomizetargethost
        run: |
          databasetype=$(echo ${RmanTarget} | sed 's/^.*_Random \(.*\) Standby$/\1/' | tr '[:upper:]' '[:lower:]')
          prefix=$(echo ${RmanTarget} | sed 's/^\(.*\)_Random \(.*\) Standby$/\1/' |  tr '[:upper:]' '[:lower:]')
          high_availability_count=$(yq .high_availability_count.${databasetype} group_vars/${prefix}_all.yml)
          [[ ${high_availability_count} -gt 0 ]] && RmanTarget="${prefix}_${databasetype}_standbydb$(($RANDOM % ${high_availability_count} + 1 ))"
          echo "RmanTarget=$RmanTarget" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        id: login-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/modernisation-platform-oidc-cicd"
          role-session-name: "hmpps-delius-operational-automation-${{ github.run_number }}"
          aws-region: "eu-west-2"

      - name: Start Ansible Validate Backup
        id: validate-backup
        run: |
          [[ ! -z ${{ steps.randomizetargethost.outputs.RmanTarget }} ]] && RmanTarget="${{ steps.randomizetargethost.outputs.RmanTarget }}"
          export ANSIBLE_CONFIG=$ansible_config
          ln -s $PWD/roles/ansible/roles $PWD/operations/playbooks/oracle_backup/roles
          $command -i $inventory -e ansible_aws_ssm_bucket_name=${{ vars.ANSIBLE_AWS_SSM_BUCKET_NAME }} -e rman_target=$RmanTarget $VerboseOutput

      - name: Get Slack Token
        id: get-slack-token
        if: failure()
        run: |
               ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
               OEM_ACCOUNT_ID=$(aws ssm get-parameter --name account_ids --region eu-west-2 --with-decryption  --output json | \
                     jq '.Parameter.Value' | tr -d '\' | sed 's/^\"//' | sed 's/\"$//' | \
                     jq -r 'to_entries | map(select(.key | contains("hmpps-oem-"))) | first' | jq -r '.value' )
               SECRET_ARN="arn:aws:secretsmanager:eu-west-2:${OEM_ACCOUNT_ID}:secret:/oracle/database/EMREP/shared-passwords"
               SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id "${SECRET_ARN}" --query SecretString --output json)
               SLACK_TOKEN=$(echo ${SECRET_VALUE} | jq -r | jq -r 'to_entries[] | select(.key=="slack_token").value')
               echo "slack_token=${SLACK_TOKEN}" >> $GITHUB_OUTPUT

      - name: Slack Failure Notification
        id: slack
        if: failure()
        uses: slackapi/slack-github-action@v1.25.0
        with:
            channel-id: "${{ env.SlackChannel }}"
            payload: |
              {"icon_emoji":"broken_record","text":"Failed Backup Validation","blocks":[{"type": "section","text": {"type": "mrkdwn","text": ":no_entry: Failed Backup Validation:"}},{"type": "section","fields":[{"type": "mrkdwn","text": "*Workflow:*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }}>"},{"type": "mrkdwn","text": "*Job:*\n${{ github.job }}"},{"type": "mrkdwn","text": "*Repo:*\n${{ github.repository }}"},{"type": "mrkdwn","text": "*Rman Target:*\n${{ env.RmanTarget }}"}]}]}
        env:
          SLACK_BOT_TOKEN: ${{ steps.get-slack-token.outputs.slack_token }}