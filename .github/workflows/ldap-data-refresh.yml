---
name: ldap-data-refresh
permissions:
  id-token: write  # This is required for requesting the JWT
on:
  workflow_dispatch:
    inputs:
      source_env:
        description: environment to copy data from [dev|test|preprod|prod]
        required: true
        type: choice
        options:
          - dev
          - test
          - preprod
          - prod
      destination_env:
        description: environment to copy data to [dev|test|preprod|prod]
        required: true
        type: choice
        options:
          - dev
          - test
          - preprod
          - prod
      source_recovery_point_id:
        description: AWS Backup ID of the source EFS backup. Leaving this blank will use the latest backup
        required: false
        type: string

jobs:
  pre-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Check source and destination environments are different
        run: |
          if [[ "${{ github.event.inputs.source_env }}" == "${{ github.event.inputs.destination_env }}" ]]; then
            echo "Source and destination environments must be different"
            exit 1
          fi
      - name: Check that copy is valid
        run: |
          source_env="${{ github.event.inputs.source_env }}"
          destination_env="${{ github.event.inputs.destination_env }}"
          
          if [[ "${source_env}" == "production-prod" && "${destination_env}" != "preproduction-preprod" ]]; then
            echo "Cannot copy from prod to ${destination_env}"
            exit 1
          fi
          
          env_list=(dev test preprod prod) 
          
          # Check that the destination environment is not a higher environment than the source environment
          
          # find the index of the source environment, usage `index $item $list` - see https://stackoverflow.com/a/30772014
          index()
          {
              local word
              local item
              local idx
          
              word=$1
              shift
              item=$(printf '%s\n' "$@" | fgrep -nx "$word")
              let idx=${item%%:*}-1
              echo $idx
          }
          
          source_env_index=$(index "${{ github.event.inputs.source_env }}" env_list)
          destination_env_index=$(index "${{ github.event.inputs.destination_env }}" env_list)
          
          if [ "${source_env_index}" -lt "${destination_env_index}" ]; then
            echo "Destination environment must be a higher environment than the source environment"
            exit 1
          fi
                    
          echo "Copying from ${source_env} to ${destination_env}"
  destination-pre:
    needs:
        - pre-checks
    runs-on: ubuntu-latest
    environment: delius-core-${{ github.event.inputs.destination_env }}
    steps:
      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/modernisation-platform-oidc-cicd"
          role-session-name: githubactionsrolesession
          aws-region: "eu-west-2"

      - name: Scale ECS Service to 0
        id: scale-ecs-service
        run: |
          aws ecs update-service --cluster delius-core-${{ github.event.inputs.destination_env }}-cluster --service delius-core-${{ github.event.inputs.destination_env }}-openldap --desired-count 0

      - name: Confirm ECS Service is scaled to 0
        id: confirm-ecs-service-scaled
        run: |
          while true; do
            DESIRED_COUNT=$(aws ecs describe-services --cluster delius-core-${{ github.event.inputs.destination_env }}-cluster --services delius-core-${{ github.event.inputs.destination_env }}-openldap --query 'services[0].desiredCount' --output text)
            if [[ "${DESIRED_COUNT}" == "0" ]]; then
              echo "DESIRED_COUNT=${DESIRED_COUNT}" >> $GITHUB_OUTPUT
              break
            else
              echo "DESIRED_COUNT=${DESIRED_COUNT}"
              sleep 10
            fi
          done
          echo "ECS Service scaled to 0"
  source:
    needs:
      - pre-checks
    runs-on: ubuntu-latest
    environment: delius-core-${{ github.event.inputs.source_env }}
    steps:
      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/modernisation-platform-oidc-cicd"
          role-session-name: githubactionsrolesession
          aws-region: "eu-west-2"

      - name: install aws-cli
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          sudo pip3 install awscli

      - name: Use latest recovery point arn
        if: ${{ github.event.inputs.source_recovery_point_id == '' }}
        run: |
            echo "No RECOVERY_POINT_ARN ID provided, using latest backup"
            echo RECOVERY_POINT_ARN=$(aws backup list-recovery-points-by-backup-vault --backup-vault-name ${{ github.event.inputs.source_env }}-ldap-efs-backup-vault --query 'reverse(sort_by(RecoveryPoints[?ResourceType==`EFS`], &CreationDate))[0].RecoveryPointArn' --output text | head -n 1) >> $GITHUB_ENV

      - name: Use provided recovery point arn
        if: ${{ github.event.inputs.source_recovery_point_id != '' }}
        run: echo RECOVERY_POINT_ARN=arn:aws:backup:eu-west-2:${{ vars.AWS_ACCOUNT_ID }}:recovery-point:${{ github.event.inputs.source_recovery_point_id }} >> $GITHUB_ENV

      - name: Get the original EFS id
        run: |
            echo EFS_FILE_SYSTEM_ID=$(aws efs describe-file-systems --creation-token ${{ github.event.inputs.source_env }}-ldap --output text --query 'FileSystems[0].FileSystemId') >> $GITHUB_ENV

      - name: Create a temporary EFS resource with AWS Backup recovery point
        id: create-efs-from-backup
        run: |
          echo RESTORE_JOB_ID=$(aws backup start-restore-job --recovery-point-arn ${{ env.RECOVERY_POINT_ARN }} --iam-role-arn arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/modernisation-platform-oidc-cicd --metadata file-system-id=${{ env.EFS_FILE_SYSTEM_ID }},newFileSystem=true,CreationToken=gha-ldap-data-refresh-${{github.run_id }},Encrypted=false,PerformanceMode=generalPurpose --resource-type EFS --no-copy-source-tags-to-restored-resource --output text --query 'RestoreJobId') >> $GITHUB_OUTPUT
          
      - name: Wait for restore to complete
        id: wait-for-restore
        run: |
          while true; do
            RESTORE_JOB_STATUS=$(aws backup describe-restore-job --restore-job-id ${{ steps.create-efs-from-backup.outputs.RESTORE_JOB_ID }} --output text --query 'Status')
            if [[ "${RESTORE_JOB_STATUS}" == "COMPLETED" ]]; then
              echo "RESTORE_JOB_STATUS=${RESTORE_JOB_STATUS}" >> $GITHUB_OUTPUT
              break
            elif [[ "${RESTORE_JOB_STATUS}" == "ABORTED" ]]; then
              echo "RESTORE_JOB_STATUS=${RESTORE_JOB_STATUS}" >> $GITHUB_OUTPUT
              exit 1
            else
              echo "RESTORE_JOB_STATUS=${RESTORE_JOB_STATUS}"
              sleep 10
            fi
          done

      - name: Get temp EFS ID
        id: get-temp-efs-id
        run: |
          echo TEMP_EFS_ID=$(aws efs describe-file-systems --creation-token gha-ldap-data-refresh-${{github.run_id }} --output text --query 'FileSystems[0].FileSystemId') >> $$GITHUB_ENV

      - name: Create datasync location for temp efs
        id: create-datasync-location
        run: |
          echo DATASYNC_SOURCE_LOCATION_ARN=$(aws datasync create-location-efs --efs-file-system-arn arn:aws:elasticfilesystem:eu-west-2:${{ vars.AWS_ACCOUNT_ID }}:file-system/${{ steps.get-temp-efs-id.outputs.TEMP_EFS_ID }} --subdirectory / --tags Key=Name,Value=gha-ldap-data-refresh-${{github.run_id }} --output text --query 'LocationArn') >> $GITHUB_OUTPUT

      - name: Create datasync location for destination efs
        id: create-datasync-destination-location
        run: |
          echo DATASYNC_DESTINATION_LOCATION_ARN=$(aws datasync create-location-efs --efs-file-system-arn arn:aws:elasticfilesystem:eu-west-2:${{ vars.AWS_ACCOUNT_ID }}:file-system/${{ secrets.EFS_FILE_SYSTEM_ID }} --subdirectory / --tags Key=Name,Value=gha-ldap-data-refresh-${{github.run_id }} --output text --query 'LocationArn') >> $GITHUB_OUTPUT

      - name: Create datasync task
        id: create-datasync-task
        run: |
          echo DATASYNC_TASK_ARN=$(aws datasync create-task --source-location-arn ${{ steps.create-datasync-location.outputs.DATASYNC_SOURCE_LOCATION_ARN }} --destination-location-arn ${{ steps.create-datasync-destination-location.outputs.DATASYNC_DESTINATION_LOCATION_ARN }} --cloud-watch-log-group-arn arn:aws:logs:eu-west-2:${{ vars.AWS_ACCOUNT_ID }}:log-group:datasync --name gha-ldap-data-refresh-${{github.run_id }} --output text --query 'TaskArn') >> $GITHUB_OUTPUT

      - name: Wait for datasync task to complete
        id: wait-for-datasync-task
        run: |
          while true; do
            echo DATASYNC_TASK_STATUS=$(aws datasync describe-task --task-arn ${{ steps.create-datasync-task.outputs.DATASYNC_TASK_ARN }} --output text --query 'Status')
            if [[ "${DATASYNC_TASK_STATUS}" == "AVAILABLE" ]]; then
              echo "DATASYNC_TASK_STATUS=${DATASYNC_TASK_STATUS}" >> $GITHUB_OUTPUT
              break
            elif [[ "${DATASYNC_TASK_STATUS}" == "ERROR" ]]; then
              echo "DATASYNC_TASK_STATUS=${DATASYNC_TASK_STATUS}" >> $GITHUB_OUTPUT
              exit 1
            else
              echo "DATASYNC_TASK_STATUS=${DATASYNC_TASK_STATUS}"
              sleep 10
            fi
          done
          echo "Datasync task from ${{ github.event.inputs.source_env }} to ${{ github.event.inputs.destination_env }} completed. Switching to destination account"
  destination-post:
    needs:
      - source
      - destination-pre
    runs-on: ubuntu-latest
    environment: delius-core-${{ github.event.inputs.destination_env }}
    steps:
      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/modernisation-platform-oidc-cicd"
          role-session-name: githubactionsrolesession
          aws-region: "eu-west-2"

      - name: install aws-cli
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          sudo pip3 install awscli
      - name: install aws-cli
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          sudo pip3 install awscli

      - name: Scale ECS Service back to 1
        id: scale-ecs-service
        run: |
          aws ecs update-service --cluster delius-core-${{ github.event.inputs.destination_env }}-cluster --service delius-core-${{ github.event.inputs.destination_env }}-openldap --desired-count 1
          echo "ECS Service scaled back to 1"

      - name: Ensure service stability
        run: |
          aws ecs wait services-stable --cluster delius-core-${{ github.event.inputs.destination_env }}-cluster --services delius-core-${{ github.event.inputs.destination_env }}-openldap
          echo "ECS Service stable"
          echo "Data refresh complete"
