---
name: "LDAP: Data Refresh"
permissions:
  id-token: write  # This is required for requesting the JWT
on:
  workflow_dispatch:
    inputs:
      source_env:
        description: environment to copy data from [dev|test|preprod|prod]
        required: true
        type: choice
        options:
          - dev
          - test
          - preprod
          - prod
      destination_env:
        description: environment to copy data to [dev|test|preprod|prod]
        required: true
        type: choice
        options:
          - dev
          - test
          - preprod
      source_recovery_point_id:
        description: AWS Backup ID of the source EFS backup. Leaving this blank will use the latest backup
        required: false
        type: string
      test_users:
        description: Test users to export and re-import so they are not overwritten by the refresh
        required: false # but required in preprod
        type: string

jobs:
  pre-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Check source and destination environments are different
        run: |
          if [[ "${{ github.event.inputs.source_env }}" == "${{ github.event.inputs.destination_env }}" ]]; then
            echo "Source and destination environments must be different"
            exit 1
          fi
      - name: Check that copy is valid
        run: |
          source_env="${{ github.event.inputs.source_env }}"
          destination_env="${{ github.event.inputs.destination_env }}"
          
          if [[ "${source_env}" == "prod" && "${destination_env}" != "preprod" ]]; then
            echo "Cannot copy from prod to ${destination_env}"
            exit 1
          fi
          
          env_list=("dev" "test" "preprod" "prod") 
                   
          index_of() {
            local word="$1"
            shift
            local idx=-1
          
            for ((i=0; i<=$#; i++)); do
              if [ "${!i}" = "$word" ]; then
                idx=$i
                break
              fi
            done
          
            echo $idx
          }

          source_env_index=$(index_of "${{ github.event.inputs.source_env }}" "${env_list[@]}")
          destination_env_index=$(index_of "${{ github.event.inputs.destination_env }}" "${env_list[@]}")
          
          echo "source_env_index=${source_env_index}"
          echo "destination_env_index=${destination_env_index}"
          
          if [ "${source_env_index}" -lt "${destination_env_index}" ]; then
            echo "Destination environment must be a higher environment than the source environment"
            exit 1
          fi
          
          # check that the difference between the two indexes is 1
          # enable this once migrated
          #          if [ $((source_env_index - destination_env_index)) -ne 1 ]; then
          #              echo "Data refresh can only be performed between adjacent environments"
          #              exit 1
          #          fi
          
          echo "Copying from ${source_env} to ${destination_env}"
  test-user-export:
    needs:
      - pre-checks
    runs-on: ubuntu-latest
    environment: delius-core-${{ github.event.inputs.destination_env }}-preapproved
    steps:
      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/modernisation-platform-oidc-cicd"
          role-session-name: "hmpps-delius-operational-automation-${{ github.run_number }}"
          aws-region: "eu-west-2"

      - name: Get list of test users
        run: |
          destination_env="${{ github.event.inputs.destination_env }}"
          TEST_USERS="${{ github.event.inputs.test_users }}"

          ##if [[ "${destination_env}" == "preprod" ]]; then
          if [[ "${destination_env}" == "dev" ]]; then
            echo "Checking test users have been supplied..."
            if [[ -z "${TEST_USERS}" ]]; then
              # try get list of users from AWS secret

              SECRET_NAME="ldap_test_users"
              REGION="eu-west-2"

              TEST_USERS=$(aws secretsmanager get-secret-value \
                --secret-id "$SECRET_NAME" \
                --region "$REGION" \
                --query SecretString \
                --output text 2>/tmp/aws_secret_error)

              if [[ $? -ne 0 ]]; then
                echo "Failed to retrieve test users from AWS Secrets Manager:"
                cat /tmp/aws_secret_error
                echo "Test users list has not been supplied, cancelling run..." 
                exit 1
              else
                echo "Test users list supplied, number of users is: $(echo ${TEST_USERS} | sed '/^\s*$/d' | wc -l)"
              fi
            else
              echo "Test users list supplied, number of users is: $(echo ${TEST_USERS} | sed '/^\s*$/d' | wc -l)"
            fi
          else
            echo "Destination is not pre-prod, skipping..."
          fi

          echo "TEST_USERS=$TEST_USERS" >> $GITHUB_ENV 
      - name: Export test users
        run: |
          destination_env="${{ github.event.inputs.destination_env }}"
          cluster="delius-core-${destination_env}-cluster"
          service="${destination_env}-ldap"

          aws ecs execute-command \
            --cluster "${cluster}" \
            --task $(aws ecs list-tasks --cluster "${cluster}" --service-name "${service}" --query "taskArns[0]" --output text) \
            --container ldap \
            --command "bash -c '
              echo \"TEST_USERS: \$TEST_USERS\" >> /tmp/remote_command

              user_array=()
              while IFS= read -r line; do
                user_array+=(\"\$line\")
              done <<< \"\$TEST_USERS\"

              echo \"user_array is: \${user_array[@]}\" >> /tmp/remote_command

              #[ -f testusers.ldif ] && mv testusers.ldif testusers.ldif.bak

              #for username in \"\${user_array[@]}\"; do
              #  dn=\"cn=\$username,ou=Users,dc=moj,dc=com\"
              #  echo \"Getting user \$dn...\"
              #  ldapsearch -Y external -Q -H ldapi:// -LLL -b \"\$dn\" >> testusers.ldif
              #done

              #awk '\''!NF {delete seen; print; next} !seen[\$0]++'\'' testusers.ldif > testusers.no-duplicates.ldif
              #mv testusers.no-duplicates.ldif testusers.ldif
            '" \
            --interactive