name: Delius Core ECS - Update Task Definition
on:
  workflow_dispatch:
    inputs:
        environment:
            required: true
            type: choice
            options:
              - "dev"
        service-name:
            required: true
            type: choice
            options:
              - "gdpr-api"
              - "gdpr-ui"
              - "merge-api"
              - "merge-ui"
              - "newtech"
              - "pdf-creation"
              - "pwd-manager"
              - "user-management"
              - "weblogic"
              - "weblogic-eis"
        image-tag:
            required: false
            type: string
            default: 'latest'
            
jobs:
    deploy:
        name: Create ECS Task in delius-core ${{ github.event.inputs.environment }}
        runs-on: ubuntu-latest
        environment: delius-core-${{ github.event.inputs.environment }}
        permissions:
          id-token: write
        steps:
          - name: Checkout code
            uses: actions/checkout@v4
            
          - name: Configure AWS Credentials
            uses: aws-actions/configure-aws-credentials@v4
            with:
              role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/modernisation-platform-oidc-cicd"
              role-session-name: "hmpps-delius-operational-automation-${{ github.run_number }}"
              aws-region: "eu-west-2"
          - name: Set cluster ARN
            id: set-cluster-arn
            run: |
                echo "CLUSTER_ARN=delius-core-${{ github.event.inputs.environment }}-cluster" >> $GITHUB_OUTPUT
          - name: Get security groups and subnet ids
            id: get-ids
            run: |
                echo "SEC_GROUPS=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=ecs-service-${{github.event.inputs.service-name}}-${{ github.event.inputs.environment }}" --query "SecurityGroups[].GroupId" --output json | jq -s -c '.[]')" >> $GITHUB_OUTPUT
                echo "SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=tag:Name,Values=*-general-private-*" --query "Subnets[].SubnetId" --output json | jq -s -c '.[]')" >> $GITHUB_OUTPUT

          - name: Template task def
            uses: christherama/render-json-template@v1
            id: render
            with:
                # Path to JSON file serving as the template for rendering an output file. Required.
                json-file-path: ./docker/delius-core/delius-core-task-def.json
                # Multi-line string containing key/value pairs of JSON property paths and desired property values
                field-value-pairs: |
                    $.executionRoleArn: "arn:aws:iam::${{vars.AWS_ACCOUNT_ID}}:role/${{ github.event.inputs.environment }}-${{github.event.inputs.service-name}}-ecs-task-exec"
                    $.taskRoleArn: "arn:aws:iam::${{vars.AWS_ACCOUNT_ID}}:role/${{ github.event.inputs.environment }}-${{github.event.inputs.service-name}}-ecs-task"
                  
                    $.containerDefinitions[0].image: "${{ secrets.CORE_SHARED_SERVICES_ACCOUNT }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/delius-core-${{github.event.inputs.service-name}}-ecr-repo:${{ github.event.inputs.image-tag }}"

                    $.containerDefinitions[0].logConfiguration.logDriver.options."awslogs-group": "${{ github.event.inputs.environment }}-${{ github.event.inputs.service-name }}"
                    $.containerDefinitions[0].logConfiguration.logDriver.options."awslogs-region": "${{secrets.AWS_REGION}}"
                    $.containerDefinitions[0].logConfiguration.logDriver.options."awslogs-stream-prefix": "${{ github.event.inputs.environment }}-${{ github.event.inputs.service-name }}"
                    
          - name: Show rendered user service task
            if: github.ref != 'refs/heads/main'
            run: cat ${{ steps.render.outputs.rendered-json-file }}
          - name: Run ECS Task
            id: run-task
            run: |
                task_definition=$(aws ecs register-task-definition --cli-input-json file://${{ steps.render.outputs.rendered-json-file }})
                task_definition_arn=$(echo $task_definition | jq -r '.taskDefinition.taskDefinitionArn') 
                echo "TASK_DEF_ARN=$(echo $task_definition | jq -r '.taskDefinition.taskDefinitionArn') " >> $GITHUB_OUTPUT

                aws ecs run-task --cluster ${{ steps.set-cluster-arn.outputs.CLUSTER_ARN }} --task-definition $task_definition_arn --network-configuration "awsvpcConfiguration={subnets=${{ steps.get-ids.outputs.SUBNET_IDS }},securityGroups=${{ steps.get-ids.outputs.SEC_GROUPS }},assignPublicIp=DISABLED}" --launch-type FARGATE --count 1
               
