name: "Oracle: Backup"
run-name: "Oracle: ${{ github.event_name == 'workflow_dispatch' && format('{0}_{1}_{2}', github.event.inputs.TargetEnvironment, github.event.inputs.Period, github.event.inputs.TargetHost) }}_database_backup"
on:
  workflow_dispatch:
    inputs:
      TargetEnvironment:
        description: "Target environment"
        required: true
        type: choice
        options:
          - "delius-core-dev"
          - "delius-core-test"
          - "delius-core-training"
          - "delius-core-stage"
          - "delius-core-pre-prod"
          - "delius-core-prod"
      TargetHost:
        description: "Backup target host"
        required: true
        type: choice
        options: 
          - "delius_primarydb"
          - "mis_primarydb"
          - "misboe_primarydb"
          - "misdsd_primarydb"
          - "delius_standbydb1"
          - "mis_standbydb1"
          - "misboe_standbydb1"
          - "misdsd_standbydb1"
          - "delius_standbydb2"
      Period: 
        description: "Is this a daily or weekly backup?"
        required: true
        type: choice
        options: 
          - "daily"
          - "weekly"
      BackupStandbyOnPrimaryFailure:
        description: "Retry the backup on the standby if primary backup fails"
        type: boolean
        default: true
      FixAbsentChunks:
        description: "Validate and fix absent S3 missing backup chunks"
        type: choice
        default: "yes"
        options: 
          - "yes"
          - "no"
      DeleteDefunct:
        description:  "Delete backups for DBIDs no longer in use"
        type: choice
        default: "no"
        options: 
          - "yes"
          - "no"
      ParametersJSON:
        description: "JSON parameters for backup job (overrides any other specified inputs)"
        type: string
        required: false
      EnableTrace:
        description: "Enable RMAN trace for debugging"
        required: false
        type: choice
        default: "no"
        options: 
          - "yes" 
          - "no"     
      VerboseOutput: 
        description: "Verbose Output level"
        type: choice
        options:
          - ""
          - "-v"
          - "-vv"
          - "-vvv"
          - "-vvvv"
      SourceCodeVersion:
        description: "Source version for the hmpps-delius-operation-automation. Enter a pull request, branch, commit ID, tag, or reference."
        type: string
        default: "main"
      SourceConfigVersion:
        description: "Source version for the modernisation-platform-configuration-management. Enter a pull request, branch, commit ID, tag, or reference."
        type: string
        default: "main"

  workflow_call:
    inputs:
      TargetEnvironment:
        description: "Target environment"
        required: true
        type: string
      TargetHost:
        description: "Backup target host"
        required: true
        type: string
      Period:
        description: "Is this a daily or weekly backup?"
        required: true
        type: string
      DeleteDefunct:
        description:  "Delete backups for DBIDs no longer in use"
        required: false
        type: string
        default: "no"

  repository_dispatch:
    types: ["oracle-db-backup-success","oracle-db-backup-failure"]

# Allow permissions on repository and docker image and OIDC token
permissions:
  contents: read
  packages: read
  id-token: write  # This is required for requesting the JWT

jobs:
  build_rman_target_name:
    runs-on: ubuntu-latest
    outputs:
      RmanTarget: ${{ steps.preparermantargetname.outputs.RmanTarget }}
      TargetEnvironment: ${{ steps.preparermantargetname.outputs.TargetEnvironment }}-preapproved
    steps:
      - name: Prepare Rman Target
        id: preparermantargetname
        run: |
          if [[ -z "${{ github.event.inputs.ParametersJSON }}" ]];
          then
              if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]
              then
                TargetHost="${{ github.event.inputs.TargetHost }}"
                TargetEnvironment="${{ github.event.inputs.TargetEnvironment }}"
              elif [[ "${{ github.event_name }}" == "schedule" ]]
              then
                TargetHost="${{ inputs.TargetHost }}"
                TargetEnvironment="${{ inputs.TargetEnvironment }}"
              elif [[ "${{ github.event_name }}" == "repository_dispatch" ]] && [[ "${{ github.event.action}}" == "oracle-db-backup-failure" ]]
              then
                echo "Payload: ${{ github.event.client_payload }}"
              fi
          else
             echo "JSON: ${{ github.event.inputs.ParametersJSON }}"
             exit 123
          fi
          RmanTarget="environment_name_$(echo $TargetEnvironment | sed 's/delius-core-dev/delius_core_development_dev/;s/delius-core-test/delius_core_test_test/;s/delius-core-training/delius_core_test_training/;s/delius-core-stage/delius_core_preproduction_stage/;s/delius-core-pre-prod/delius_core_preproduction_pre_prod/;s/delius-core-prod/delius_core_production_prod/')_$TargetHost"
          echo "RmanTarget=$RmanTarget" >> $GITHUB_OUTPUT
          echo "TargetEnvironment=$TargetEnvironment" >> $GITHUB_OUTPUT

  # Start deployment container job based on the build delius-ansible-aws image
  deployment:
    name: oracle-backup
    needs: build_rman_target_name
    environment: ${{needs.build_rman_target_name.outputs.TargetEnvironment}}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ministryofjustice/hmpps-delius-operational-automation:0.41.0
    timeout-minutes: 1440
    env:
      backup_command: ansible-playbook operations/playbooks/oracle_backup/backup.yml
      inventory: inventory/ansible
      Period: "${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.Period || (github.event_name == 'schedule' && inputs.Period ))  }}"
      FixAbsentChunks: "${{ github.event_name == 'workflow_dispatch' && github.event.inputs.FixAbsentChunks || 'yes' }}"
      DeleteDefunct: "${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.DeleteDefunct || (github.event_name == 'schedule' && inputs.DeleteDefunct )) }}"
      EnableTrace: "${{ github.event_name == 'workflow_dispatch' && github.event.inputs.EnableTrace || 'no' }}"
      VerboseOutput: "${{ github.event_name == 'workflow_dispatch' && github.event.inputs.VerboseOutput || '' }}"
      RmanTarget: "${{needs.build_rman_target_name.outputs.RmanTarget}}"
      TargetEnvironment: "${{needs.build_rman_target_name.outputs.TargetEnvironment}}"
      SSMParameter: "/oracle-backups/${{needs.build_rman_target_name.outputs.RmanTarget}}"
      ansible_config: operations/playbooks/ansible.cfg
    continue-on-error: false
    steps:

      - name: Checkout hmpps-delius-operation-automation
        uses: actions/checkout@v4
        with:
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            playbooks/oracle_backup
            playbooks/ansible.cfg
          path: operations
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.SourceCodeVersion || 'main' }}
          fetch-depth: 0

      - name: Checkout Ansible Inventory From modernisation-platform-configuration-management
        uses: actions/checkout@v4
        with:
          repository: ministryofjustice/modernisation-platform-configuration-management
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            ansible/hosts
            ansible/group_vars
          path: inventory
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.SourceConfigVersion || 'main' }}
          fetch-depth: 0

      - name: Checkout Ansible Required Roles From modernisation-platform-configuration-management
        uses: actions/checkout@v4
        with:
          repository: ministryofjustice/modernisation-platform-configuration-management
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            ansible/roles/secretsmanager-passwords
            ansible/roles/get-modernisation-platform-facts
          path: roles
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.SourceConfigVersion || 'main' }}
          fetch-depth: 0

      - name: Configure AWS Credentials
        id: login-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/modernisation-platform-oidc-cicd"
          role-session-name: "hmpps-delius-operational-automation-${{ github.run_number }}"
          aws-region: "eu-west-2"

      - name: Check And Set Backup Runtime
        id: check-and-set-backup-runtime
        shell: bash
        run: |
            RUNTIME=$(aws ssm get-parameter --region ${AWS_REGION} --name "$SSMParameter" --query "Parameter.Value" --output text 2>&1) || true
            [[ $RUNTIME =~ ParameterNotFound ]] && RUNTIME="{\"Phase\":\"Inactive\",\"Status\":\"Inactive\",\"Message\":\"Runtime not initialized\",\"TargetEnvironment\":\"\",\"RmanTarget\":\"\",\"FixAbsentChunks\":\"\",\"VerboseOutput\":\"\"}"
            PHASE=$(echo $RUNTIME | jq -r '.Phase')
            echo "Backup Phase: $PHASE"
            # Initialize the Backup Status for this RMAN Backup Target
            [[ ! $PHASE =~ ^Inactive ]] && echo "Backup is already active on this host.  Multiple concurrent runs are not allowed." && exit 1
            aws ssm put-parameter --region ${AWS_REGION} --name "$SSMParameter" --type String --overwrite \
                --value "{\"Phase\":\"Backup\",\"Status\":\"Initializing\",\"Message\":\"Running on $RmanTarget\",\"TargetEnvironment\":\"$TargetEnvironment\",\"RmanTarget\":\"$RmanTarget\",\"FixAbsentChunks\":\"$FixAbsentChunks\",\"VerboseOutput\":\"$VerboseOutput\"}" \
                --description "Runtime phase and status details of RMAN backups running on the $RmanTarget host"

      - name: Start Ansible Backup On Primary
        id: backup
        continue-on-error: true
        run: |
          export ANSIBLE_CONFIG=$ansible_config
          ln -s $PWD/roles/ansible/roles $PWD/operations/playbooks/oracle_backup/roles
          $backup_command -i $inventory -e ansible_aws_ssm_bucket_name=${{ vars.ANSIBLE_AWS_SSM_BUCKET_NAME }} -e rman_target=$RmanTarget -e daily_weekly=$Period -e enable_trace=$EnableTrace -e ssm_parameter=$SSMParameter $VerboseOutput
